//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Json.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class JsonLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, INTEGER=8, FLOAT=9, 
		BOOL=10, STRING=11, IDENT=12, WS=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "INTEGER", "FLOAT", 
		"BOOL", "STRING", "IDENT", "WS"
	};


	public JsonLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public JsonLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'['", "','", "']'", "'{'", "'}'", "':'", "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "INTEGER", "FLOAT", "BOOL", 
		"STRING", "IDENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Json.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsonLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xF', 'q', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x5', '\t', '\x30', '\n', '\t', 
		'\x3', '\t', '\x6', '\t', '\x33', '\n', '\t', '\r', '\t', '\xE', '\t', 
		'\x34', '\x3', '\n', '\x5', '\n', '\x38', '\n', '\n', '\x3', '\n', '\x6', 
		'\n', ';', '\n', '\n', '\r', '\n', '\xE', '\n', '<', '\x3', '\n', '\x3', 
		'\n', '\x6', '\n', '\x41', '\n', '\n', '\r', '\n', '\xE', '\n', '\x42', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', 'G', '\n', '\n', '\x3', '\n', '\x6', 
		'\n', 'J', '\n', '\n', '\r', '\n', '\xE', '\n', 'K', '\x5', '\n', 'N', 
		'\n', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'Y', '\n', '\v', '\x3', '\f', '\x3', '\f', '\a', '\f', ']', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '`', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\a', '\r', '\x66', '\n', '\r', '\f', '\r', '\xE', 
		'\r', 'i', '\v', '\r', '\x3', '\xE', '\x6', '\xE', 'l', '\n', '\xE', '\r', 
		'\xE', '\xE', '\xE', 'm', '\x3', '\xE', '\x3', '\xE', '\x3', '^', '\x2', 
		'\xF', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', 
		'\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', 
		'\r', '\x19', '\xE', '\x1B', '\xF', '\x3', '\x2', '\b', '\x3', '\x2', 
		'\x32', ';', '\x4', '\x2', 'G', 'G', 'g', 'g', '\x4', '\x2', '-', '-', 
		'/', '/', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', 
		'\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x5', 
		'\x2', '\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', '|', '\x2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x2', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x3', '\x1D', '\x3', '\x2', '\x2', '\x2', 
		'\x5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\a', '!', '\x3', '\x2', '\x2', 
		'\x2', '\t', '#', '\x3', '\x2', '\x2', '\x2', '\v', '%', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\'', '\x3', '\x2', '\x2', '\x2', '\xF', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '/', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x15', 'X', '\x3', '\x2', '\x2', 
		'\x2', '\x17', 'Z', '\x3', '\x2', '\x2', '\x2', '\x19', '\x63', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', 'k', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1E', '\a', ']', '\x2', '\x2', '\x1E', '\x4', '\x3', '\x2', '\x2', '\x2', 
		'\x1F', ' ', '\a', '.', '\x2', '\x2', ' ', '\x6', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\a', '_', '\x2', '\x2', '\"', '\b', '\x3', '\x2', '\x2', 
		'\x2', '#', '$', '\a', '}', '\x2', '\x2', '$', '\n', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\a', '\x7F', '\x2', '\x2', '&', '\f', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\a', '<', '\x2', '\x2', '(', '\xE', '\x3', '\x2', 
		'\x2', '\x2', ')', '*', '\a', 'p', '\x2', '\x2', '*', '+', '\a', 'w', 
		'\x2', '\x2', '+', ',', '\a', 'n', '\x2', '\x2', ',', '-', '\a', 'n', 
		'\x2', '\x2', '-', '\x10', '\x3', '\x2', '\x2', '\x2', '.', '\x30', '\a', 
		'/', '\x2', '\x2', '/', '.', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x33', '\t', '\x2', '\x2', '\x2', '\x32', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x34', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', 
		'\x35', '\x12', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\a', '/', 
		'\x2', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', 
		'\x3', '\x2', '\x2', '\x2', '\x38', ':', '\x3', '\x2', '\x2', '\x2', '\x39', 
		';', '\t', '\x2', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', 
		';', '<', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', 
		'<', '=', '\x3', '\x2', '\x2', '\x2', '=', '>', '\x3', '\x2', '\x2', '\x2', 
		'>', '@', '\a', '\x30', '\x2', '\x2', '?', '\x41', '\t', '\x2', '\x2', 
		'\x2', '@', '?', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '@', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x43', 'M', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x46', '\t', '\x3', '\x2', '\x2', '\x45', 'G', '\t', '\x4', '\x2', '\x2', 
		'\x46', '\x45', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\t', '\x2', 
		'\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'N', '\x3', '\x2', '\x2', '\x2', 'M', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', '\x14', 
		'\x3', '\x2', '\x2', '\x2', 'O', 'P', '\a', 'v', '\x2', '\x2', 'P', 'Q', 
		'\a', 't', '\x2', '\x2', 'Q', 'R', '\a', 'w', '\x2', '\x2', 'R', 'Y', 
		'\a', 'g', '\x2', '\x2', 'S', 'T', '\a', 'h', '\x2', '\x2', 'T', 'U', 
		'\a', '\x63', '\x2', '\x2', 'U', 'V', '\a', 'n', '\x2', '\x2', 'V', 'W', 
		'\a', 'u', '\x2', '\x2', 'W', 'Y', '\a', 'g', '\x2', '\x2', 'X', 'O', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'S', '\x3', '\x2', '\x2', '\x2', 'Y', 
		'\x16', '\x3', '\x2', '\x2', '\x2', 'Z', '^', '\a', '$', '\x2', '\x2', 
		'[', ']', '\v', '\x2', '\x2', '\x2', '\\', '[', '\x3', '\x2', '\x2', '\x2', 
		']', '`', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', 
		'^', '\\', '\x3', '\x2', '\x2', '\x2', '_', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '$', 
		'\x2', '\x2', '\x62', '\x18', '\x3', '\x2', '\x2', '\x2', '\x63', 'g', 
		'\t', '\x5', '\x2', '\x2', '\x64', '\x66', '\t', '\x6', '\x2', '\x2', 
		'\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', 
		'\x2', '\x2', '\x2', 'h', '\x1A', '\x3', '\x2', '\x2', '\x2', 'i', 'g', 
		'\x3', '\x2', '\x2', '\x2', 'j', 'l', '\t', '\a', '\x2', '\x2', 'k', 'j', 
		'\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 
		'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 
		'n', 'o', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\b', '\xE', '\x2', '\x2', 
		'p', '\x1C', '\x3', '\x2', '\x2', '\x2', '\xF', '\x2', '/', '\x34', '\x37', 
		'<', '\x42', '\x46', 'K', 'M', 'X', '^', 'g', 'm', '\x3', '\b', '\x2', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
