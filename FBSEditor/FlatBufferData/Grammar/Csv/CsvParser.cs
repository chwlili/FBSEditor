//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Csv.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CsvParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ROWEND=1, COLEND=2, STRING=3, TEXT=4, WS=5;
	public const int
		RULE_csvTab = 0, RULE_csvRow = 1, RULE_csvCol = 2;
	public static readonly string[] ruleNames = {
		"csvTab", "csvRow", "csvCol"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ROWEND", "COLEND", "STRING", "TEXT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Csv.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CsvParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CsvParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CsvParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CsvTabContext : ParserRuleContext {
		public CsvRowContext _csvRow;
		public IList<CsvRowContext> _rows = new List<CsvRowContext>();
		public CsvRowContext[] csvRow() {
			return GetRuleContexts<CsvRowContext>();
		}
		public CsvRowContext csvRow(int i) {
			return GetRuleContext<CsvRowContext>(i);
		}
		public ITerminalNode[] ROWEND() { return GetTokens(CsvParser.ROWEND); }
		public ITerminalNode ROWEND(int i) {
			return GetToken(CsvParser.ROWEND, i);
		}
		public CsvTabContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvTab; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvTab(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvTab(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvTab(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvTabContext csvTab() {
		CsvTabContext _localctx = new CsvTabContext(Context, State);
		EnterRule(_localctx, 0, RULE_csvTab);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 6; _localctx._csvRow = csvRow();
				_localctx._rows.Add(_localctx._csvRow);
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ROWEND) {
					{
					{
					State = 7; Match(ROWEND);
					State = 8; _localctx._csvRow = csvRow();
					_localctx._rows.Add(_localctx._csvRow);
					}
					}
					State = 13;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsvRowContext : ParserRuleContext {
		public CsvColContext _csvCol;
		public IList<CsvColContext> _cols = new List<CsvColContext>();
		public CsvColContext[] csvCol() {
			return GetRuleContexts<CsvColContext>();
		}
		public CsvColContext csvCol(int i) {
			return GetRuleContext<CsvColContext>(i);
		}
		public ITerminalNode[] COLEND() { return GetTokens(CsvParser.COLEND); }
		public ITerminalNode COLEND(int i) {
			return GetToken(CsvParser.COLEND, i);
		}
		public CsvRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvRow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvRowContext csvRow() {
		CsvRowContext _localctx = new CsvRowContext(Context, State);
		EnterRule(_localctx, 2, RULE_csvRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING || _la==TEXT) {
				{
				State = 16; _localctx._csvCol = csvCol();
				_localctx._cols.Add(_localctx._csvCol);
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COLEND) {
					{
					{
					State = 17; Match(COLEND);
					State = 18; _localctx._csvCol = csvCol();
					_localctx._cols.Add(_localctx._csvCol);
					}
					}
					State = 23;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsvColContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(CsvParser.TEXT, 0); }
		public ITerminalNode STRING() { return GetToken(CsvParser.STRING, 0); }
		public CsvColContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvCol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvCol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvCol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvCol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvColContext csvCol() {
		CsvColContext _localctx = new CsvColContext(Context, State);
		EnterRule(_localctx, 4, RULE_csvCol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			_la = TokenStream.LA(1);
			if ( !(_la==STRING || _la==TEXT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\a', '\x1F', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', '\f', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xF', 
		'\v', '\x2', '\x5', '\x2', '\x11', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\a', '\x3', '\x16', '\n', '\x3', '\f', '\x3', '\xE', '\x3', 
		'\x19', '\v', '\x3', '\x5', '\x3', '\x1B', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x2', '\x2', '\x5', '\x2', '\x4', '\x6', 
		'\x2', '\x3', '\x3', '\x2', '\x5', '\x6', '\x2', '\x1F', '\x2', '\x10', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x1C', '\x3', '\x2', '\x2', '\x2', '\b', '\r', '\x5', '\x4', '\x3', 
		'\x2', '\t', '\n', '\a', '\x3', '\x2', '\x2', '\n', '\f', '\x5', '\x4', 
		'\x3', '\x2', '\v', '\t', '\x3', '\x2', '\x2', '\x2', '\f', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\r', '\v', '\x3', '\x2', '\x2', '\x2', '\r', '\xE', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\x10', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x11', '\x3', '\x2', '\x2', '\x2', '\x11', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x17', '\x5', '\x6', '\x4', '\x2', '\x13', 
		'\x14', '\a', '\x4', '\x2', '\x2', '\x14', '\x16', '\x5', '\x6', '\x4', 
		'\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x16', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x17', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\t', '\x2', '\x2', 
		'\x2', '\x1D', '\a', '\x3', '\x2', '\x2', '\x2', '\x6', '\r', '\x10', 
		'\x17', '\x1A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
