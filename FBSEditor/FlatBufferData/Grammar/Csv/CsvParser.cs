//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Csv.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CsvParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ROWEND=1, COLEND=2, STRING=3, TEXT=4, WS=5;
	public const int
		RULE_csvTab = 0, RULE_csvRow = 1, RULE_csvCol = 2, RULE_txtField = 3, 
		RULE_strField = 4;
	public static readonly string[] ruleNames = {
		"csvTab", "csvRow", "csvCol", "txtField", "strField"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "ROWEND", "COLEND", "STRING", "TEXT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Csv.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CsvParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public string separators = ",";
		public bool IsSeparator(string ch)
		{
			return  !string.IsNullOrEmpty(separators) && !string.IsNullOrEmpty(ch) ? separators.Contains(ch):false;
		}

		public CsvParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CsvParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CsvTabContext : ParserRuleContext {
		public CsvRowContext _csvRow;
		public IList<CsvRowContext> _rows = new List<CsvRowContext>();
		public CsvRowContext[] csvRow() {
			return GetRuleContexts<CsvRowContext>();
		}
		public CsvRowContext csvRow(int i) {
			return GetRuleContext<CsvRowContext>(i);
		}
		public ITerminalNode[] ROWEND() { return GetTokens(CsvParser.ROWEND); }
		public ITerminalNode ROWEND(int i) {
			return GetToken(CsvParser.ROWEND, i);
		}
		public ITerminalNode[] Eof() { return GetTokens(CsvParser.Eof); }
		public ITerminalNode Eof(int i) {
			return GetToken(CsvParser.Eof, i);
		}
		public CsvTabContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvTab; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvTab(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvTab(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvTab(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvTabContext csvTab() {
		CsvTabContext _localctx = new CsvTabContext(Context, State);
		EnterRule(_localctx, 0, RULE_csvTab);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << TEXT) | (1L << WS))) != 0)) {
				{
				{
				State = 10; _localctx._csvRow = csvRow();
				_localctx._rows.Add(_localctx._csvRow);
				State = 11;
				_la = TokenStream.LA(1);
				if ( !(_la==Eof || _la==ROWEND) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 17;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsvRowContext : ParserRuleContext {
		public CsvColContext _csvCol;
		public IList<CsvColContext> _cols = new List<CsvColContext>();
		public CsvColContext[] csvCol() {
			return GetRuleContexts<CsvColContext>();
		}
		public CsvColContext csvCol(int i) {
			return GetRuleContext<CsvColContext>(i);
		}
		public ITerminalNode[] COLEND() { return GetTokens(CsvParser.COLEND); }
		public ITerminalNode COLEND(int i) {
			return GetToken(CsvParser.COLEND, i);
		}
		public CsvRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvRow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvRowContext csvRow() {
		CsvRowContext _localctx = new CsvRowContext(Context, State);
		EnterRule(_localctx, 2, RULE_csvRow);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; _localctx._csvCol = csvCol();
			_localctx._cols.Add(_localctx._csvCol);
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COLEND) {
				{
				{
				State = 19; Match(COLEND);
				State = 20; _localctx._csvCol = csvCol();
				_localctx._cols.Add(_localctx._csvCol);
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsvColContext : ParserRuleContext {
		public TxtFieldContext txt;
		public StrFieldContext str;
		public TxtFieldContext txtField() {
			return GetRuleContext<TxtFieldContext>(0);
		}
		public StrFieldContext strField() {
			return GetRuleContext<StrFieldContext>(0);
		}
		public ITerminalNode[] WS() { return GetTokens(CsvParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CsvParser.WS, i);
		}
		public CsvColContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvCol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvCol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvCol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvCol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvColContext csvCol() {
		CsvColContext _localctx = new CsvColContext(Context, State);
		EnterRule(_localctx, 4, RULE_csvCol);
		int _la;
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26; _localctx.txt = txtField();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27; _localctx.str = strField();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 28; Match(WS);
					}
					}
					State = 31;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TxtFieldContext : ParserRuleContext {
		public IToken _TEXT;
		public IList<IToken> _txt = new List<IToken>();
		public IToken _WS;
		public ITerminalNode[] TEXT() { return GetTokens(CsvParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(CsvParser.TEXT, i);
		}
		public ITerminalNode[] WS() { return GetTokens(CsvParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CsvParser.WS, i);
		}
		public TxtFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_txtField; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterTxtField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitTxtField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTxtField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TxtFieldContext txtField() {
		TxtFieldContext _localctx = new TxtFieldContext(Context, State);
		EnterRule(_localctx, 6, RULE_txtField);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 35; Match(WS);
				}
			}

			State = 38; _localctx._TEXT = Match(TEXT);
			_localctx._txt.Add(_localctx._TEXT);
			State = 43;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1+1 ) {
					{
					State = 41;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case TEXT:
						{
						State = 39; _localctx._TEXT = Match(TEXT);
						_localctx._txt.Add(_localctx._TEXT);
						}
						break;
					case WS:
						{
						State = 40; _localctx._WS = Match(WS);
						_localctx._txt.Add(_localctx._WS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 45;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 46; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StrFieldContext : ParserRuleContext {
		public IToken txt;
		public ITerminalNode STRING() { return GetToken(CsvParser.STRING, 0); }
		public ITerminalNode[] WS() { return GetTokens(CsvParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CsvParser.WS, i);
		}
		public StrFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_strField; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterStrField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitStrField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStrField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StrFieldContext strField() {
		StrFieldContext _localctx = new StrFieldContext(Context, State);
		EnterRule(_localctx, 8, RULE_strField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 49; Match(WS);
				}
			}

			State = 52; _localctx.txt = Match(STRING);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WS) {
				{
				State = 53; Match(WS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\a', ';', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x10', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x13', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x18', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x1B', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x6', '\x4', ' ', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '!', 
		'\x5', '\x4', '$', '\n', '\x4', '\x3', '\x5', '\x5', '\x5', '\'', '\n', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', ',', '\n', 
		'\x5', '\f', '\x5', '\xE', '\x5', '/', '\v', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x32', '\n', '\x5', '\x3', '\x6', '\x5', '\x6', '\x35', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x39', '\n', '\x6', 
		'\x3', '\x6', '\x3', '-', '\x2', '\a', '\x2', '\x4', '\x6', '\b', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x2', '@', '\x2', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '\x14', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'#', '\x3', '\x2', '\x2', '\x2', '\b', '&', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x34', '\x3', '\x2', '\x2', '\x2', '\f', '\r', '\x5', '\x4', '\x3', 
		'\x2', '\r', '\xE', '\t', '\x2', '\x2', '\x2', '\xE', '\x10', '\x3', '\x2', 
		'\x2', '\x2', '\xF', '\f', '\x3', '\x2', '\x2', '\x2', '\x10', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x11', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x11', '\x12', '\x3', '\x2', '\x2', '\x2', '\x12', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', '\x2', '\x14', '\x19', 
		'\x5', '\x6', '\x4', '\x2', '\x15', '\x16', '\a', '\x4', '\x2', '\x2', 
		'\x16', '\x18', '\x5', '\x6', '\x4', '\x2', '\x17', '\x15', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x19', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x19', '\x1A', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '$', '\x5', '\b', '\x5', '\x2', '\x1D', '$', '\x5', 
		'\n', '\x6', '\x2', '\x1E', ' ', '\a', '\a', '\x2', '\x2', '\x1F', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', '!', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\"', '$', '\x3', '\x2', '\x2', '\x2', '#', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '#', '\x1D', '\x3', '\x2', '\x2', '\x2', '#', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '$', '\a', '\x3', '\x2', '\x2', '\x2', '%', '\'', '\a', 
		'\a', '\x2', '\x2', '&', '%', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '-', 
		'\a', '\x6', '\x2', '\x2', ')', ',', '\a', '\x6', '\x2', '\x2', '*', ',', 
		'\a', '\a', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', '+', '*', 
		'\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', '-', 
		'.', '\x3', '\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x32', '\a', '\a', '\x2', '\x2', '\x31', '\x30', '\x3', 
		'\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\x33', '\x35', '\a', '\a', '\x2', '\x2', 
		'\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', 
		'\a', '\x5', '\x2', '\x2', '\x37', '\x39', '\a', '\a', '\x2', '\x2', '\x38', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', '\v', '\x3', '\x2', '\x2', '\x2', '\f', '\x11', '\x19', 
		'!', '#', '&', '+', '-', '\x31', '\x34', '\x38',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
