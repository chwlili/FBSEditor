//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Csv.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class CsvParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COLEND=1, ROWEND=2, STRING=3, TEXT=4, WS=5;
	public const int
		RULE_csvTab = 0, RULE_csvRow = 1, RULE_csvCol = 2, RULE_csvEndCol = 3, 
		RULE_csvTxt = 4;
	public static readonly string[] ruleNames = {
		"csvTab", "csvRow", "csvCol", "csvEndCol", "csvTxt"
	};

	private static readonly string[] _LiteralNames = {
		null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COLEND", "ROWEND", "STRING", "TEXT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Csv.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CsvParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}


		public string separators = ",";
		public bool IsSeparator(string ch)
		{
			return  !string.IsNullOrEmpty(separators) && !string.IsNullOrEmpty(ch) ? separators.Contains(ch):false;
		}
		public bool IgnoreSpace = false;

		public CsvParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CsvParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CsvTabContext : ParserRuleContext {
		public CsvRowContext _csvRow;
		public IList<CsvRowContext> _rows = new List<CsvRowContext>();
		public CsvRowContext[] csvRow() {
			return GetRuleContexts<CsvRowContext>();
		}
		public CsvRowContext csvRow(int i) {
			return GetRuleContext<CsvRowContext>(i);
		}
		public CsvTabContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvTab; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvTab(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvTab(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvTab(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvTabContext csvTab() {
		CsvTabContext _localctx = new CsvTabContext(Context, State);
		EnterRule(_localctx, 0, RULE_csvTab);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 10; _localctx._csvRow = csvRow();
					_localctx._rows.Add(_localctx._csvRow);
					}
					} 
				}
				State = 15;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsvRowContext : ParserRuleContext {
		public CsvColContext _csvCol;
		public IList<CsvColContext> _cols = new List<CsvColContext>();
		public CsvEndColContext end;
		public CsvEndColContext csvEndCol() {
			return GetRuleContext<CsvEndColContext>(0);
		}
		public CsvColContext[] csvCol() {
			return GetRuleContexts<CsvColContext>();
		}
		public CsvColContext csvCol(int i) {
			return GetRuleContext<CsvColContext>(i);
		}
		public CsvRowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvRow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvRowContext csvRow() {
		CsvRowContext _localctx = new CsvRowContext(Context, State);
		EnterRule(_localctx, 2, RULE_csvRow);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 16; _localctx._csvCol = csvCol();
					_localctx._cols.Add(_localctx._csvCol);
					}
					} 
				}
				State = 21;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 22; _localctx.end = csvEndCol();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsvColContext : ParserRuleContext {
		public CsvTxtContext content;
		public ITerminalNode COLEND() { return GetToken(CsvParser.COLEND, 0); }
		public CsvTxtContext csvTxt() {
			return GetRuleContext<CsvTxtContext>(0);
		}
		public CsvColContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvCol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvCol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvCol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvCol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvColContext csvCol() {
		CsvColContext _localctx = new CsvColContext(Context, State);
		EnterRule(_localctx, 4, RULE_csvCol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 24; _localctx.content = csvTxt();
				}
				break;
			}
			State = 27; Match(COLEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsvEndColContext : ParserRuleContext {
		public CsvTxtContext content;
		public ITerminalNode ROWEND() { return GetToken(CsvParser.ROWEND, 0); }
		public CsvTxtContext csvTxt() {
			return GetRuleContext<CsvTxtContext>(0);
		}
		public CsvEndColContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvEndCol; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvEndCol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvEndCol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvEndCol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvEndColContext csvEndCol() {
		CsvEndColContext _localctx = new CsvEndColContext(Context, State);
		EnterRule(_localctx, 6, RULE_csvEndCol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 29; _localctx.content = csvTxt();
				}
				break;
			}
			State = 32; Match(ROWEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CsvTxtContext : ParserRuleContext {
		public IToken _STRING;
		public IList<IToken> _txt = new List<IToken>();
		public IToken _TEXT;
		public IToken _WS;
		public ITerminalNode[] WS() { return GetTokens(CsvParser.WS); }
		public ITerminalNode WS(int i) {
			return GetToken(CsvParser.WS, i);
		}
		public ITerminalNode STRING() { return GetToken(CsvParser.STRING, 0); }
		public ITerminalNode TEXT() { return GetToken(CsvParser.TEXT, 0); }
		public CsvTxtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvTxt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.EnterCsvTxt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICsvListener typedListener = listener as ICsvListener;
			if (typedListener != null) typedListener.ExitCsvTxt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICsvVisitor<TResult> typedVisitor = visitor as ICsvVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvTxt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvTxtContext csvTxt() {
		CsvTxtContext _localctx = new CsvTxtContext(Context, State);
		EnterRule(_localctx, 8, RULE_csvTxt);
		int _la;
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 34;
				if (!(IgnoreSpace)) throw new FailedPredicateException(this, "IgnoreSpace");
				State = 36;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 35; Match(WS);
					}
				}

				State = 40;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
					{
					State = 38; _localctx._STRING = Match(STRING);
					_localctx._txt.Add(_localctx._STRING);
					}
					break;
				case TEXT:
					{
					State = 39; _localctx._TEXT = Match(TEXT);
					_localctx._txt.Add(_localctx._TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 43;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 42; Match(WS);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 45; _localctx._WS = Match(WS);
					_localctx._txt.Add(_localctx._WS);
					}
				}

				State = 50;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case STRING:
					{
					State = 48; _localctx._STRING = Match(STRING);
					_localctx._txt.Add(_localctx._STRING);
					}
					break;
				case TEXT:
					{
					State = 49; _localctx._TEXT = Match(TEXT);
					_localctx._txt.Add(_localctx._TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WS) {
					{
					State = 52; _localctx._WS = Match(WS);
					_localctx._txt.Add(_localctx._WS);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 55; Match(WS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return csvTxt_sempred((CsvTxtContext)_localctx, predIndex);
		}
		return true;
	}
	private bool csvTxt_sempred(CsvTxtContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return IgnoreSpace;
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\a', '=', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', '\x2', 
		'\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x3', '\a', '\x3', '\x14', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x17', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x5', '\x4', '\x1C', '\n', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x5', '\x5', '!', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\'', '\n', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '+', '\n', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '.', '\n', '\x6', '\x3', '\x6', '\x5', '\x6', '\x31', 
		'\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x35', '\n', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\x38', '\n', '\x6', '\x3', '\x6', '\x5', 
		'\x6', ';', '\n', '\x6', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', '\x4', 
		'\x6', '\b', '\n', '\x2', '\x2', '\x2', '\x43', '\x2', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x15', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\b', ' ', '\x3', '\x2', '\x2', '\x2', '\n', 
		':', '\x3', '\x2', '\x2', '\x2', '\f', '\xE', '\x5', '\x4', '\x3', '\x2', 
		'\r', '\f', '\x3', '\x2', '\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xF', '\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x3', '\x3', '\x2', '\x2', '\x2', '\x11', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x12', '\x14', '\x5', '\x6', '\x4', 
		'\x2', '\x13', '\x12', '\x3', '\x2', '\x2', '\x2', '\x14', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x16', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x5', 
		'\b', '\x5', '\x2', '\x19', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1C', '\x5', '\n', '\x6', '\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x3', '\x2', '\x2', '\x1E', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x1F', '!', '\x5', '\n', '\x6', '\x2', 
		' ', '\x1F', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\a', '\x4', 
		'\x2', '\x2', '#', '\t', '\x3', '\x2', '\x2', '\x2', '$', '&', '\x6', 
		'\x6', '\x2', '\x2', '%', '\'', '\a', '\a', '\x2', '\x2', '&', '%', '\x3', 
		'\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', '\'', '*', 
		'\x3', '\x2', '\x2', '\x2', '(', '+', '\a', '\x5', '\x2', '\x2', ')', 
		'+', '\a', '\x6', '\x2', '\x2', '*', '(', '\x3', '\x2', '\x2', '\x2', 
		'*', ')', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x3', '\x2', '\x2', '\x2', 
		',', '.', '\a', '\a', '\x2', '\x2', '-', ',', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', ';', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x31', '\a', '\a', '\x2', '\x2', '\x30', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x34', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x35', '\a', '\x5', '\x2', '\x2', '\x33', 
		'\x35', '\a', '\x6', '\x2', '\x2', '\x34', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x33', '\x3', '\x2', '\x2', '\x2', '\x35', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x36', '\x38', '\a', '\a', '\x2', '\x2', '\x37', 
		'\x36', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x38', ';', '\x3', '\x2', '\x2', '\x2', '\x39', ';', '\a', '\a', 
		'\x2', '\x2', ':', '$', '\x3', '\x2', '\x2', '\x2', ':', '\x30', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\r', '\xF', '\x15', '\x1B', ' ', '&', '*', 
		'-', '\x30', '\x34', '\x37', ':',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
