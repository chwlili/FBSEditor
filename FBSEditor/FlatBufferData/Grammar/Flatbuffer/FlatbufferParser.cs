//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Flatbuffer.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FlatbufferParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, BRACE_L=40, BRACE_R=41, BRACKET_L=42, BRACKET_R=43, PARENTHESES_L=44, 
		PARENTHESES_R=45, INTEGER=46, FLOAT=47, BOOL=48, STRING=49, IDENT=50, 
		COMMENT=51, WS=52;
	public const int
		RULE_schema = 0, RULE_include = 1, RULE_namespace = 2, RULE_attribute = 3, 
		RULE_rootType = 4, RULE_fileExtension = 5, RULE_fileIdentifier = 6, RULE_string = 7, 
		RULE_table = 8, RULE_tableField = 9, RULE_struct = 10, RULE_structField = 11, 
		RULE_rpc = 12, RULE_rpcField = 13, RULE_enum = 14, RULE_enumField = 15, 
		RULE_union = 16, RULE_unionField = 17, RULE_metadata = 18, RULE_metadataField = 19, 
		RULE_attr = 20, RULE_attrField = 21, RULE_attrFieldValue = 22, RULE_singleType = 23, 
		RULE_listType = 24, RULE_objectValue = 25, RULE_objectValueField = 26, 
		RULE_arrayValue = 27, RULE_value = 28, RULE_singleValue = 29, RULE_scalarValue = 30;
	public static readonly string[] ruleNames = {
		"schema", "include", "namespace", "attribute", "rootType", "fileExtension", 
		"fileIdentifier", "string", "table", "tableField", "struct", "structField", 
		"rpc", "rpcField", "enum", "enumField", "union", "unionField", "metadata", 
		"metadataField", "attr", "attrField", "attrFieldValue", "singleType", 
		"listType", "objectValue", "objectValueField", "arrayValue", "value", 
		"singleValue", "scalarValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "';'", "'namespace'", "'.'", "'attribute'", "'root_type'", 
		"'file_extension'", "'file_identifier'", "'table'", "':'", "'='", "'=>'", 
		"'struct'", "'rpc_service'", "'enum'", "','", "'union'", "'bool'", "'byte'", 
		"'ubyte'", "'short'", "'ushort'", "'int'", "'uint'", "'float'", "'long'", 
		"'ulong'", "'double'", "'int8'", "'uint8'", "'int16'", "'uint16'", "'int32'", 
		"'uint32'", "'int64'", "'uint64'", "'float32'", "'float64'", "'string'", 
		"'{'", "'}'", "'['", "']'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "BRACE_L", "BRACE_R", "BRACKET_L", "BRACKET_R", 
		"PARENTHESES_L", "PARENTHESES_R", "INTEGER", "FLOAT", "BOOL", "STRING", 
		"IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Flatbuffer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FlatbufferParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FlatbufferParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FlatbufferParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SchemaContext : ParserRuleContext {
		public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public RootTypeContext[] rootType() {
			return GetRuleContexts<RootTypeContext>();
		}
		public RootTypeContext rootType(int i) {
			return GetRuleContext<RootTypeContext>(i);
		}
		public FileExtensionContext[] fileExtension() {
			return GetRuleContexts<FileExtensionContext>();
		}
		public FileExtensionContext fileExtension(int i) {
			return GetRuleContext<FileExtensionContext>(i);
		}
		public FileIdentifierContext[] fileIdentifier() {
			return GetRuleContexts<FileIdentifierContext>();
		}
		public FileIdentifierContext fileIdentifier(int i) {
			return GetRuleContext<FileIdentifierContext>(i);
		}
		public TableContext[] table() {
			return GetRuleContexts<TableContext>();
		}
		public TableContext table(int i) {
			return GetRuleContext<TableContext>(i);
		}
		public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		public EnumContext[] @enum() {
			return GetRuleContexts<EnumContext>();
		}
		public EnumContext @enum(int i) {
			return GetRuleContext<EnumContext>(i);
		}
		public UnionContext[] union() {
			return GetRuleContexts<UnionContext>();
		}
		public UnionContext union(int i) {
			return GetRuleContext<UnionContext>(i);
		}
		public RpcContext[] rpc() {
			return GetRuleContexts<RpcContext>();
		}
		public RpcContext rpc(int i) {
			return GetRuleContext<RpcContext>(i);
		}
		public ObjectValueContext[] objectValue() {
			return GetRuleContexts<ObjectValueContext>();
		}
		public ObjectValueContext objectValue(int i) {
			return GetRuleContext<ObjectValueContext>(i);
		}
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 0, RULE_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__16) | (1L << BRACE_L) | (1L << BRACKET_L))) != 0)) {
				{
				State = 74;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 62; include();
					}
					break;
				case 2:
					{
					State = 63; @namespace();
					}
					break;
				case 3:
					{
					State = 64; attribute();
					}
					break;
				case 4:
					{
					State = 65; rootType();
					}
					break;
				case 5:
					{
					State = 66; fileExtension();
					}
					break;
				case 6:
					{
					State = 67; fileIdentifier();
					}
					break;
				case 7:
					{
					State = 68; table();
					}
					break;
				case 8:
					{
					State = 69; @struct();
					}
					break;
				case 9:
					{
					State = 70; @enum();
					}
					break;
				case 10:
					{
					State = 71; union();
					}
					break;
				case 11:
					{
					State = 72; rpc();
					}
					break;
				case 12:
					{
					State = 73; objectValue();
					}
					break;
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 2, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; _localctx.key = Match(T__0);
			State = 80; _localctx.val = Match(STRING);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 81; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; _localctx.key = Match(T__2);
			{
			State = 85; Match(IDENT);
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 86; Match(T__3);
				State = 87; Match(IDENT);
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 93; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; _localctx.key = Match(T__4);
			State = 97; Match(STRING);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 98; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootTypeContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public RootTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterRootType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitRootType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootTypeContext rootType() {
		RootTypeContext _localctx = new RootTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_rootType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; _localctx.key = Match(T__5);
			State = 102; _localctx.val = Match(IDENT);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 103; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileExtensionContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public FileExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterFileExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitFileExtension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileExtensionContext fileExtension() {
		FileExtensionContext _localctx = new FileExtensionContext(Context, State);
		EnterRule(_localctx, 10, RULE_fileExtension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; _localctx.key = Match(T__6);
			State = 107; _localctx.val = Match(STRING);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 108; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileIdentifierContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public FileIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterFileIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitFileIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileIdentifierContext fileIdentifier() {
		FileIdentifierContext _localctx = new FileIdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_fileIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; _localctx.key = Match(T__7);
			State = 112; _localctx.val = Match(STRING);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 113; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 14, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; _localctx.text = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		public IToken key;
		public IToken name;
		public MetadataContext metaList;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public TableFieldContext[] tableField() {
			return GetRuleContexts<TableFieldContext>();
		}
		public TableFieldContext tableField(int i) {
			return GetRuleContext<TableFieldContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 16, RULE_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 118; attr();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 124; _localctx.key = Match(T__8);
			State = 125; _localctx.name = Match(IDENT);
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 126; _localctx.metaList = metadata();
				}
			}

			State = 129; Match(BRACE_L);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 130; tableField();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 136; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFieldContext : ParserRuleContext {
		public IToken fieldName;
		public SingleTypeContext fieldType;
		public ListTypeContext arrayType;
		public ScalarValueContext fieldValue;
		public MetadataContext metaList;
		public IToken fieldArrow;
		public IToken fieldMap;
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public SingleTypeContext singleType() {
			return GetRuleContext<SingleTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public TableFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterTableField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitTableField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFieldContext tableField() {
		TableFieldContext _localctx = new TableFieldContext(Context, State);
		EnterRule(_localctx, 18, RULE_tableField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 138; attr();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144; _localctx.fieldName = Match(IDENT);
			State = 145; Match(T__9);
			State = 148;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case IDENT:
				{
				State = 146; _localctx.fieldType = singleType();
				}
				break;
			case BRACKET_L:
				{
				State = 147; _localctx.arrayType = listType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 150; Match(T__10);
				State = 151; _localctx.fieldValue = scalarValue();
				}
			}

			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 154; _localctx.metaList = metadata();
				}
			}

			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 157; _localctx.fieldArrow = Match(T__11);
				State = 158; _localctx.fieldMap = Match(STRING);
				}
			}

			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 161; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		public IToken key;
		public IToken name;
		public MetadataContext metaList;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 20, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 164; attr();
				}
				}
				State = 169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 170; _localctx.key = Match(T__12);
			State = 171; _localctx.name = Match(IDENT);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 172; _localctx.metaList = metadata();
				}
			}

			State = 175; Match(BRACE_L);
			State = 179;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 176; structField();
				}
				}
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 182; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		public IToken fieldName;
		public SingleTypeContext fieldType;
		public ListTypeContext arrayType;
		public ScalarValueContext fieldValue;
		public MetadataContext metaList;
		public IToken fieldArrow;
		public IToken fieldMap;
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public SingleTypeContext singleType() {
			return GetRuleContext<SingleTypeContext>(0);
		}
		public ListTypeContext listType() {
			return GetRuleContext<ListTypeContext>(0);
		}
		public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterStructField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitStructField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 22, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 184; attr();
				}
				}
				State = 189;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 190; _localctx.fieldName = Match(IDENT);
			State = 191; Match(T__9);
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
			case T__22:
			case T__23:
			case T__24:
			case T__25:
			case T__26:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case IDENT:
				{
				State = 192; _localctx.fieldType = singleType();
				}
				break;
			case BRACKET_L:
				{
				State = 193; _localctx.arrayType = listType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 196; Match(T__10);
				State = 197; _localctx.fieldValue = scalarValue();
				}
			}

			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 200; _localctx.metaList = metadata();
				}
			}

			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__11) {
				{
				State = 203; _localctx.fieldArrow = Match(T__11);
				State = 204; _localctx.fieldMap = Match(STRING);
				}
			}

			State = 208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 207; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcContext : ParserRuleContext {
		public IToken key;
		public IToken name;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public RpcFieldContext[] rpcField() {
			return GetRuleContexts<RpcFieldContext>();
		}
		public RpcFieldContext rpcField(int i) {
			return GetRuleContext<RpcFieldContext>(i);
		}
		public RpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterRpc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitRpc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRpc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RpcContext rpc() {
		RpcContext _localctx = new RpcContext(Context, State);
		EnterRule(_localctx, 24, RULE_rpc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 210; attr();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216; _localctx.key = Match(T__13);
			State = 217; _localctx.name = Match(IDENT);
			State = 218; Match(BRACE_L);
			State = 222;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 219; rpcField();
				}
				}
				State = 224;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 225; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcFieldContext : ParserRuleContext {
		public IToken fieldName;
		public IToken fieldParam;
		public IToken fieldReturn;
		public MetadataContext metaList;
		public ITerminalNode PARENTHESES_L() { return GetToken(FlatbufferParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(FlatbufferParser.PARENTHESES_R, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public RpcFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpcField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterRpcField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitRpcField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRpcField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RpcFieldContext rpcField() {
		RpcFieldContext _localctx = new RpcFieldContext(Context, State);
		EnterRule(_localctx, 26, RULE_rpcField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 227; attr();
				}
				}
				State = 232;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 233; _localctx.fieldName = Match(IDENT);
			State = 234; Match(PARENTHESES_L);
			State = 235; _localctx.fieldParam = Match(IDENT);
			State = 236; Match(PARENTHESES_R);
			State = 237; Match(T__9);
			State = 238; _localctx.fieldReturn = Match(IDENT);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 239; _localctx.metaList = metadata();
				}
			}

			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 242; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public IToken key;
		public IToken name;
		public SingleTypeContext baseType;
		public MetadataContext metaList;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public SingleTypeContext singleType() {
			return GetRuleContext<SingleTypeContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 28, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 245; attr();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 251; _localctx.key = Match(T__14);
			State = 252; _localctx.name = Match(IDENT);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 253; Match(T__9);
				State = 254; _localctx.baseType = singleType();
				}
			}

			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 257; _localctx.metaList = metadata();
				}
			}

			State = 260; Match(BRACE_L);
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 261; enumField();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 267; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		public IToken fieldName;
		public IToken fieldValue;
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public ITerminalNode INTEGER() { return GetToken(FlatbufferParser.INTEGER, 0); }
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 30, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 269; attr();
				}
				}
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 275; _localctx.fieldName = Match(IDENT);
			State = 278;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 276; Match(T__10);
				State = 277; _localctx.fieldValue = Match(INTEGER);
				}
			}

			State = 281;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 280; Match(T__15);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionContext : ParserRuleContext {
		public IToken key;
		public IToken name;
		public MetadataContext metaList;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public UnionFieldContext[] unionField() {
			return GetRuleContexts<UnionFieldContext>();
		}
		public UnionFieldContext unionField(int i) {
			return GetRuleContext<UnionFieldContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public UnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionContext union() {
		UnionContext _localctx = new UnionContext(Context, State);
		EnterRule(_localctx, 32, RULE_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 283; attr();
				}
				}
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 289; _localctx.key = Match(T__16);
			State = 290; _localctx.name = Match(IDENT);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 291; _localctx.metaList = metadata();
				}
			}

			State = 294; Match(BRACE_L);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 295; unionField();
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 301; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionFieldContext : ParserRuleContext {
		public IToken fieldName;
		public SingleTypeContext fieldType;
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public SingleTypeContext singleType() {
			return GetRuleContext<SingleTypeContext>(0);
		}
		public AttrContext[] attr() {
			return GetRuleContexts<AttrContext>();
		}
		public AttrContext attr(int i) {
			return GetRuleContext<AttrContext>(i);
		}
		public UnionFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterUnionField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitUnionField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionFieldContext unionField() {
		UnionFieldContext _localctx = new UnionFieldContext(Context, State);
		EnterRule(_localctx, 34, RULE_unionField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				{
				State = 303; attr();
				}
				}
				State = 308;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 309; _localctx.fieldName = Match(IDENT);
			State = 310; Match(T__9);
			State = 311; _localctx.fieldType = singleType();
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 312; Match(T__15);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataContext : ParserRuleContext {
		public ITerminalNode PARENTHESES_L() { return GetToken(FlatbufferParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(FlatbufferParser.PARENTHESES_R, 0); }
		public MetadataFieldContext[] metadataField() {
			return GetRuleContexts<MetadataFieldContext>();
		}
		public MetadataFieldContext metadataField(int i) {
			return GetRuleContext<MetadataFieldContext>(i);
		}
		public MetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterMetadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitMetadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataContext metadata() {
		MetadataContext _localctx = new MetadataContext(Context, State);
		EnterRule(_localctx, 36, RULE_metadata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 315; Match(PARENTHESES_L);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 316; metadataField();
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 317; Match(T__15);
					State = 318; metadataField();
					}
					}
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 326; Match(PARENTHESES_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataFieldContext : ParserRuleContext {
		public IToken metaName;
		public SingleValueContext metaValue;
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public SingleValueContext singleValue() {
			return GetRuleContext<SingleValueContext>(0);
		}
		public MetadataFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadataField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterMetadataField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitMetadataField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadataField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataFieldContext metadataField() {
		MetadataFieldContext _localctx = new MetadataFieldContext(Context, State);
		EnterRule(_localctx, 38, RULE_metadataField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; _localctx.metaName = Match(IDENT);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 329; Match(T__9);
				State = 330; _localctx.metaValue = singleValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode BRACKET_L() { return GetToken(FlatbufferParser.BRACKET_L, 0); }
		public ITerminalNode BRACKET_R() { return GetToken(FlatbufferParser.BRACKET_R, 0); }
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public ITerminalNode PARENTHESES_L() { return GetToken(FlatbufferParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(FlatbufferParser.PARENTHESES_R, 0); }
		public AttrFieldContext[] attrField() {
			return GetRuleContexts<AttrFieldContext>();
		}
		public AttrFieldContext attrField(int i) {
			return GetRuleContext<AttrFieldContext>(i);
		}
		public AttrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterAttr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitAttr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrContext attr() {
		AttrContext _localctx = new AttrContext(Context, State);
		EnterRule(_localctx, 40, RULE_attr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(BRACKET_L);
			State = 334; _localctx.key = Match(IDENT);
			State = 347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 335; Match(PARENTHESES_L);
				State = 344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << IDENT))) != 0)) {
					{
					State = 336; attrField();
					State = 341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__15) {
						{
						{
						State = 337; Match(T__15);
						State = 338; attrField();
						}
						}
						State = 343;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 346; Match(PARENTHESES_R);
				}
			}

			State = 349; Match(BRACKET_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrFieldContext : ParserRuleContext {
		public IToken attrName;
		public AttrFieldValueContext attrValue;
		public AttrFieldValueContext attrFieldValue() {
			return GetRuleContext<AttrFieldValueContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public AttrFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterAttrField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitAttrField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrFieldContext attrField() {
		AttrFieldContext _localctx = new AttrFieldContext(Context, State);
		EnterRule(_localctx, 42, RULE_attrField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				{
				State = 351; _localctx.attrName = Match(IDENT);
				State = 352; Match(T__10);
				}
				break;
			}
			State = 355; _localctx.attrValue = attrFieldValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrFieldValueContext : ParserRuleContext {
		public IToken vid;
		public IToken vstr;
		public IToken vint;
		public IToken vfloat;
		public IToken vbool;
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public ITerminalNode INTEGER() { return GetToken(FlatbufferParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(FlatbufferParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(FlatbufferParser.BOOL, 0); }
		public AttrFieldValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrFieldValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterAttrFieldValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitAttrFieldValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttrFieldValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttrFieldValueContext attrFieldValue() {
		AttrFieldValueContext _localctx = new AttrFieldValueContext(Context, State);
		EnterRule(_localctx, 44, RULE_attrFieldValue);
		try {
			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 357; _localctx.vid = Match(IDENT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 358; _localctx.vstr = Match(STRING);
				}
				break;
			case INTEGER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 359; _localctx.vint = Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 360; _localctx.vfloat = Match(FLOAT);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 361; _localctx.vbool = Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTypeContext : ParserRuleContext {
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public SingleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterSingleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitSingleType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleTypeContext singleType() {
		SingleTypeContext _localctx = new SingleTypeContext(Context, State);
		EnterRule(_localctx, 46, RULE_singleType);
		int _la;
		try {
			State = 394;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__17:
				EnterOuterAlt(_localctx, 1);
				{
				State = 364; Match(T__17);
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 365; Match(T__18);
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 3);
				{
				State = 366; Match(T__19);
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 4);
				{
				State = 367; Match(T__20);
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 5);
				{
				State = 368; Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 6);
				{
				State = 369; Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 7);
				{
				State = 370; Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 8);
				{
				State = 371; Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 9);
				{
				State = 372; Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 10);
				{
				State = 373; Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 11);
				{
				State = 374; Match(T__27);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 12);
				{
				State = 375; Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 13);
				{
				State = 376; Match(T__29);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 14);
				{
				State = 377; Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 15);
				{
				State = 378; Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 16);
				{
				State = 379; Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 17);
				{
				State = 380; Match(T__33);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 18);
				{
				State = 381; Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 19);
				{
				State = 382; Match(T__35);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 20);
				{
				State = 383; Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 21);
				{
				State = 384; Match(T__37);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 22);
				{
				State = 385; Match(T__38);
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 23);
				{
				State = 386; Match(IDENT);
				State = 391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 387; Match(T__3);
					State = 388; Match(IDENT);
					}
					}
					State = 393;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListTypeContext : ParserRuleContext {
		public SingleTypeContext type;
		public ITerminalNode BRACKET_L() { return GetToken(FlatbufferParser.BRACKET_L, 0); }
		public ITerminalNode BRACKET_R() { return GetToken(FlatbufferParser.BRACKET_R, 0); }
		public SingleTypeContext singleType() {
			return GetRuleContext<SingleTypeContext>(0);
		}
		public ListTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterListType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitListType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitListType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListTypeContext listType() {
		ListTypeContext _localctx = new ListTypeContext(Context, State);
		EnterRule(_localctx, 48, RULE_listType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(BRACKET_L);
			State = 397; _localctx.type = singleType();
			State = 398; Match(BRACKET_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueContext : ParserRuleContext {
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public ObjectValueFieldContext[] objectValueField() {
			return GetRuleContexts<ObjectValueFieldContext>();
		}
		public ObjectValueFieldContext objectValueField(int i) {
			return GetRuleContext<ObjectValueFieldContext>(i);
		}
		public ObjectValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterObjectValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitObjectValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueContext objectValue() {
		ObjectValueContext _localctx = new ObjectValueContext(Context, State);
		EnterRule(_localctx, 50, RULE_objectValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 400; Match(BRACE_L);
			State = 409;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 401; objectValueField();
				State = 406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 402; Match(T__15);
					State = 403; objectValueField();
					}
					}
					State = 408;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 411; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueFieldContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ObjectValueFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValueField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterObjectValueField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitObjectValueField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValueField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueFieldContext objectValueField() {
		ObjectValueFieldContext _localctx = new ObjectValueFieldContext(Context, State);
		EnterRule(_localctx, 52, RULE_objectValueField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 413; Match(IDENT);
			State = 414; Match(T__9);
			State = 415; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValueContext : ParserRuleContext {
		public ITerminalNode BRACKET_L() { return GetToken(FlatbufferParser.BRACKET_L, 0); }
		public ITerminalNode BRACKET_R() { return GetToken(FlatbufferParser.BRACKET_R, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterArrayValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitArrayValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValueContext arrayValue() {
		ArrayValueContext _localctx = new ArrayValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_arrayValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 417; Match(BRACKET_L);
			State = 426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BRACE_L) | (1L << BRACKET_L) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING))) != 0)) {
				{
				State = 418; value();
				State = 423;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__15) {
					{
					{
					State = 419; Match(T__15);
					State = 420; value();
					}
					}
					State = 425;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 428; Match(BRACKET_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public SingleValueContext singleValue() {
			return GetRuleContext<SingleValueContext>(0);
		}
		public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public ArrayValueContext arrayValue() {
			return GetRuleContext<ArrayValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 56, RULE_value);
		try {
			State = 433;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case FLOAT:
			case BOOL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 430; singleValue();
				}
				break;
			case BRACE_L:
				EnterOuterAlt(_localctx, 2);
				{
				State = 431; objectValue();
				}
				break;
			case BRACKET_L:
				EnterOuterAlt(_localctx, 3);
				{
				State = 432; arrayValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleValueContext : ParserRuleContext {
		public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public SingleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterSingleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitSingleValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleValueContext singleValue() {
		SingleValueContext _localctx = new SingleValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_singleValue);
		try {
			State = 437;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case FLOAT:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 435; scalarValue();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 436; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarValueContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(FlatbufferParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(FlatbufferParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(FlatbufferParser.BOOL, 0); }
		public ScalarValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterScalarValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitScalarValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarValueContext scalarValue() {
		ScalarValueContext _localctx = new ScalarValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_scalarValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x36', '\x1BC', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'M', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', 'P', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', 'U', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '[', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '^', '\v', '\x4', '\x3', '\x4', '\x5', '\x4', '\x61', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x66', 
		'\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'k', 
		'\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'p', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'u', '\n', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\a', '\n', 'z', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '}', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\x82', '\n', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', '\x86', '\n', '\n', '\f', '\n', '\xE', '\n', '\x89', '\v', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\a', '\v', '\x8E', '\n', '\v', 
		'\f', '\v', '\xE', '\v', '\x91', '\v', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x5', '\v', '\x97', '\n', '\v', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', '\x9B', '\n', '\v', '\x3', '\v', '\x5', '\v', 
		'\x9E', '\n', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xA2', '\n', 
		'\v', '\x3', '\v', '\x5', '\v', '\xA5', '\n', '\v', '\x3', '\f', '\a', 
		'\f', '\xA8', '\n', '\f', '\f', '\f', '\xE', '\f', '\xAB', '\v', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\xB0', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\xB4', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\xB7', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\a', '\r', '\xBC', '\n', '\r', '\f', '\r', '\xE', '\r', '\xBF', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\xC5', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xC9', '\n', 
		'\r', '\x3', '\r', '\x5', '\r', '\xCC', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xD0', '\n', '\r', '\x3', '\r', '\x5', '\r', '\xD3', 
		'\n', '\r', '\x3', '\xE', '\a', '\xE', '\xD6', '\n', '\xE', '\f', '\xE', 
		'\xE', '\xE', '\xD9', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\a', '\xE', '\xDF', '\n', '\xE', '\f', '\xE', '\xE', 
		'\xE', '\xE2', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\a', '\xF', '\xE7', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xEA', '\v', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xF3', '\n', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xF6', '\n', '\xF', '\x3', '\x10', '\a', 
		'\x10', '\xF9', '\n', '\x10', '\f', '\x10', '\xE', '\x10', '\xFC', '\v', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\x102', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x105', 
		'\n', '\x10', '\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x109', '\n', 
		'\x10', '\f', '\x10', '\xE', '\x10', '\x10C', '\v', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\a', '\x11', '\x111', '\n', '\x11', '\f', 
		'\x11', '\xE', '\x11', '\x114', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x119', '\n', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x11C', '\n', '\x11', '\x3', '\x12', '\a', '\x12', '\x11F', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\x122', '\v', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x127', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x12B', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x12E', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\a', '\x13', '\x133', '\n', '\x13', '\f', '\x13', '\xE', '\x13', 
		'\x136', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x5', '\x13', '\x13C', '\n', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\a', '\x14', '\x142', '\n', '\x14', '\f', 
		'\x14', '\xE', '\x14', '\x145', '\v', '\x14', '\x5', '\x14', '\x147', 
		'\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x5', '\x15', '\x14E', '\n', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', 
		'\x16', '\x156', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x159', '\v', 
		'\x16', '\x5', '\x16', '\x15B', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', 
		'\x15E', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x164', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\x16D', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x188', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\x18B', '\v', '\x19', '\x5', '\x19', '\x18D', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x197', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x19A', '\v', '\x1B', 
		'\x5', '\x1B', '\x19C', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x1A8', '\n', '\x1D', 
		'\f', '\x1D', '\xE', '\x1D', '\x1AB', '\v', '\x1D', '\x5', '\x1D', '\x1AD', 
		'\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x1B4', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x5', '\x1F', '\x1B8', '\n', '\x1F', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x2', '\x2', '!', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '\x2', '\x3', '\x3', '\x2', '\x30', '\x32', '\x2', 
		'\x1FB', '\x2', 'N', '\x3', '\x2', '\x2', '\x2', '\x4', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x6', 'V', '\x3', '\x2', '\x2', '\x2', '\b', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'g', '\x3', '\x2', '\x2', '\x2', '\f', 'l', 
		'\x3', '\x2', '\x2', '\x2', '\xE', 'q', '\x3', '\x2', '\x2', '\x2', '\x10', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x12', '{', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xD7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xFA', '\x3', '\x2', '\x2', '\x2', ' ', '\x112', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\x120', '\x3', '\x2', '\x2', '\x2', '$', '\x134', 
		'\x3', '\x2', '\x2', '\x2', '&', '\x13D', '\x3', '\x2', '\x2', '\x2', 
		'(', '\x14A', '\x3', '\x2', '\x2', '\x2', '*', '\x14F', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x163', '\x3', '\x2', '\x2', '\x2', '.', '\x16C', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x18C', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x34', '\x192', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x38', '\x1A3', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x1B7', '\x3', '\x2', '\x2', '\x2', '>', '\x1B9', '\x3', '\x2', 
		'\x2', '\x2', '@', 'M', '\x5', '\x4', '\x3', '\x2', '\x41', 'M', '\x5', 
		'\x6', '\x4', '\x2', '\x42', 'M', '\x5', '\b', '\x5', '\x2', '\x43', 'M', 
		'\x5', '\n', '\x6', '\x2', '\x44', 'M', '\x5', '\f', '\a', '\x2', '\x45', 
		'M', '\x5', '\xE', '\b', '\x2', '\x46', 'M', '\x5', '\x12', '\n', '\x2', 
		'G', 'M', '\x5', '\x16', '\f', '\x2', 'H', 'M', '\x5', '\x1E', '\x10', 
		'\x2', 'I', 'M', '\x5', '\"', '\x12', '\x2', 'J', 'M', '\x5', '\x1A', 
		'\xE', '\x2', 'K', 'M', '\x5', '\x34', '\x1B', '\x2', 'L', '@', '\x3', 
		'\x2', '\x2', '\x2', 'L', '\x41', '\x3', '\x2', '\x2', '\x2', 'L', '\x42', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x43', '\x3', '\x2', '\x2', '\x2', 'L', 
		'\x44', '\x3', '\x2', '\x2', '\x2', 'L', '\x45', '\x3', '\x2', '\x2', 
		'\x2', 'L', '\x46', '\x3', '\x2', '\x2', '\x2', 'L', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'H', '\x3', '\x2', '\x2', '\x2', 'L', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', '\x3', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', 
		'\x3', '\x2', '\x2', 'R', 'T', '\a', '\x33', '\x2', '\x2', 'S', 'U', '\a', 
		'\x4', '\x2', '\x2', 'T', 'S', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'U', '\x5', '\x3', '\x2', '\x2', '\x2', 'V', 'W', 
		'\a', '\x5', '\x2', '\x2', 'W', '\\', '\a', '\x34', '\x2', '\x2', 'X', 
		'Y', '\a', '\x6', '\x2', '\x2', 'Y', '[', '\a', '\x34', '\x2', '\x2', 
		'Z', 'X', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', 
		'\x2', ']', '`', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x61', '\a', '\x4', '\x2', '\x2', '`', '_', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\a', '\a', '\x2', '\x2', 
		'\x63', '\x65', '\a', '\x33', '\x2', '\x2', '\x64', '\x66', '\a', '\x4', 
		'\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x66', '\t', '\x3', '\x2', '\x2', '\x2', 
		'g', 'h', '\a', '\b', '\x2', '\x2', 'h', 'j', '\a', '\x34', '\x2', '\x2', 
		'i', 'k', '\a', '\x4', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'm', '\a', '\t', '\x2', '\x2', 'm', 'o', '\a', '\x33', '\x2', 
		'\x2', 'n', 'p', '\a', '\x4', '\x2', '\x2', 'o', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'q', 'r', '\a', '\n', '\x2', '\x2', 'r', 't', '\a', '\x33', 
		'\x2', '\x2', 's', 'u', '\a', '\x4', '\x2', '\x2', 't', 's', '\x3', '\x2', 
		'\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'w', '\a', '\x33', '\x2', '\x2', 'w', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'x', 'z', '\x5', '*', '\x16', '\x2', 'y', 
		'x', '\x3', '\x2', '\x2', '\x2', 'z', '}', '\x3', '\x2', '\x2', '\x2', 
		'{', 'y', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '~', '\x3', '\x2', '\x2', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x7F', '\a', '\v', '\x2', '\x2', '\x7F', '\x81', '\a', '\x34', '\x2', 
		'\x2', '\x80', '\x82', '\x5', '&', '\x14', '\x2', '\x81', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x87', '\a', '*', '\x2', 
		'\x2', '\x84', '\x86', '\x5', '\x14', '\v', '\x2', '\x85', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x86', '\x89', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x89', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '+', '\x2', '\x2', '\x8B', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', '\x5', '*', '\x16', 
		'\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8F', 
		'\x90', '\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', 
		'\x34', '\x2', '\x2', '\x93', '\x96', '\a', '\f', '\x2', '\x2', '\x94', 
		'\x97', '\x5', '\x30', '\x19', '\x2', '\x95', '\x97', '\x5', '\x32', '\x1A', 
		'\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\r', '\x2', '\x2', '\x99', '\x9B', '\x5', '>', ' ', '\x2', 
		'\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', 
		'\x5', '&', '\x14', '\x2', '\x9D', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\a', '\xE', '\x2', '\x2', '\xA0', '\xA2', 
		'\a', '\x33', '\x2', '\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', 
		'\xA1', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA4', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA5', '\a', '\x4', '\x2', '\x2', '\xA4', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA5', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA8', '\x5', '*', 
		'\x16', '\x2', '\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\xA9', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA9', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', 
		'\a', '\xF', '\x2', '\x2', '\xAD', '\xAF', '\a', '\x34', '\x2', '\x2', 
		'\xAE', '\xB0', '\x5', '&', '\x14', '\x2', '\xAF', '\xAE', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB1', '\xB5', '\a', '*', '\x2', '\x2', '\xB2', 
		'\xB4', '\x5', '\x18', '\r', '\x2', '\xB3', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB7', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\xB8', '\xB9', '\a', '+', '\x2', '\x2', '\xB9', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\xBA', '\xBC', '\x5', '*', '\x16', '\x2', '\xBB', 
		'\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xBD', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBE', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xBF', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC1', '\a', '\x34', '\x2', 
		'\x2', '\xC1', '\xC4', '\a', '\f', '\x2', '\x2', '\xC2', '\xC5', '\x5', 
		'\x30', '\x19', '\x2', '\xC3', '\xC5', '\x5', '\x32', '\x1A', '\x2', '\xC4', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\xC5', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', 
		'\r', '\x2', '\x2', '\xC7', '\xC9', '\x5', '>', ' ', '\x2', '\xC8', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCC', '\x5', '&', 
		'\x14', '\x2', '\xCB', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', '\x3', '\x2', '\x2', '\x2', 
		'\xCD', '\xCE', '\a', '\xE', '\x2', '\x2', '\xCE', '\xD0', '\a', '\x33', 
		'\x2', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', 
		'\x3', '\x2', '\x2', '\x2', '\xD0', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xD1', '\xD3', '\a', '\x4', '\x2', '\x2', '\xD2', '\xD1', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xD4', '\xD6', '\x5', '*', '\x16', '\x2', 
		'\xD5', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD9', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', 
		'\xD9', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x10', 
		'\x2', '\x2', '\xDB', '\xDC', '\a', '\x34', '\x2', '\x2', '\xDC', '\xE0', 
		'\a', '*', '\x2', '\x2', '\xDD', '\xDF', '\x5', '\x1C', '\xF', '\x2', 
		'\xDE', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xDF', '\xE2', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE1', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\a', '+', 
		'\x2', '\x2', '\xE4', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', 
		'\x5', '*', '\x16', '\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEB', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xEC', '\a', '\x34', '\x2', '\x2', '\xEC', '\xED', '\a', '.', 
		'\x2', '\x2', '\xED', '\xEE', '\a', '\x34', '\x2', '\x2', '\xEE', '\xEF', 
		'\a', '/', '\x2', '\x2', '\xEF', '\xF0', '\a', '\f', '\x2', '\x2', '\xF0', 
		'\xF2', '\a', '\x34', '\x2', '\x2', '\xF1', '\xF3', '\x5', '&', '\x14', 
		'\x2', '\xF2', '\xF1', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF3', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF4', 
		'\xF6', '\a', '\x4', '\x2', '\x2', '\xF5', '\xF4', '\x3', '\x2', '\x2', 
		'\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF9', '\x5', '*', '\x16', '\x2', '\xF8', 
		'\xF7', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\x3', 
		'\x2', '\x2', '\x2', '\xFB', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFC', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\a', '\x11', '\x2', 
		'\x2', '\xFE', '\x101', '\a', '\x34', '\x2', '\x2', '\xFF', '\x100', '\a', 
		'\f', '\x2', '\x2', '\x100', '\x102', '\x5', '\x30', '\x19', '\x2', '\x101', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x102', '\x104', '\x3', '\x2', '\x2', '\x2', '\x103', '\x105', 
		'\x5', '&', '\x14', '\x2', '\x104', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x104', '\x105', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x10A', '\a', '*', '\x2', '\x2', '\x107', 
		'\x109', '\x5', ' ', '\x11', '\x2', '\x108', '\x107', '\x3', '\x2', '\x2', 
		'\x2', '\x109', '\x10C', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10B', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\x10D', '\x10E', '\a', '+', '\x2', '\x2', '\x10E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x111', '\x5', '*', '\x16', 
		'\x2', '\x110', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', '\x2', '\x115', 
		'\x118', '\a', '\x34', '\x2', '\x2', '\x116', '\x117', '\a', '\r', '\x2', 
		'\x2', '\x117', '\x119', '\a', '\x30', '\x2', '\x2', '\x118', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x118', '\x119', '\x3', '\x2', '\x2', '\x2', 
		'\x119', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11C', '\a', 
		'\x12', '\x2', '\x2', '\x11B', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x11C', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x11D', '\x11F', '\x5', '*', '\x16', '\x2', '\x11E', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x122', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x123', '\x3', '\x2', '\x2', '\x2', '\x122', 
		'\x120', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', '\x13', '\x2', 
		'\x2', '\x124', '\x126', '\a', '\x34', '\x2', '\x2', '\x125', '\x127', 
		'\x5', '&', '\x14', '\x2', '\x126', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x12C', '\a', '*', '\x2', '\x2', '\x129', 
		'\x12B', '\x5', '$', '\x13', '\x2', '\x12A', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x130', '\a', '+', '\x2', '\x2', '\x130', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x131', '\x133', '\x5', '*', '\x16', 
		'\x2', '\x132', '\x131', '\x3', '\x2', '\x2', '\x2', '\x133', '\x136', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x134', '\x135', '\x3', '\x2', '\x2', '\x2', '\x135', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x134', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x138', '\a', '\x34', '\x2', '\x2', '\x138', '\x139', '\a', '\f', '\x2', 
		'\x2', '\x139', '\x13B', '\x5', '\x30', '\x19', '\x2', '\x13A', '\x13C', 
		'\a', '\x12', '\x2', '\x2', '\x13B', '\x13A', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '%', '\x3', '\x2', 
		'\x2', '\x2', '\x13D', '\x146', '\a', '.', '\x2', '\x2', '\x13E', '\x143', 
		'\x5', '(', '\x15', '\x2', '\x13F', '\x140', '\a', '\x12', '\x2', '\x2', 
		'\x140', '\x142', '\x5', '(', '\x15', '\x2', '\x141', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x142', '\x145', '\x3', '\x2', '\x2', '\x2', '\x143', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x147', '\x3', '\x2', '\x2', '\x2', '\x145', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x146', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x148', '\x149', '\a', '/', '\x2', '\x2', '\x149', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14D', '\a', '\x34', '\x2', 
		'\x2', '\x14B', '\x14C', '\a', '\f', '\x2', '\x2', '\x14C', '\x14E', '\x5', 
		'<', '\x1F', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x150', '\a', ',', '\x2', '\x2', '\x150', '\x15D', '\a', 
		'\x34', '\x2', '\x2', '\x151', '\x15A', '\a', '.', '\x2', '\x2', '\x152', 
		'\x157', '\x5', ',', '\x17', '\x2', '\x153', '\x154', '\a', '\x12', '\x2', 
		'\x2', '\x154', '\x156', '\x5', ',', '\x17', '\x2', '\x155', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x155', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x152', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15E', '\a', '/', '\x2', '\x2', 
		'\x15D', '\x151', '\x3', '\x2', '\x2', '\x2', '\x15D', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x15E', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x160', '\a', '-', '\x2', '\x2', '\x160', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x161', '\x162', '\a', '\x34', '\x2', '\x2', '\x162', '\x164', '\a', 
		'\r', '\x2', '\x2', '\x163', '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', 
		'\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\x3', '\x2', '\x2', 
		'\x2', '\x165', '\x166', '\x5', '.', '\x18', '\x2', '\x166', '-', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x16D', '\a', '\x34', '\x2', '\x2', '\x168', 
		'\x16D', '\a', '\x33', '\x2', '\x2', '\x169', '\x16D', '\a', '\x30', '\x2', 
		'\x2', '\x16A', '\x16D', '\a', '\x31', '\x2', '\x2', '\x16B', '\x16D', 
		'\a', '\x32', '\x2', '\x2', '\x16C', '\x167', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x169', '\x3', 
		'\x2', '\x2', '\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x18D', '\a', '\x14', '\x2', '\x2', '\x16F', '\x18D', 
		'\a', '\x15', '\x2', '\x2', '\x170', '\x18D', '\a', '\x16', '\x2', '\x2', 
		'\x171', '\x18D', '\a', '\x17', '\x2', '\x2', '\x172', '\x18D', '\a', 
		'\x18', '\x2', '\x2', '\x173', '\x18D', '\a', '\x19', '\x2', '\x2', '\x174', 
		'\x18D', '\a', '\x1A', '\x2', '\x2', '\x175', '\x18D', '\a', '\x1B', '\x2', 
		'\x2', '\x176', '\x18D', '\a', '\x1C', '\x2', '\x2', '\x177', '\x18D', 
		'\a', '\x1D', '\x2', '\x2', '\x178', '\x18D', '\a', '\x1E', '\x2', '\x2', 
		'\x179', '\x18D', '\a', '\x1F', '\x2', '\x2', '\x17A', '\x18D', '\a', 
		' ', '\x2', '\x2', '\x17B', '\x18D', '\a', '!', '\x2', '\x2', '\x17C', 
		'\x18D', '\a', '\"', '\x2', '\x2', '\x17D', '\x18D', '\a', '#', '\x2', 
		'\x2', '\x17E', '\x18D', '\a', '$', '\x2', '\x2', '\x17F', '\x18D', '\a', 
		'%', '\x2', '\x2', '\x180', '\x18D', '\a', '&', '\x2', '\x2', '\x181', 
		'\x18D', '\a', '\'', '\x2', '\x2', '\x182', '\x18D', '\a', '(', '\x2', 
		'\x2', '\x183', '\x18D', '\a', ')', '\x2', '\x2', '\x184', '\x189', '\a', 
		'\x34', '\x2', '\x2', '\x185', '\x186', '\a', '\x6', '\x2', '\x2', '\x186', 
		'\x188', '\a', '\x34', '\x2', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x18B', '\x3', '\x2', '\x2', '\x2', '\x189', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x170', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x171', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x172', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x173', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x174', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x176', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x178', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x179', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x18C', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x18C', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x181', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x18C', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x18C', '\x184', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '\x18E', '\x18F', '\a', ',', '\x2', '\x2', '\x18F', 
		'\x190', '\x5', '\x30', '\x19', '\x2', '\x190', '\x191', '\a', '-', '\x2', 
		'\x2', '\x191', '\x33', '\x3', '\x2', '\x2', '\x2', '\x192', '\x19B', 
		'\a', '*', '\x2', '\x2', '\x193', '\x198', '\x5', '\x36', '\x1C', '\x2', 
		'\x194', '\x195', '\a', '\x12', '\x2', '\x2', '\x195', '\x197', '\x5', 
		'\x36', '\x1C', '\x2', '\x196', '\x194', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x19A', '\x3', '\x2', '\x2', '\x2', '\x198', '\x196', '\x3', '\x2', '\x2', 
		'\x2', '\x198', '\x199', '\x3', '\x2', '\x2', '\x2', '\x199', '\x19C', 
		'\x3', '\x2', '\x2', '\x2', '\x19A', '\x198', '\x3', '\x2', '\x2', '\x2', 
		'\x19B', '\x193', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', 
		'\x19E', '\a', '+', '\x2', '\x2', '\x19E', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x19F', '\x1A0', '\a', '\x34', '\x2', '\x2', '\x1A0', '\x1A1', 
		'\a', '\f', '\x2', '\x2', '\x1A1', '\x1A2', '\x5', ':', '\x1E', '\x2', 
		'\x1A2', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1AC', '\a', ',', 
		'\x2', '\x2', '\x1A4', '\x1A9', '\x5', ':', '\x1E', '\x2', '\x1A5', '\x1A6', 
		'\a', '\x12', '\x2', '\x2', '\x1A6', '\x1A8', '\x5', ':', '\x1E', '\x2', 
		'\x1A7', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AB', '\x3', 
		'\x2', '\x2', '\x2', '\x1A9', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A9', 
		'\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AD', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1A4', 
		'\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'\x1AD', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1AE', '\x1AF', '\a', 
		'-', '\x2', '\x2', '\x1AF', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1B0', 
		'\x1B4', '\x5', '<', '\x1F', '\x2', '\x1B1', '\x1B4', '\x5', '\x34', '\x1B', 
		'\x2', '\x1B2', '\x1B4', '\x5', '\x38', '\x1D', '\x2', '\x1B3', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B1', '\x3', '\x2', '\x2', '\x2', 
		'\x1B3', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B4', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x1B5', '\x1B8', '\x5', '>', ' ', '\x2', '\x1B6', '\x1B8', 
		'\a', '\x33', '\x2', '\x2', '\x1B7', '\x1B5', '\x3', '\x2', '\x2', '\x2', 
		'\x1B7', '\x1B6', '\x3', '\x2', '\x2', '\x2', '\x1B8', '=', '\x3', '\x2', 
		'\x2', '\x2', '\x1B9', '\x1BA', '\t', '\x2', '\x2', '\x2', '\x1BA', '?', 
		'\x3', '\x2', '\x2', '\x2', '>', 'L', 'N', 'T', '\\', '`', '\x65', 'j', 
		'o', 't', '{', '\x81', '\x87', '\x8F', '\x96', '\x9A', '\x9D', '\xA1', 
		'\xA4', '\xA9', '\xAF', '\xB5', '\xBD', '\xC4', '\xC8', '\xCB', '\xCF', 
		'\xD2', '\xD7', '\xE0', '\xE8', '\xF2', '\xF5', '\xFA', '\x101', '\x104', 
		'\x10A', '\x112', '\x118', '\x11B', '\x120', '\x126', '\x12C', '\x134', 
		'\x13B', '\x143', '\x146', '\x14D', '\x157', '\x15A', '\x15D', '\x163', 
		'\x16C', '\x189', '\x18C', '\x198', '\x19B', '\x1A9', '\x1AC', '\x1B3', 
		'\x1B7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
