// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ss
{

using global::System;
using global::FlatBuffers;

public struct OKK : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static OKK GetRootAsOKK(ByteBuffer _bb) { return GetRootAsOKK(_bb, new OKK()); }
  public static OKK GetRootAsOKK(ByteBuffer _bb, OKK obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public OKK __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public A? Bb(int j) { int o = __p.__offset(6); return o != 0 ? (A?)(new A()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BbLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public N? Cc(int j) { int o = __p.__offset(8); return o != 0 ? (N?)(new N()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int CcLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public A? Xx { get { int o = __p.__offset(10); return o != 0 ? (A?)(new A()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public N? Yy { get { int o = __p.__offset(12); return o != 0 ? (N?)(new N()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public FA Zz { get { int o = __p.__offset(14); return o != 0 ? (FA)__p.bb.GetInt(o + __p.bb_pos) : FA.a; } }
  public FA Ff(int j) { int o = __p.__offset(16); return o != 0 ? (FA)__p.bb.GetInt(__p.__vector(o) + j * 4) : (FA)0; }
  public int FfLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetFfBytes() { return __p.__vector_as_arraysegment(16); }

  public static void StartOKK(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 1); }
  public static void AddBb(FlatBufferBuilder builder, VectorOffset bbOffset) { builder.AddOffset(1, bbOffset.Value, 0); }
  public static VectorOffset CreateBbVector(FlatBufferBuilder builder, Offset<A>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartBbVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddCc(FlatBufferBuilder builder, VectorOffset ccOffset) { builder.AddOffset(2, ccOffset.Value, 0); }
  public static void StartCcVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static void AddXx(FlatBufferBuilder builder, Offset<A> xxOffset) { builder.AddOffset(3, xxOffset.Value, 0); }
  public static void AddYy(FlatBufferBuilder builder, Offset<N> yyOffset) { builder.AddStruct(4, yyOffset.Value, 0); }
  public static void AddZz(FlatBufferBuilder builder, FA zz) { builder.AddInt(5, (int)zz, 0); }
  public static void AddFf(FlatBufferBuilder builder, VectorOffset ffOffset) { builder.AddOffset(6, ffOffset.Value, 0); }
  public static VectorOffset CreateFfVector(FlatBufferBuilder builder, FA[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt((int)data[i]); return builder.EndVector(); }
  public static void StartFfVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<OKK> EndOKK(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<OKK>(o);
  }
  public static void FinishOKKBuffer(FlatBufferBuilder builder, Offset<OKK> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedOKKBuffer(FlatBufferBuilder builder, Offset<OKK> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
