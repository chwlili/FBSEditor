// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ss
{

using global::System;
using global::FlatBuffers;

public struct A : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static A GetRootAsA(ByteBuffer _bb) { return GetRootAsA(_bb, new A()); }
  public static A GetRootAsA(ByteBuffer _bb, A obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public A __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SS { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public N? BB { get { int o = __p.__offset(6); return o != 0 ? (N?)(new N()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartA(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddSS(FlatBufferBuilder builder, int SS) { builder.AddInt(0, SS, 1); }
  public static void AddBB(FlatBufferBuilder builder, Offset<N> BBOffset) { builder.AddStruct(1, BBOffset.Value, 0); }
  public static Offset<A> EndA(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<A>(o);
  }
};


}
