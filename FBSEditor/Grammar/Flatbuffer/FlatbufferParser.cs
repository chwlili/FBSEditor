//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Flatbuffer.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FlatbufferParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, INTEGER=50, FLOAT=51, BOOL=52, 
		STRING=53, COMMENT=54, IDENT=55, WS=56;
	public const int
		RULE_schema = 0, RULE_include = 1, RULE_namespace = 2, RULE_attribute = 3, 
		RULE_rootType = 4, RULE_fileExtension = 5, RULE_fileIdentifier = 6, RULE_comment = 7, 
		RULE_string = 8, RULE_metas = 9, RULE_bindMeta = 10, RULE_indexMeta = 11, 
		RULE_nullableMeta = 12, RULE_referenceMeta = 13, RULE_table = 14, RULE_tableField = 15, 
		RULE_struct = 16, RULE_structField = 17, RULE_rpc = 18, RULE_rpcField = 19, 
		RULE_enum = 20, RULE_enumField = 21, RULE_union = 22, RULE_unionField = 23, 
		RULE_metadata = 24, RULE_metadataField = 25, RULE_type = 26, RULE_objectValue = 27, 
		RULE_objectValueField = 28, RULE_arrayValue = 29, RULE_value = 30, RULE_singleValue = 31, 
		RULE_scalarValue = 32;
	public static readonly string[] ruleNames = {
		"schema", "include", "namespace", "attribute", "rootType", "fileExtension", 
		"fileIdentifier", "comment", "string", "metas", "bindMeta", "indexMeta", 
		"nullableMeta", "referenceMeta", "table", "tableField", "struct", "structField", 
		"rpc", "rpcField", "enum", "enumField", "union", "unionField", "metadata", 
		"metadataField", "type", "objectValue", "objectValueField", "arrayValue", 
		"value", "singleValue", "scalarValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "';'", "'namespace'", "'.'", "'attribute'", "'root_type'", 
		"'file_extension'", "'file_identifier'", "'['", "'Bind'", "'('", "')'", 
		"']'", "'Index'", "','", "'Nullable'", "'Reference'", "'table'", "'{'", 
		"'}'", "':'", "'='", "'=>'", "'struct'", "'rpc_service'", "'enum'", "'union'", 
		"'bool'", "'byte'", "'ubyte'", "'short'", "'ushort'", "'int'", "'uint'", 
		"'float'", "'long'", "'ulong'", "'double'", "'int8'", "'uint8'", "'int16'", 
		"'uint16'", "'int32'", "'uint32'", "'int64'", "'uint64'", "'float32'", 
		"'float64'", "'string'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "INTEGER", "FLOAT", "BOOL", "STRING", "COMMENT", "IDENT", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Flatbuffer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FlatbufferParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FlatbufferParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FlatbufferParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SchemaContext : ParserRuleContext {
		public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public RootTypeContext[] rootType() {
			return GetRuleContexts<RootTypeContext>();
		}
		public RootTypeContext rootType(int i) {
			return GetRuleContext<RootTypeContext>(i);
		}
		public FileExtensionContext[] fileExtension() {
			return GetRuleContexts<FileExtensionContext>();
		}
		public FileExtensionContext fileExtension(int i) {
			return GetRuleContext<FileExtensionContext>(i);
		}
		public FileIdentifierContext[] fileIdentifier() {
			return GetRuleContexts<FileIdentifierContext>();
		}
		public FileIdentifierContext fileIdentifier(int i) {
			return GetRuleContext<FileIdentifierContext>(i);
		}
		public TableContext[] table() {
			return GetRuleContexts<TableContext>();
		}
		public TableContext table(int i) {
			return GetRuleContext<TableContext>(i);
		}
		public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		public EnumContext[] @enum() {
			return GetRuleContexts<EnumContext>();
		}
		public EnumContext @enum(int i) {
			return GetRuleContext<EnumContext>(i);
		}
		public UnionContext[] union() {
			return GetRuleContexts<UnionContext>();
		}
		public UnionContext union(int i) {
			return GetRuleContext<UnionContext>(i);
		}
		public RpcContext[] rpc() {
			return GetRuleContexts<RpcContext>();
		}
		public RpcContext rpc(int i) {
			return GetRuleContext<RpcContext>(i);
		}
		public ObjectValueContext[] objectValue() {
			return GetRuleContexts<ObjectValueContext>();
		}
		public ObjectValueContext objectValue(int i) {
			return GetRuleContext<ObjectValueContext>(i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 0, RULE_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__17) | (1L << T__18) | (1L << T__23) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << COMMENT))) != 0)) {
				{
				State = 79;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 66; include();
					}
					break;
				case 2:
					{
					State = 67; @namespace();
					}
					break;
				case 3:
					{
					State = 68; attribute();
					}
					break;
				case 4:
					{
					State = 69; rootType();
					}
					break;
				case 5:
					{
					State = 70; fileExtension();
					}
					break;
				case 6:
					{
					State = 71; fileIdentifier();
					}
					break;
				case 7:
					{
					State = 72; table();
					}
					break;
				case 8:
					{
					State = 73; @struct();
					}
					break;
				case 9:
					{
					State = 74; @enum();
					}
					break;
				case 10:
					{
					State = 75; union();
					}
					break;
				case 11:
					{
					State = 76; rpc();
					}
					break;
				case 12:
					{
					State = 77; objectValue();
					}
					break;
				case 13:
					{
					State = 78; comment();
					}
					break;
				}
				}
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 2, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; _localctx.key = Match(T__0);
			State = 85; Match(STRING);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 86; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; _localctx.key = Match(T__2);
			{
			State = 90; Match(IDENT);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 91; Match(T__3);
				State = 92; Match(IDENT);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 98; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; _localctx.key = Match(T__4);
			State = 102; Match(STRING);
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 103; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootTypeContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public RootTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterRootType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitRootType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootTypeContext rootType() {
		RootTypeContext _localctx = new RootTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_rootType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106; _localctx.key = Match(T__5);
			State = 107; Match(IDENT);
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 108; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileExtensionContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public FileExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterFileExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitFileExtension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileExtensionContext fileExtension() {
		FileExtensionContext _localctx = new FileExtensionContext(Context, State);
		EnterRule(_localctx, 10, RULE_fileExtension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; _localctx.key = Match(T__6);
			State = 112; Match(STRING);
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 113; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileIdentifierContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public FileIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterFileIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitFileIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileIdentifierContext fileIdentifier() {
		FileIdentifierContext _localctx = new FileIdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_fileIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; _localctx.key = Match(T__7);
			State = 117; Match(STRING);
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 118; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode COMMENT() { return GetToken(FlatbufferParser.COMMENT, 0); }
		public CommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterComment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitComment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentContext comment() {
		CommentContext _localctx = new CommentContext(Context, State);
		EnterRule(_localctx, 14, RULE_comment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; _localctx.text = Match(COMMENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 16, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; _localctx.text = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetasContext : ParserRuleContext {
		public BindMetaContext[] bindMeta() {
			return GetRuleContexts<BindMetaContext>();
		}
		public BindMetaContext bindMeta(int i) {
			return GetRuleContext<BindMetaContext>(i);
		}
		public IndexMetaContext[] indexMeta() {
			return GetRuleContexts<IndexMetaContext>();
		}
		public IndexMetaContext indexMeta(int i) {
			return GetRuleContext<IndexMetaContext>(i);
		}
		public NullableMetaContext[] nullableMeta() {
			return GetRuleContexts<NullableMetaContext>();
		}
		public NullableMetaContext nullableMeta(int i) {
			return GetRuleContext<NullableMetaContext>(i);
		}
		public ReferenceMetaContext[] referenceMeta() {
			return GetRuleContexts<ReferenceMetaContext>();
		}
		public ReferenceMetaContext referenceMeta(int i) {
			return GetRuleContext<ReferenceMetaContext>(i);
		}
		public MetasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metas; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterMetas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitMetas(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetasContext metas() {
		MetasContext _localctx = new MetasContext(Context, State);
		EnterRule(_localctx, 18, RULE_metas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__8) {
				{
				State = 129;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 125; bindMeta();
					}
					break;
				case 2:
					{
					State = 126; indexMeta();
					}
					break;
				case 3:
					{
					State = 127; nullableMeta();
					}
					break;
				case 4:
					{
					State = 128; referenceMeta();
					}
					break;
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindMetaContext : ParserRuleContext {
		public IToken key;
		public StringContext path;
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public BindMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindMeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterBindMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitBindMeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindMetaContext bindMeta() {
		BindMetaContext _localctx = new BindMetaContext(Context, State);
		EnterRule(_localctx, 20, RULE_bindMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(T__8);
			State = 135; _localctx.key = Match(T__9);
			State = 136; Match(T__10);
			State = 137; _localctx.path = @string();
			State = 138; Match(T__11);
			State = 139; Match(T__12);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 140; comment();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexMetaContext : ParserRuleContext {
		public IToken key;
		public IToken _IDENT;
		public IList<IToken> _fields = new List<IToken>();
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public IndexMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexMeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterIndexMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitIndexMeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexMetaContext indexMeta() {
		IndexMetaContext _localctx = new IndexMetaContext(Context, State);
		EnterRule(_localctx, 22, RULE_indexMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(T__8);
			State = 147; _localctx.key = Match(T__13);
			State = 148; Match(T__10);
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 149; _localctx._IDENT = Match(IDENT);
				_localctx._fields.Add(_localctx._IDENT);
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 150; Match(T__14);
					State = 151; _localctx._IDENT = Match(IDENT);
					_localctx._fields.Add(_localctx._IDENT);
					}
					}
					State = 156;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 159; Match(T__11);
			State = 160; Match(T__12);
			State = 164;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 161; comment();
				}
				}
				State = 166;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableMetaContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ITerminalNode BOOL() { return GetToken(FlatbufferParser.BOOL, 0); }
		public NullableMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableMeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterNullableMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitNullableMeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableMetaContext nullableMeta() {
		NullableMetaContext _localctx = new NullableMetaContext(Context, State);
		EnterRule(_localctx, 24, RULE_nullableMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167; Match(T__8);
			State = 168; _localctx.key = Match(T__15);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 169; Match(T__10);
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BOOL) {
					{
					State = 170; _localctx.val = Match(BOOL);
					}
				}

				State = 173; Match(T__11);
				}
			}

			State = 176; Match(T__12);
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 177; comment();
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceMetaContext : ParserRuleContext {
		public IToken key;
		public StringContext path;
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ReferenceMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceMeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterReferenceMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitReferenceMeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceMetaContext referenceMeta() {
		ReferenceMetaContext _localctx = new ReferenceMetaContext(Context, State);
		EnterRule(_localctx, 26, RULE_referenceMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(T__8);
			State = 184; _localctx.key = Match(T__16);
			State = 185; Match(T__10);
			State = 186; _localctx.path = @string();
			State = 187; Match(T__11);
			State = 188; Match(T__12);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 189; comment();
				}
				}
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public TableFieldContext[] tableField() {
			return GetRuleContexts<TableFieldContext>();
		}
		public TableFieldContext tableField(int i) {
			return GetRuleContext<TableFieldContext>(i);
		}
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 28, RULE_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 195; comment();
				}
				}
				State = 200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 201; _localctx.meta = metas();
			State = 202; _localctx.key = Match(T__17);
			State = 203; _localctx.name = Match(IDENT);
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 204; metadata();
				}
			}

			State = 207; Match(T__18);
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << COMMENT) | (1L << IDENT))) != 0)) {
				{
				{
				State = 208; tableField();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 214; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public TypeContext fieldType;
		public ScalarValueContext fieldValue;
		public IToken fieldMap;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		public TableFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterTableField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitTableField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFieldContext tableField() {
		TableFieldContext _localctx = new TableFieldContext(Context, State);
		EnterRule(_localctx, 30, RULE_tableField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 216; comment();
				}
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 222; _localctx.meta = metas();
			State = 223; _localctx.fieldName = Match(IDENT);
			State = 224; Match(T__20);
			State = 225; _localctx.fieldType = type();
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 226; Match(T__21);
				State = 227; _localctx.fieldValue = scalarValue();
				}
			}

			State = 231;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 230; metadata();
				}
			}

			State = 235;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__22) {
				{
				State = 233; Match(T__22);
				State = 234; _localctx.fieldMap = Match(IDENT);
				}
			}

			State = 238;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 237; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 32, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 240; comment();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246; _localctx.meta = metas();
			State = 247; _localctx.key = Match(T__23);
			State = 248; _localctx.name = Match(IDENT);
			State = 250;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 249; metadata();
				}
			}

			State = 252; Match(T__18);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << COMMENT) | (1L << IDENT))) != 0)) {
				{
				{
				State = 253; structField();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 259; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public TypeContext fieldType;
		public ScalarValueContext fieldValue;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterStructField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitStructField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 34, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 261; comment();
				}
				}
				State = 266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 267; _localctx.meta = metas();
			State = 268; _localctx.fieldName = Match(IDENT);
			State = 269; Match(T__20);
			State = 270; _localctx.fieldType = type();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 271; Match(T__21);
				State = 272; _localctx.fieldValue = scalarValue();
				}
			}

			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 275; metadata();
				}
			}

			State = 279;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 278; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public RpcFieldContext[] rpcField() {
			return GetRuleContexts<RpcFieldContext>();
		}
		public RpcFieldContext rpcField(int i) {
			return GetRuleContext<RpcFieldContext>(i);
		}
		public RpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterRpc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitRpc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRpc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RpcContext rpc() {
		RpcContext _localctx = new RpcContext(Context, State);
		EnterRule(_localctx, 36, RULE_rpc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 281; comment();
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 287; _localctx.meta = metas();
			State = 288; _localctx.key = Match(T__24);
			State = 289; _localctx.name = Match(IDENT);
			State = 290; Match(T__18);
			State = 294;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << COMMENT) | (1L << IDENT))) != 0)) {
				{
				{
				State = 291; rpcField();
				}
				}
				State = 296;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 297; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public IToken fieldParam;
		public IToken fieldReturn;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public RpcFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpcField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterRpcField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitRpcField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRpcField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RpcFieldContext rpcField() {
		RpcFieldContext _localctx = new RpcFieldContext(Context, State);
		EnterRule(_localctx, 38, RULE_rpcField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 299; comment();
				}
				}
				State = 304;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 305; _localctx.meta = metas();
			State = 306; _localctx.fieldName = Match(IDENT);
			State = 307; Match(T__10);
			State = 308; _localctx.fieldParam = Match(IDENT);
			State = 309; Match(T__11);
			State = 310; Match(T__20);
			State = 311; _localctx.fieldReturn = Match(IDENT);
			State = 313;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 312; metadata();
				}
			}

			State = 316;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 315; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 40, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 318; comment();
				}
				}
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 324; _localctx.meta = metas();
			State = 325; _localctx.key = Match(T__25);
			State = 326; _localctx.name = Match(IDENT);
			State = 329;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 327; Match(T__20);
				State = 328; type();
				}
			}

			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 331; metadata();
				}
			}

			State = 334; Match(T__18);
			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << COMMENT) | (1L << IDENT))) != 0)) {
				{
				{
				State = 335; enumField();
				}
				}
				State = 340;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 341; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public IToken fieldValue;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ITerminalNode INTEGER() { return GetToken(FlatbufferParser.INTEGER, 0); }
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 42, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 343; comment();
				}
				}
				State = 348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 349; _localctx.meta = metas();
			State = 350; _localctx.fieldName = Match(IDENT);
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 351; Match(T__21);
				State = 352; _localctx.fieldValue = Match(INTEGER);
				}
			}

			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 355; Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public UnionFieldContext[] unionField() {
			return GetRuleContexts<UnionFieldContext>();
		}
		public UnionFieldContext unionField(int i) {
			return GetRuleContext<UnionFieldContext>(i);
		}
		public UnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionContext union() {
		UnionContext _localctx = new UnionContext(Context, State);
		EnterRule(_localctx, 44, RULE_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 358; comment();
				}
				}
				State = 363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 364; _localctx.meta = metas();
			State = 365; _localctx.key = Match(T__26);
			State = 366; _localctx.name = Match(IDENT);
			State = 368;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 367; metadata();
				}
			}

			State = 370; Match(T__18);
			State = 374;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << COMMENT) | (1L << IDENT))) != 0)) {
				{
				{
				State = 371; unionField();
				}
				}
				State = 376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 377; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public IToken fieldValue;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public CommentContext[] comment() {
			return GetRuleContexts<CommentContext>();
		}
		public CommentContext comment(int i) {
			return GetRuleContext<CommentContext>(i);
		}
		public ITerminalNode INTEGER() { return GetToken(FlatbufferParser.INTEGER, 0); }
		public UnionFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterUnionField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitUnionField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionFieldContext unionField() {
		UnionFieldContext _localctx = new UnionFieldContext(Context, State);
		EnterRule(_localctx, 46, RULE_unionField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT) {
				{
				{
				State = 379; comment();
				}
				}
				State = 384;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 385; _localctx.meta = metas();
			State = 386; _localctx.fieldName = Match(IDENT);
			State = 389;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__21) {
				{
				State = 387; Match(T__21);
				State = 388; _localctx.fieldValue = Match(INTEGER);
				}
			}

			State = 392;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 391; Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataContext : ParserRuleContext {
		public MetadataFieldContext[] metadataField() {
			return GetRuleContexts<MetadataFieldContext>();
		}
		public MetadataFieldContext metadataField(int i) {
			return GetRuleContext<MetadataFieldContext>(i);
		}
		public MetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterMetadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitMetadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataContext metadata() {
		MetadataContext _localctx = new MetadataContext(Context, State);
		EnterRule(_localctx, 48, RULE_metadata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(T__10);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 395; metadataField();
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 396; Match(T__14);
					State = 397; metadataField();
					}
					}
					State = 402;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 405; Match(T__11);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataFieldContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public SingleValueContext singleValue() {
			return GetRuleContext<SingleValueContext>(0);
		}
		public MetadataFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadataField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterMetadataField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitMetadataField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadataField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataFieldContext metadataField() {
		MetadataFieldContext _localctx = new MetadataFieldContext(Context, State);
		EnterRule(_localctx, 50, RULE_metadataField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(IDENT);
			State = 410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 408; Match(T__20);
				State = 409; singleValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 52, RULE_type);
		try {
			State = 439;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
				EnterOuterAlt(_localctx, 1);
				{
				State = 412; Match(T__27);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 2);
				{
				State = 413; Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 3);
				{
				State = 414; Match(T__29);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 4);
				{
				State = 415; Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 5);
				{
				State = 416; Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 6);
				{
				State = 417; Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 7);
				{
				State = 418; Match(T__33);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 8);
				{
				State = 419; Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 9);
				{
				State = 420; Match(T__35);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 10);
				{
				State = 421; Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 11);
				{
				State = 422; Match(T__37);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 12);
				{
				State = 423; Match(T__38);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 13);
				{
				State = 424; Match(T__39);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 14);
				{
				State = 425; Match(T__40);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 15);
				{
				State = 426; Match(T__41);
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 16);
				{
				State = 427; Match(T__42);
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 17);
				{
				State = 428; Match(T__43);
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 18);
				{
				State = 429; Match(T__44);
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 19);
				{
				State = 430; Match(T__45);
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 20);
				{
				State = 431; Match(T__46);
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 21);
				{
				State = 432; Match(T__47);
				}
				break;
			case T__48:
				EnterOuterAlt(_localctx, 22);
				{
				State = 433; Match(T__48);
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 23);
				{
				State = 434; Match(IDENT);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 24);
				{
				State = 435; Match(T__8);
				State = 436; type();
				State = 437; Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueContext : ParserRuleContext {
		public ObjectValueFieldContext[] objectValueField() {
			return GetRuleContexts<ObjectValueFieldContext>();
		}
		public ObjectValueFieldContext objectValueField(int i) {
			return GetRuleContext<ObjectValueFieldContext>(i);
		}
		public ObjectValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterObjectValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitObjectValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueContext objectValue() {
		ObjectValueContext _localctx = new ObjectValueContext(Context, State);
		EnterRule(_localctx, 54, RULE_objectValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(T__18);
			State = 450;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 442; objectValueField();
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 443; Match(T__14);
					State = 444; objectValueField();
					}
					}
					State = 449;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 452; Match(T__19);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueFieldContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ObjectValueFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValueField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterObjectValueField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitObjectValueField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValueField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueFieldContext objectValueField() {
		ObjectValueFieldContext _localctx = new ObjectValueFieldContext(Context, State);
		EnterRule(_localctx, 56, RULE_objectValueField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; Match(IDENT);
			State = 455; Match(T__20);
			State = 456; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValueContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterArrayValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitArrayValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValueContext arrayValue() {
		ArrayValueContext _localctx = new ArrayValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_arrayValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(T__8);
			State = 467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__8) | (1L << T__18) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING))) != 0)) {
				{
				State = 459; value();
				State = 464;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 460; Match(T__14);
					State = 461; value();
					}
					}
					State = 466;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 469; Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public SingleValueContext singleValue() {
			return GetRuleContext<SingleValueContext>(0);
		}
		public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public ArrayValueContext arrayValue() {
			return GetRuleContext<ArrayValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_value);
		try {
			State = 474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case FLOAT:
			case BOOL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 471; singleValue();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 2);
				{
				State = 472; objectValue();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 473; arrayValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleValueContext : ParserRuleContext {
		public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public SingleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterSingleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitSingleValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleValueContext singleValue() {
		SingleValueContext _localctx = new SingleValueContext(Context, State);
		EnterRule(_localctx, 62, RULE_singleValue);
		try {
			State = 478;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case FLOAT:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 476; scalarValue();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 477; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarValueContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(FlatbufferParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(FlatbufferParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(FlatbufferParser.BOOL, 0); }
		public ScalarValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterScalarValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitScalarValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarValueContext scalarValue() {
		ScalarValueContext _localctx = new ScalarValueContext(Context, State);
		EnterRule(_localctx, 64, RULE_scalarValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 480;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ':', '\x1E5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'R', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', 'U', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', 'Z', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\a', '\x4', '`', '\n', '\x4', '\f', '\x4', '\xE', 
		'\x4', '\x63', '\v', '\x4', '\x3', '\x4', '\x5', '\x4', '\x66', '\n', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'k', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'p', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'u', '\n', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'z', '\n', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\x84', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\x87', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\x90', '\n', '\f', '\f', '\f', '\xE', '\f', '\x93', '\v', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x9B', '\n', '\r', '\f', '\r', '\xE', '\r', '\x9E', '\v', 
		'\r', '\x5', '\r', '\xA0', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\a', '\r', '\xA5', '\n', '\r', '\f', '\r', '\xE', '\r', '\xA8', 
		'\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\xAE', '\n', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB1', '\n', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xB5', '\n', '\xE', '\f', 
		'\xE', '\xE', '\xE', '\xB8', '\v', '\xE', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\a', '\xF', '\xC1', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC4', '\v', 
		'\xF', '\x3', '\x10', '\a', '\x10', '\xC7', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\xCA', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\xD0', '\n', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\xD4', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\xD7', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\a', '\x11', '\xDC', '\n', '\x11', '\f', '\x11', '\xE', '\x11', '\xDF', 
		'\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xE7', '\n', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\xEA', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\xEE', '\n', '\x11', '\x3', '\x11', '\x5', '\x11', '\xF1', 
		'\n', '\x11', '\x3', '\x12', '\a', '\x12', '\xF4', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\xF7', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xFD', '\n', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x101', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x104', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\a', '\x13', '\x109', '\n', '\x13', '\f', '\x13', '\xE', '\x13', 
		'\x10C', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x114', '\n', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\x117', '\n', '\x13', '\x3', '\x13', '\x5', 
		'\x13', '\x11A', '\n', '\x13', '\x3', '\x14', '\a', '\x14', '\x11D', '\n', 
		'\x14', '\f', '\x14', '\xE', '\x14', '\x120', '\v', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x127', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x12A', '\v', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\a', '\x15', '\x12F', '\n', 
		'\x15', '\f', '\x15', '\xE', '\x15', '\x132', '\v', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x13C', '\n', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x13F', '\n', '\x15', '\x3', '\x16', '\a', '\x16', 
		'\x142', '\n', '\x16', '\f', '\x16', '\xE', '\x16', '\x145', '\v', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x5', '\x16', '\x14C', '\n', '\x16', '\x3', '\x16', '\x5', '\x16', '\x14F', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x153', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\x156', '\v', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x17', '\a', '\x17', '\x15B', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\x15E', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x164', '\n', '\x17', '\x3', 
		'\x17', '\x5', '\x17', '\x167', '\n', '\x17', '\x3', '\x18', '\a', '\x18', 
		'\x16A', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x16D', '\v', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x173', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\x177', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x17A', '\v', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x19', '\a', '\x19', '\x17F', '\n', '\x19', 
		'\f', '\x19', '\xE', '\x19', '\x182', '\v', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x188', '\n', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x18B', '\n', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x191', '\n', '\x1A', 
		'\f', '\x1A', '\xE', '\x1A', '\x194', '\v', '\x1A', '\x5', '\x1A', '\x196', 
		'\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x19D', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x5', '\x1C', '\x1BA', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x1C0', '\n', '\x1D', '\f', 
		'\x1D', '\xE', '\x1D', '\x1C3', '\v', '\x1D', '\x5', '\x1D', '\x1C5', 
		'\n', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x3', '\x1F', '\a', '\x1F', '\x1D1', '\n', '\x1F', '\f', '\x1F', '\xE', 
		'\x1F', '\x1D4', '\v', '\x1F', '\x5', '\x1F', '\x1D6', '\n', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x1DD', '\n', ' ', '\x3', '!', '\x3', '!', '\x5', '!', '\x1E1', '\n', 
		'!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x2', '\x2', '#', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', 
		'\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', '\x42', '\x2', 
		'\x3', '\x3', '\x2', '\x34', '\x36', '\x2', '\x225', '\x2', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'V', '\x3', '\x2', '\x2', '\x2', '\x6', '[', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'g', '\x3', '\x2', '\x2', '\x2', '\n', 
		'l', '\x3', '\x2', '\x2', '\x2', '\f', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'v', '\x3', '\x2', '\x2', '\x2', '\x10', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '}', '\x3', '\x2', '\x2', '\x2', '\x14', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x88', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x94', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\xDD', '\x3', '\x2', '\x2', '\x2', '\"', '\xF5', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x11E', '\x3', '\x2', '\x2', '\x2', '(', '\x130', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x143', '\x3', '\x2', '\x2', '\x2', ',', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x16B', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x180', '\x3', '\x2', '\x2', '\x2', '\x32', '\x18C', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x199', '\x3', '\x2', '\x2', '\x2', '\x36', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x1BB', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1C8', '\x3', '\x2', '\x2', '\x2', '<', '\x1CC', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x1DC', '\x3', '\x2', '\x2', '\x2', '@', '\x1E0', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x44', 'R', '\x5', '\x4', '\x3', '\x2', '\x45', 'R', '\x5', '\x6', '\x4', 
		'\x2', '\x46', 'R', '\x5', '\b', '\x5', '\x2', 'G', 'R', '\x5', '\n', 
		'\x6', '\x2', 'H', 'R', '\x5', '\f', '\a', '\x2', 'I', 'R', '\x5', '\xE', 
		'\b', '\x2', 'J', 'R', '\x5', '\x1E', '\x10', '\x2', 'K', 'R', '\x5', 
		'\"', '\x12', '\x2', 'L', 'R', '\x5', '*', '\x16', '\x2', 'M', 'R', '\x5', 
		'.', '\x18', '\x2', 'N', 'R', '\x5', '&', '\x14', '\x2', 'O', 'R', '\x5', 
		'\x38', '\x1D', '\x2', 'P', 'R', '\x5', '\x10', '\t', '\x2', 'Q', '\x44', 
		'\x3', '\x2', '\x2', '\x2', 'Q', '\x45', '\x3', '\x2', '\x2', '\x2', 'Q', 
		'\x46', '\x3', '\x2', '\x2', '\x2', 'Q', 'G', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'H', '\x3', '\x2', '\x2', '\x2', 'Q', 'I', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'J', '\x3', '\x2', '\x2', '\x2', 'Q', 'K', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'L', '\x3', '\x2', '\x2', '\x2', 'Q', 'M', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'N', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'U', '\x3', '\x2', '\x2', '\x2', 
		'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 
		'T', '\x3', '\x3', '\x2', '\x2', '\x2', 'U', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\a', '\x3', '\x2', '\x2', 'W', 'Y', '\a', '\x37', '\x2', 
		'\x2', 'X', 'Z', '\a', '\x4', '\x2', '\x2', 'Y', 'X', '\x3', '\x2', '\x2', 
		'\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '[', '\\', '\a', '\x5', '\x2', '\x2', '\\', '\x61', '\a', 
		'\x39', '\x2', '\x2', ']', '^', '\a', '\x6', '\x2', '\x2', '^', '`', '\a', 
		'\x39', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\a', 
		'\x4', '\x2', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\x66', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\a', '\a', '\x2', '\x2', 'h', 'j', '\a', '\x37', '\x2', 
		'\x2', 'i', 'k', '\a', '\x4', '\x2', '\x2', 'j', 'i', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'k', '\x3', '\x2', '\x2', '\x2', 'k', '\t', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'm', '\a', '\b', '\x2', '\x2', 'm', 'o', '\a', '\x39', 
		'\x2', '\x2', 'n', 'p', '\a', '\x4', '\x2', '\x2', 'o', 'n', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'q', 'r', '\a', '\t', '\x2', '\x2', 'r', 't', '\a', 
		'\x37', '\x2', '\x2', 's', 'u', '\a', '\x4', '\x2', '\x2', 't', 's', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', '\x2', 'u', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\n', '\x2', '\x2', 'w', 'y', 
		'\a', '\x37', '\x2', '\x2', 'x', 'z', '\a', '\x4', '\x2', '\x2', 'y', 
		'x', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x3', '\x2', '\x2', '\x2', 
		'z', '\xF', '\x3', '\x2', '\x2', '\x2', '{', '|', '\a', '\x38', '\x2', 
		'\x2', '|', '\x11', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\x37', 
		'\x2', '\x2', '~', '\x13', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x84', 
		'\x5', '\x16', '\f', '\x2', '\x80', '\x84', '\x5', '\x18', '\r', '\x2', 
		'\x81', '\x84', '\x5', '\x1A', '\xE', '\x2', '\x82', '\x84', '\x5', '\x1C', 
		'\xF', '\x2', '\x83', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x83', '\x80', 
		'\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', '\v', 
		'\x2', '\x2', '\x89', '\x8A', '\a', '\f', '\x2', '\x2', '\x8A', '\x8B', 
		'\a', '\r', '\x2', '\x2', '\x8B', '\x8C', '\x5', '\x12', '\n', '\x2', 
		'\x8C', '\x8D', '\a', '\xE', '\x2', '\x2', '\x8D', '\x91', '\a', '\xF', 
		'\x2', '\x2', '\x8E', '\x90', '\x5', '\x10', '\t', '\x2', '\x8F', '\x8E', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x17', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\v', '\x2', '\x2', 
		'\x95', '\x96', '\a', '\x10', '\x2', '\x2', '\x96', '\x9F', '\a', '\r', 
		'\x2', '\x2', '\x97', '\x9C', '\a', '\x39', '\x2', '\x2', '\x98', '\x99', 
		'\a', '\x11', '\x2', '\x2', '\x99', '\x9B', '\a', '\x39', '\x2', '\x2', 
		'\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9E', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x97', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', '\xE', '\x2', '\x2', 
		'\xA2', '\xA6', '\a', '\xF', '\x2', '\x2', '\xA3', '\xA5', '\x5', '\x10', 
		'\t', '\x2', '\xA4', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA8', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', 
		'\a', '\v', '\x2', '\x2', '\xAA', '\xB0', '\a', '\x12', '\x2', '\x2', 
		'\xAB', '\xAD', '\a', '\r', '\x2', '\x2', '\xAC', '\xAE', '\a', '\x36', 
		'\x2', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB1', '\a', '\xE', '\x2', '\x2', '\xB0', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xB6', '\a', '\xF', '\x2', '\x2', 
		'\xB3', '\xB5', '\x5', '\x10', '\t', '\x2', '\xB4', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB7', '\x1B', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\a', '\v', '\x2', '\x2', '\xBA', '\xBB', 
		'\a', '\x13', '\x2', '\x2', '\xBB', '\xBC', '\a', '\r', '\x2', '\x2', 
		'\xBC', '\xBD', '\x5', '\x12', '\n', '\x2', '\xBD', '\xBE', '\a', '\xE', 
		'\x2', '\x2', '\xBE', '\xC2', '\a', '\xF', '\x2', '\x2', '\xBF', '\xC1', 
		'\x5', '\x10', '\t', '\x2', '\xC0', '\xBF', '\x3', '\x2', '\x2', '\x2', 
		'\xC1', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC0', '\x3', '\x2', 
		'\x2', '\x2', '\xC2', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC3', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xC5', '\xC7', '\x5', '\x10', '\t', '\x2', '\xC6', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xC7', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC8', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', 
		'\xC9', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC8', '\x3', '\x2', 
		'\x2', '\x2', '\xCB', '\xCC', '\x5', '\x14', '\v', '\x2', '\xCC', '\xCD', 
		'\a', '\x14', '\x2', '\x2', '\xCD', '\xCF', '\a', '\x39', '\x2', '\x2', 
		'\xCE', '\xD0', '\x5', '\x32', '\x1A', '\x2', '\xCF', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\xCF', '\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD5', '\a', '\x15', '\x2', '\x2', 
		'\xD2', '\xD4', '\x5', ' ', '\x11', '\x2', '\xD3', '\xD2', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', 
		'\x3', '\x2', '\x2', '\x2', '\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', 
		'\xD6', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD5', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD9', '\a', '\x16', '\x2', '\x2', '\xD9', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xDC', '\x5', '\x10', '\t', '\x2', 
		'\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xDB', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x5', '\x14', 
		'\v', '\x2', '\xE1', '\xE2', '\a', '\x39', '\x2', '\x2', '\xE2', '\xE3', 
		'\a', '\x17', '\x2', '\x2', '\xE3', '\xE6', '\x5', '\x36', '\x1C', '\x2', 
		'\xE4', '\xE5', '\a', '\x18', '\x2', '\x2', '\xE5', '\xE7', '\x5', '\x42', 
		'\"', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xEA', '\x5', '\x32', '\x1A', '\x2', '\xE9', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '\xEA', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', '\a', '\x19', '\x2', '\x2', 
		'\xEC', '\xEE', '\a', '\x39', '\x2', '\x2', '\xED', '\xEB', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xEF', '\xF1', '\a', '\x4', '\x2', '\x2', 
		'\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF1', '!', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF4', 
		'\x5', '\x10', '\t', '\x2', '\xF3', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xF7', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\xF7', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\xF9', '\x5', '\x14', '\v', '\x2', '\xF9', '\xFA', '\a', '\x1A', 
		'\x2', '\x2', '\xFA', '\xFC', '\a', '\x39', '\x2', '\x2', '\xFB', '\xFD', 
		'\x5', '\x32', '\x1A', '\x2', '\xFC', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFC', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', '\x3', '\x2', 
		'\x2', '\x2', '\xFE', '\x102', '\a', '\x15', '\x2', '\x2', '\xFF', '\x101', 
		'\x5', '$', '\x13', '\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', '\x2', 
		'\x101', '\x104', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x105', '\x106', '\a', '\x16', '\x2', '\x2', '\x106', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x109', '\x5', '\x10', '\t', '\x2', '\x108', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10C', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10B', '\x10D', '\x3', '\x2', '\x2', '\x2', 
		'\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10E', '\x5', 
		'\x14', '\v', '\x2', '\x10E', '\x10F', '\a', '\x39', '\x2', '\x2', '\x10F', 
		'\x110', '\a', '\x17', '\x2', '\x2', '\x110', '\x113', '\x5', '\x36', 
		'\x1C', '\x2', '\x111', '\x112', '\a', '\x18', '\x2', '\x2', '\x112', 
		'\x114', '\x5', '\x42', '\"', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', '\x114', '\x116', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x117', '\x5', '\x32', '\x1A', '\x2', 
		'\x116', '\x115', '\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x117', '\x119', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x11A', '\a', '\x4', '\x2', '\x2', '\x119', '\x118', '\x3', '\x2', '\x2', 
		'\x2', '\x119', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x11A', '%', '\x3', 
		'\x2', '\x2', '\x2', '\x11B', '\x11D', '\x5', '\x10', '\t', '\x2', '\x11C', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x11E', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x11F', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\x5', 
		'\x14', '\v', '\x2', '\x122', '\x123', '\a', '\x1B', '\x2', '\x2', '\x123', 
		'\x124', '\a', '\x39', '\x2', '\x2', '\x124', '\x128', '\a', '\x15', '\x2', 
		'\x2', '\x125', '\x127', '\x5', '(', '\x15', '\x2', '\x126', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x127', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '\x16', '\x2', 
		'\x2', '\x12C', '\'', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12F', '\x5', 
		'\x10', '\t', '\x2', '\x12E', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12F', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12E', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x131', '\x3', '\x2', '\x2', '\x2', '\x131', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'\x133', '\x134', '\x5', '\x14', '\v', '\x2', '\x134', '\x135', '\a', 
		'\x39', '\x2', '\x2', '\x135', '\x136', '\a', '\r', '\x2', '\x2', '\x136', 
		'\x137', '\a', '\x39', '\x2', '\x2', '\x137', '\x138', '\a', '\xE', '\x2', 
		'\x2', '\x138', '\x139', '\a', '\x17', '\x2', '\x2', '\x139', '\x13B', 
		'\a', '\x39', '\x2', '\x2', '\x13A', '\x13C', '\x5', '\x32', '\x1A', '\x2', 
		'\x13B', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x13C', '\x13E', '\x3', '\x2', '\x2', '\x2', '\x13D', 
		'\x13F', '\a', '\x4', '\x2', '\x2', '\x13E', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13E', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x13F', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x140', '\x142', '\x5', '\x10', '\t', '\x2', '\x141', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x142', '\x145', '\x3', '\x2', '\x2', 
		'\x2', '\x143', '\x141', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', 
		'\x3', '\x2', '\x2', '\x2', '\x144', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x145', '\x143', '\x3', '\x2', '\x2', '\x2', '\x146', '\x147', '\x5', 
		'\x14', '\v', '\x2', '\x147', '\x148', '\a', '\x1C', '\x2', '\x2', '\x148', 
		'\x14B', '\a', '\x39', '\x2', '\x2', '\x149', '\x14A', '\a', '\x17', '\x2', 
		'\x2', '\x14A', '\x14C', '\x5', '\x36', '\x1C', '\x2', '\x14B', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x14B', '\x14C', '\x3', '\x2', '\x2', '\x2', 
		'\x14C', '\x14E', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14F', '\x5', 
		'\x32', '\x1A', '\x2', '\x14E', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x14F', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\x3', '\x2', '\x2', 
		'\x2', '\x150', '\x154', '\a', '\x15', '\x2', '\x2', '\x151', '\x153', 
		'\x5', ',', '\x17', '\x2', '\x152', '\x151', '\x3', '\x2', '\x2', '\x2', 
		'\x153', '\x156', '\x3', '\x2', '\x2', '\x2', '\x154', '\x152', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', '\x2', '\x155', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x156', '\x154', '\x3', '\x2', '\x2', 
		'\x2', '\x157', '\x158', '\a', '\x16', '\x2', '\x2', '\x158', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15B', '\x5', '\x10', '\t', '\x2', '\x15A', 
		'\x159', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15E', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', 
		'\x3', '\x2', '\x2', '\x2', '\x15D', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x15E', '\x15C', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\x5', 
		'\x14', '\v', '\x2', '\x160', '\x163', '\a', '\x39', '\x2', '\x2', '\x161', 
		'\x162', '\a', '\x18', '\x2', '\x2', '\x162', '\x164', '\a', '\x34', '\x2', 
		'\x2', '\x163', '\x161', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x166', '\x3', '\x2', '\x2', '\x2', 
		'\x165', '\x167', '\a', '\x11', '\x2', '\x2', '\x166', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x167', '\x3', '\x2', '\x2', '\x2', '\x167', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x168', '\x16A', '\x5', '\x10', '\t', 
		'\x2', '\x169', '\x168', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '\x169', '\x3', '\x2', '\x2', '\x2', 
		'\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16E', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16F', '\x5', '\x14', '\v', '\x2', '\x16F', '\x170', '\a', '\x1D', '\x2', 
		'\x2', '\x170', '\x172', '\a', '\x39', '\x2', '\x2', '\x171', '\x173', 
		'\x5', '\x32', '\x1A', '\x2', '\x172', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x173', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x178', '\a', '\x15', '\x2', '\x2', '\x175', 
		'\x177', '\x5', '\x30', '\x19', '\x2', '\x176', '\x175', '\x3', '\x2', 
		'\x2', '\x2', '\x177', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x178', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x178', '\x3', 
		'\x2', '\x2', '\x2', '\x17B', '\x17C', '\a', '\x16', '\x2', '\x2', '\x17C', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17F', '\x5', '\x10', '\t', 
		'\x2', '\x17E', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x182', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x17E', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x181', '\x3', '\x2', '\x2', '\x2', '\x181', '\x183', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x180', '\x3', '\x2', '\x2', '\x2', '\x183', 
		'\x184', '\x5', '\x14', '\v', '\x2', '\x184', '\x187', '\a', '\x39', '\x2', 
		'\x2', '\x185', '\x186', '\a', '\x18', '\x2', '\x2', '\x186', '\x188', 
		'\a', '\x34', '\x2', '\x2', '\x187', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x188', '\x3', '\x2', '\x2', '\x2', '\x188', '\x18A', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18B', '\a', '\x11', '\x2', '\x2', '\x18A', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x18B', '\x31', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x195', 
		'\a', '\r', '\x2', '\x2', '\x18D', '\x192', '\x5', '\x34', '\x1B', '\x2', 
		'\x18E', '\x18F', '\a', '\x11', '\x2', '\x2', '\x18F', '\x191', '\x5', 
		'\x34', '\x1B', '\x2', '\x190', '\x18E', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x194', '\x3', '\x2', '\x2', '\x2', '\x192', '\x190', '\x3', '\x2', '\x2', 
		'\x2', '\x192', '\x193', '\x3', '\x2', '\x2', '\x2', '\x193', '\x196', 
		'\x3', '\x2', '\x2', '\x2', '\x194', '\x192', '\x3', '\x2', '\x2', '\x2', 
		'\x195', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x195', '\x196', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', '\x197', 
		'\x198', '\a', '\xE', '\x2', '\x2', '\x198', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x19C', '\a', '\x39', '\x2', '\x2', '\x19A', '\x19B', 
		'\a', '\x17', '\x2', '\x2', '\x19B', '\x19D', '\x5', '@', '!', '\x2', 
		'\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x19D', '\x3', 
		'\x2', '\x2', '\x2', '\x19D', '\x35', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'\x1BA', '\a', '\x1E', '\x2', '\x2', '\x19F', '\x1BA', '\a', '\x1F', '\x2', 
		'\x2', '\x1A0', '\x1BA', '\a', ' ', '\x2', '\x2', '\x1A1', '\x1BA', '\a', 
		'!', '\x2', '\x2', '\x1A2', '\x1BA', '\a', '\"', '\x2', '\x2', '\x1A3', 
		'\x1BA', '\a', '#', '\x2', '\x2', '\x1A4', '\x1BA', '\a', '$', '\x2', 
		'\x2', '\x1A5', '\x1BA', '\a', '%', '\x2', '\x2', '\x1A6', '\x1BA', '\a', 
		'&', '\x2', '\x2', '\x1A7', '\x1BA', '\a', '\'', '\x2', '\x2', '\x1A8', 
		'\x1BA', '\a', '(', '\x2', '\x2', '\x1A9', '\x1BA', '\a', ')', '\x2', 
		'\x2', '\x1AA', '\x1BA', '\a', '*', '\x2', '\x2', '\x1AB', '\x1BA', '\a', 
		'+', '\x2', '\x2', '\x1AC', '\x1BA', '\a', ',', '\x2', '\x2', '\x1AD', 
		'\x1BA', '\a', '-', '\x2', '\x2', '\x1AE', '\x1BA', '\a', '.', '\x2', 
		'\x2', '\x1AF', '\x1BA', '\a', '/', '\x2', '\x2', '\x1B0', '\x1BA', '\a', 
		'\x30', '\x2', '\x2', '\x1B1', '\x1BA', '\a', '\x31', '\x2', '\x2', '\x1B2', 
		'\x1BA', '\a', '\x32', '\x2', '\x2', '\x1B3', '\x1BA', '\a', '\x33', '\x2', 
		'\x2', '\x1B4', '\x1BA', '\a', '\x39', '\x2', '\x2', '\x1B5', '\x1B6', 
		'\a', '\v', '\x2', '\x2', '\x1B6', '\x1B7', '\x5', '\x36', '\x1C', '\x2', 
		'\x1B7', '\x1B8', '\a', '\xF', '\x2', '\x2', '\x1B8', '\x1BA', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1A0', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1A2', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1A3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1A5', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1A8', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1AD', '\x3', 
		'\x2', '\x2', '\x2', '\x1B9', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1AF', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B0', '\x3', '\x2', '\x2', 
		'\x2', '\x1B9', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B2', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\x1B9', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x1BA', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1BB', 
		'\x1C4', '\a', '\x15', '\x2', '\x2', '\x1BC', '\x1C1', '\x5', ':', '\x1E', 
		'\x2', '\x1BD', '\x1BE', '\a', '\x11', '\x2', '\x2', '\x1BE', '\x1C0', 
		'\x5', ':', '\x1E', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', 
		'\x1C0', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1BF', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C2', 
		'\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', 
		'\x2', '\x1C4', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C4', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', '\x3', '\x2', '\x2', '\x2', 
		'\x1C6', '\x1C7', '\a', '\x16', '\x2', '\x2', '\x1C7', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\a', '\x39', '\x2', '\x2', '\x1C9', 
		'\x1CA', '\a', '\x17', '\x2', '\x2', '\x1CA', '\x1CB', '\x5', '>', ' ', 
		'\x2', '\x1CB', ';', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1D5', '\a', 
		'\v', '\x2', '\x2', '\x1CD', '\x1D2', '\x5', '>', ' ', '\x2', '\x1CE', 
		'\x1CF', '\a', '\x11', '\x2', '\x2', '\x1CF', '\x1D1', '\x5', '>', ' ', 
		'\x2', '\x1D0', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
		'\x1D2', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D6', '\x3', 
		'\x2', '\x2', '\x2', '\x1D4', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D5', 
		'\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', 
		'\x2', '\x1D6', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', 
		'\a', '\xF', '\x2', '\x2', '\x1D8', '=', '\x3', '\x2', '\x2', '\x2', '\x1D9', 
		'\x1DD', '\x5', '@', '!', '\x2', '\x1DA', '\x1DD', '\x5', '\x38', '\x1D', 
		'\x2', '\x1DB', '\x1DD', '\x5', '<', '\x1F', '\x2', '\x1DC', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DA', '\x3', '\x2', '\x2', '\x2', 
		'\x1DC', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DD', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x1DE', '\x1E1', '\x5', '\x42', '\"', '\x2', '\x1DF', '\x1E1', 
		'\a', '\x37', '\x2', '\x2', '\x1E0', '\x1DE', '\x3', '\x2', '\x2', '\x2', 
		'\x1E0', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\t', '\x2', '\x2', '\x2', '\x1E3', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '@', 'Q', 'S', 'Y', '\x61', '\x65', 
		'j', 'o', 't', 'y', '\x83', '\x85', '\x91', '\x9C', '\x9F', '\xA6', '\xAD', 
		'\xB0', '\xB6', '\xC2', '\xC8', '\xCF', '\xD5', '\xDD', '\xE6', '\xE9', 
		'\xED', '\xF0', '\xF5', '\xFC', '\x102', '\x10A', '\x113', '\x116', '\x119', 
		'\x11E', '\x128', '\x130', '\x13B', '\x13E', '\x143', '\x14B', '\x14E', 
		'\x154', '\x15C', '\x163', '\x166', '\x16B', '\x172', '\x178', '\x180', 
		'\x187', '\x18A', '\x192', '\x195', '\x19C', '\x1B9', '\x1C1', '\x1C4', 
		'\x1D2', '\x1D5', '\x1DC', '\x1E0',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
