//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Flatbuffer.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FlatbufferParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, BRACE_L=44, BRACE_R=45, 
		BRACKET_L=46, BRACKET_R=47, PARENTHESES_L=48, PARENTHESES_R=49, INTEGER=50, 
		FLOAT=51, BOOL=52, STRING=53, IDENT=54, COMMENT=55, WS=56;
	public const int
		RULE_schema = 0, RULE_include = 1, RULE_namespace = 2, RULE_attribute = 3, 
		RULE_rootType = 4, RULE_fileExtension = 5, RULE_fileIdentifier = 6, RULE_string = 7, 
		RULE_metas = 8, RULE_bindMeta = 9, RULE_indexMeta = 10, RULE_nullableMeta = 11, 
		RULE_referenceMeta = 12, RULE_table = 13, RULE_tableField = 14, RULE_struct = 15, 
		RULE_structField = 16, RULE_rpc = 17, RULE_rpcField = 18, RULE_enum = 19, 
		RULE_enumField = 20, RULE_union = 21, RULE_unionField = 22, RULE_metadata = 23, 
		RULE_metadataField = 24, RULE_type = 25, RULE_objectValue = 26, RULE_objectValueField = 27, 
		RULE_arrayValue = 28, RULE_value = 29, RULE_singleValue = 30, RULE_scalarValue = 31;
	public static readonly string[] ruleNames = {
		"schema", "include", "namespace", "attribute", "rootType", "fileExtension", 
		"fileIdentifier", "string", "metas", "bindMeta", "indexMeta", "nullableMeta", 
		"referenceMeta", "table", "tableField", "struct", "structField", "rpc", 
		"rpcField", "enum", "enumField", "union", "unionField", "metadata", "metadataField", 
		"type", "objectValue", "objectValueField", "arrayValue", "value", "singleValue", 
		"scalarValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'include'", "';'", "'namespace'", "'.'", "'attribute'", "'root_type'", 
		"'file_extension'", "'file_identifier'", "'Bind'", "'Index'", "','", "'Nullable'", 
		"'Reference'", "'table'", "':'", "'='", "'=>'", "'struct'", "'rpc_service'", 
		"'enum'", "'union'", "'bool'", "'byte'", "'ubyte'", "'short'", "'ushort'", 
		"'int'", "'uint'", "'float'", "'long'", "'ulong'", "'double'", "'int8'", 
		"'uint8'", "'int16'", "'uint16'", "'int32'", "'uint32'", "'int64'", "'uint64'", 
		"'float32'", "'float64'", "'string'", "'{'", "'}'", "'['", "']'", "'('", 
		"')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, "BRACE_L", "BRACE_R", 
		"BRACKET_L", "BRACKET_R", "PARENTHESES_L", "PARENTHESES_R", "INTEGER", 
		"FLOAT", "BOOL", "STRING", "IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Flatbuffer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FlatbufferParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FlatbufferParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FlatbufferParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SchemaContext : ParserRuleContext {
		public IncludeContext[] include() {
			return GetRuleContexts<IncludeContext>();
		}
		public IncludeContext include(int i) {
			return GetRuleContext<IncludeContext>(i);
		}
		public NamespaceContext[] @namespace() {
			return GetRuleContexts<NamespaceContext>();
		}
		public NamespaceContext @namespace(int i) {
			return GetRuleContext<NamespaceContext>(i);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public RootTypeContext[] rootType() {
			return GetRuleContexts<RootTypeContext>();
		}
		public RootTypeContext rootType(int i) {
			return GetRuleContext<RootTypeContext>(i);
		}
		public FileExtensionContext[] fileExtension() {
			return GetRuleContexts<FileExtensionContext>();
		}
		public FileExtensionContext fileExtension(int i) {
			return GetRuleContext<FileExtensionContext>(i);
		}
		public FileIdentifierContext[] fileIdentifier() {
			return GetRuleContexts<FileIdentifierContext>();
		}
		public FileIdentifierContext fileIdentifier(int i) {
			return GetRuleContext<FileIdentifierContext>(i);
		}
		public TableContext[] table() {
			return GetRuleContexts<TableContext>();
		}
		public TableContext table(int i) {
			return GetRuleContext<TableContext>(i);
		}
		public StructContext[] @struct() {
			return GetRuleContexts<StructContext>();
		}
		public StructContext @struct(int i) {
			return GetRuleContext<StructContext>(i);
		}
		public EnumContext[] @enum() {
			return GetRuleContexts<EnumContext>();
		}
		public EnumContext @enum(int i) {
			return GetRuleContext<EnumContext>(i);
		}
		public UnionContext[] union() {
			return GetRuleContexts<UnionContext>();
		}
		public UnionContext union(int i) {
			return GetRuleContext<UnionContext>(i);
		}
		public RpcContext[] rpc() {
			return GetRuleContexts<RpcContext>();
		}
		public RpcContext rpc(int i) {
			return GetRuleContext<RpcContext>(i);
		}
		public ObjectValueContext[] objectValue() {
			return GetRuleContexts<ObjectValueContext>();
		}
		public ObjectValueContext objectValue(int i) {
			return GetRuleContext<ObjectValueContext>(i);
		}
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSchema(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 0, RULE_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__13) | (1L << T__17) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << BRACE_L) | (1L << BRACKET_L))) != 0)) {
				{
				State = 76;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 64; include();
					}
					break;
				case 2:
					{
					State = 65; @namespace();
					}
					break;
				case 3:
					{
					State = 66; attribute();
					}
					break;
				case 4:
					{
					State = 67; rootType();
					}
					break;
				case 5:
					{
					State = 68; fileExtension();
					}
					break;
				case 6:
					{
					State = 69; fileIdentifier();
					}
					break;
				case 7:
					{
					State = 70; table();
					}
					break;
				case 8:
					{
					State = 71; @struct();
					}
					break;
				case 9:
					{
					State = 72; @enum();
					}
					break;
				case 10:
					{
					State = 73; union();
					}
					break;
				case 11:
					{
					State = 74; rpc();
					}
					break;
				case 12:
					{
					State = 75; objectValue();
					}
					break;
				}
				}
				State = 80;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncludeContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public IncludeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterInclude(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitInclude(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclude(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncludeContext include() {
		IncludeContext _localctx = new IncludeContext(Context, State);
		EnterRule(_localctx, 2, RULE_include);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; _localctx.key = Match(T__0);
			State = 82; Match(STRING);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 83; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public NamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitNamespace(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceContext @namespace() {
		NamespaceContext _localctx = new NamespaceContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86; _localctx.key = Match(T__2);
			{
			State = 87; Match(IDENT);
			State = 92;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 88; Match(T__3);
				State = 89; Match(IDENT);
				}
				}
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 95; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; _localctx.key = Match(T__4);
			State = 99; Match(STRING);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 100; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootTypeContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public RootTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterRootType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitRootType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootTypeContext rootType() {
		RootTypeContext _localctx = new RootTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_rootType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; _localctx.key = Match(T__5);
			State = 104; Match(IDENT);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 105; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileExtensionContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public FileExtensionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileExtension; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterFileExtension(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitFileExtension(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileExtension(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileExtensionContext fileExtension() {
		FileExtensionContext _localctx = new FileExtensionContext(Context, State);
		EnterRule(_localctx, 10, RULE_fileExtension);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108; _localctx.key = Match(T__6);
			State = 109; Match(STRING);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 110; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FileIdentifierContext : ParserRuleContext {
		public IToken key;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public FileIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fileIdentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterFileIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitFileIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFileIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileIdentifierContext fileIdentifier() {
		FileIdentifierContext _localctx = new FileIdentifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_fileIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; _localctx.key = Match(T__7);
			State = 114; Match(STRING);
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 115; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		public IToken text;
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 14, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; _localctx.text = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetasContext : ParserRuleContext {
		public BindMetaContext[] bindMeta() {
			return GetRuleContexts<BindMetaContext>();
		}
		public BindMetaContext bindMeta(int i) {
			return GetRuleContext<BindMetaContext>(i);
		}
		public IndexMetaContext[] indexMeta() {
			return GetRuleContexts<IndexMetaContext>();
		}
		public IndexMetaContext indexMeta(int i) {
			return GetRuleContext<IndexMetaContext>(i);
		}
		public NullableMetaContext[] nullableMeta() {
			return GetRuleContexts<NullableMetaContext>();
		}
		public NullableMetaContext nullableMeta(int i) {
			return GetRuleContext<NullableMetaContext>(i);
		}
		public ReferenceMetaContext[] referenceMeta() {
			return GetRuleContexts<ReferenceMetaContext>();
		}
		public ReferenceMetaContext referenceMeta(int i) {
			return GetRuleContext<ReferenceMetaContext>(i);
		}
		public MetasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metas; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterMetas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitMetas(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetasContext metas() {
		MetasContext _localctx = new MetasContext(Context, State);
		EnterRule(_localctx, 16, RULE_metas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L) {
				{
				State = 124;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
				case 1:
					{
					State = 120; bindMeta();
					}
					break;
				case 2:
					{
					State = 121; indexMeta();
					}
					break;
				case 3:
					{
					State = 122; nullableMeta();
					}
					break;
				case 4:
					{
					State = 123; referenceMeta();
					}
					break;
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindMetaContext : ParserRuleContext {
		public IToken key;
		public StringContext path;
		public ITerminalNode BRACKET_L() { return GetToken(FlatbufferParser.BRACKET_L, 0); }
		public ITerminalNode PARENTHESES_L() { return GetToken(FlatbufferParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(FlatbufferParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACKET_R() { return GetToken(FlatbufferParser.BRACKET_R, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public BindMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindMeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterBindMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitBindMeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBindMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BindMetaContext bindMeta() {
		BindMetaContext _localctx = new BindMetaContext(Context, State);
		EnterRule(_localctx, 18, RULE_bindMeta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129; Match(BRACKET_L);
			State = 130; _localctx.key = Match(T__8);
			State = 131; Match(PARENTHESES_L);
			State = 132; _localctx.path = @string();
			State = 133; Match(PARENTHESES_R);
			State = 134; Match(BRACKET_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexMetaContext : ParserRuleContext {
		public IToken key;
		public IToken _IDENT;
		public IList<IToken> _fields = new List<IToken>();
		public ITerminalNode BRACKET_L() { return GetToken(FlatbufferParser.BRACKET_L, 0); }
		public ITerminalNode PARENTHESES_L() { return GetToken(FlatbufferParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(FlatbufferParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACKET_R() { return GetToken(FlatbufferParser.BRACKET_R, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public IndexMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexMeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterIndexMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitIndexMeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexMetaContext indexMeta() {
		IndexMetaContext _localctx = new IndexMetaContext(Context, State);
		EnterRule(_localctx, 20, RULE_indexMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136; Match(BRACKET_L);
			State = 137; _localctx.key = Match(T__9);
			State = 138; Match(PARENTHESES_L);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 139; _localctx._IDENT = Match(IDENT);
				_localctx._fields.Add(_localctx._IDENT);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 140; Match(T__10);
					State = 141; _localctx._IDENT = Match(IDENT);
					_localctx._fields.Add(_localctx._IDENT);
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 149; Match(PARENTHESES_R);
			State = 150; Match(BRACKET_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullableMetaContext : ParserRuleContext {
		public IToken key;
		public IToken val;
		public ITerminalNode BRACKET_L() { return GetToken(FlatbufferParser.BRACKET_L, 0); }
		public ITerminalNode BRACKET_R() { return GetToken(FlatbufferParser.BRACKET_R, 0); }
		public ITerminalNode PARENTHESES_L() { return GetToken(FlatbufferParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(FlatbufferParser.PARENTHESES_R, 0); }
		public ITerminalNode BOOL() { return GetToken(FlatbufferParser.BOOL, 0); }
		public NullableMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullableMeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterNullableMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitNullableMeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullableMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullableMetaContext nullableMeta() {
		NullableMetaContext _localctx = new NullableMetaContext(Context, State);
		EnterRule(_localctx, 22, RULE_nullableMeta);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(BRACKET_L);
			State = 153; _localctx.key = Match(T__11);
			State = 159;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 154; Match(PARENTHESES_L);
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BOOL) {
					{
					State = 155; _localctx.val = Match(BOOL);
					}
				}

				State = 158; Match(PARENTHESES_R);
				}
			}

			State = 161; Match(BRACKET_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferenceMetaContext : ParserRuleContext {
		public IToken key;
		public StringContext path;
		public ITerminalNode BRACKET_L() { return GetToken(FlatbufferParser.BRACKET_L, 0); }
		public ITerminalNode PARENTHESES_L() { return GetToken(FlatbufferParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(FlatbufferParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACKET_R() { return GetToken(FlatbufferParser.BRACKET_R, 0); }
		public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public ReferenceMetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_referenceMeta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterReferenceMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitReferenceMeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReferenceMetaContext referenceMeta() {
		ReferenceMetaContext _localctx = new ReferenceMetaContext(Context, State);
		EnterRule(_localctx, 24, RULE_referenceMeta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; Match(BRACKET_L);
			State = 164; _localctx.key = Match(T__12);
			State = 165; Match(PARENTHESES_L);
			State = 166; _localctx.path = @string();
			State = 167; Match(PARENTHESES_R);
			State = 168; Match(BRACKET_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public TableFieldContext[] tableField() {
			return GetRuleContexts<TableFieldContext>();
		}
		public TableFieldContext tableField(int i) {
			return GetRuleContext<TableFieldContext>(i);
		}
		public TableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_table; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterTable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitTable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableContext table() {
		TableContext _localctx = new TableContext(Context, State);
		EnterRule(_localctx, 26, RULE_table);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 170; _localctx.meta = metas();
			State = 171; _localctx.key = Match(T__13);
			State = 172; _localctx.name = Match(IDENT);
			State = 174;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 173; metadata();
				}
			}

			State = 176; Match(BRACE_L);
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 177; tableField();
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 183; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public TypeContext fieldType;
		public ScalarValueContext fieldValue;
		public IToken fieldArrow;
		public IToken fieldMap;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		public TableFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterTableField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitTableField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableFieldContext tableField() {
		TableFieldContext _localctx = new TableFieldContext(Context, State);
		EnterRule(_localctx, 28, RULE_tableField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; _localctx.meta = metas();
			State = 186; _localctx.fieldName = Match(IDENT);
			State = 187; Match(T__14);
			State = 188; _localctx.fieldType = type();
			State = 191;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 189; Match(T__15);
				State = 190; _localctx.fieldValue = scalarValue();
				}
			}

			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 193; metadata();
				}
			}

			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__16) {
				{
				State = 196; _localctx.fieldArrow = Match(T__16);
				State = 197; _localctx.fieldMap = Match(IDENT);
				}
			}

			State = 201;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 200; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public StructFieldContext[] structField() {
			return GetRuleContexts<StructFieldContext>();
		}
		public StructFieldContext structField(int i) {
			return GetRuleContext<StructFieldContext>(i);
		}
		public StructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructContext @struct() {
		StructContext _localctx = new StructContext(Context, State);
		EnterRule(_localctx, 30, RULE_struct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; _localctx.meta = metas();
			State = 204; _localctx.key = Match(T__17);
			State = 205; _localctx.name = Match(IDENT);
			State = 207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 206; metadata();
				}
			}

			State = 209; Match(BRACE_L);
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 210; structField();
				}
				}
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 216; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public TypeContext fieldType;
		public ScalarValueContext fieldValue;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		public StructFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterStructField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitStructField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructFieldContext structField() {
		StructFieldContext _localctx = new StructFieldContext(Context, State);
		EnterRule(_localctx, 32, RULE_structField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218; _localctx.meta = metas();
			State = 219; _localctx.fieldName = Match(IDENT);
			State = 220; Match(T__14);
			State = 221; _localctx.fieldType = type();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 222; Match(T__15);
				State = 223; _localctx.fieldValue = scalarValue();
				}
			}

			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 226; metadata();
				}
			}

			State = 230;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 229; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public RpcFieldContext[] rpcField() {
			return GetRuleContexts<RpcFieldContext>();
		}
		public RpcFieldContext rpcField(int i) {
			return GetRuleContext<RpcFieldContext>(i);
		}
		public RpcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterRpc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitRpc(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRpc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RpcContext rpc() {
		RpcContext _localctx = new RpcContext(Context, State);
		EnterRule(_localctx, 34, RULE_rpc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; _localctx.meta = metas();
			State = 233; _localctx.key = Match(T__18);
			State = 234; _localctx.name = Match(IDENT);
			State = 235; Match(BRACE_L);
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 236; rpcField();
				}
				}
				State = 241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 242; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RpcFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public IToken fieldParam;
		public IToken fieldReturn;
		public ITerminalNode PARENTHESES_L() { return GetToken(FlatbufferParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(FlatbufferParser.PARENTHESES_R, 0); }
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode[] IDENT() { return GetTokens(FlatbufferParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(FlatbufferParser.IDENT, i);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public RpcFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpcField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterRpcField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitRpcField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRpcField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RpcFieldContext rpcField() {
		RpcFieldContext _localctx = new RpcFieldContext(Context, State);
		EnterRule(_localctx, 36, RULE_rpcField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; _localctx.meta = metas();
			State = 245; _localctx.fieldName = Match(IDENT);
			State = 246; Match(PARENTHESES_L);
			State = 247; _localctx.fieldParam = Match(IDENT);
			State = 248; Match(PARENTHESES_R);
			State = 249; Match(T__14);
			State = 250; _localctx.fieldReturn = Match(IDENT);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 251; metadata();
				}
			}

			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 254; Match(T__1);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public EnumFieldContext[] enumField() {
			return GetRuleContexts<EnumFieldContext>();
		}
		public EnumFieldContext enumField(int i) {
			return GetRuleContext<EnumFieldContext>(i);
		}
		public EnumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitEnum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumContext @enum() {
		EnumContext _localctx = new EnumContext(Context, State);
		EnterRule(_localctx, 38, RULE_enum);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; _localctx.meta = metas();
			State = 258; _localctx.key = Match(T__19);
			State = 259; _localctx.name = Match(IDENT);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 260; Match(T__14);
				State = 261; type();
				}
			}

			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 264; metadata();
				}
			}

			State = 267; Match(BRACE_L);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 268; enumField();
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public IToken fieldValue;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public ITerminalNode INTEGER() { return GetToken(FlatbufferParser.INTEGER, 0); }
		public EnumFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterEnumField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitEnumField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumFieldContext enumField() {
		EnumFieldContext _localctx = new EnumFieldContext(Context, State);
		EnterRule(_localctx, 40, RULE_enumField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; _localctx.meta = metas();
			State = 277; _localctx.fieldName = Match(IDENT);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 278; Match(T__15);
				State = 279; _localctx.fieldValue = Match(INTEGER);
				}
			}

			State = 283;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 282; Match(T__10);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionContext : ParserRuleContext {
		public MetasContext meta;
		public IToken key;
		public IToken name;
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public UnionFieldContext[] unionField() {
			return GetRuleContexts<UnionFieldContext>();
		}
		public UnionFieldContext unionField(int i) {
			return GetRuleContext<UnionFieldContext>(i);
		}
		public UnionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterUnion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitUnion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionContext union() {
		UnionContext _localctx = new UnionContext(Context, State);
		EnterRule(_localctx, 42, RULE_union);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; _localctx.meta = metas();
			State = 286; _localctx.key = Match(T__20);
			State = 287; _localctx.name = Match(IDENT);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARENTHESES_L) {
				{
				State = 288; metadata();
				}
			}

			State = 291; Match(BRACE_L);
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BRACKET_L || _la==IDENT) {
				{
				{
				State = 292; unionField();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 298; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionFieldContext : ParserRuleContext {
		public MetasContext meta;
		public IToken fieldName;
		public IToken fieldValue;
		public MetasContext metas() {
			return GetRuleContext<MetasContext>(0);
		}
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public ITerminalNode INTEGER() { return GetToken(FlatbufferParser.INTEGER, 0); }
		public UnionFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterUnionField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitUnionField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnionField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnionFieldContext unionField() {
		UnionFieldContext _localctx = new UnionFieldContext(Context, State);
		EnterRule(_localctx, 44, RULE_unionField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300; _localctx.meta = metas();
			State = 301; _localctx.fieldName = Match(IDENT);
			State = 304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 302; Match(T__15);
				State = 303; _localctx.fieldValue = Match(INTEGER);
				}
			}

			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__10) {
				{
				State = 306; Match(T__10);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataContext : ParserRuleContext {
		public ITerminalNode PARENTHESES_L() { return GetToken(FlatbufferParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(FlatbufferParser.PARENTHESES_R, 0); }
		public MetadataFieldContext[] metadataField() {
			return GetRuleContexts<MetadataFieldContext>();
		}
		public MetadataFieldContext metadataField(int i) {
			return GetRuleContext<MetadataFieldContext>(i);
		}
		public MetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterMetadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitMetadata(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadata(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataContext metadata() {
		MetadataContext _localctx = new MetadataContext(Context, State);
		EnterRule(_localctx, 46, RULE_metadata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 309; Match(PARENTHESES_L);
			State = 318;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 310; metadataField();
				State = 315;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 311; Match(T__10);
					State = 312; metadataField();
					}
					}
					State = 317;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 320; Match(PARENTHESES_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataFieldContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public SingleValueContext singleValue() {
			return GetRuleContext<SingleValueContext>(0);
		}
		public MetadataFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadataField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterMetadataField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitMetadataField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMetadataField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetadataFieldContext metadataField() {
		MetadataFieldContext _localctx = new MetadataFieldContext(Context, State);
		EnterRule(_localctx, 48, RULE_metadataField);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(IDENT);
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 323; Match(T__14);
				State = 324; singleValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public ITerminalNode BRACKET_L() { return GetToken(FlatbufferParser.BRACKET_L, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode BRACKET_R() { return GetToken(FlatbufferParser.BRACKET_R, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 50, RULE_type);
		try {
			State = 354;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__21:
				EnterOuterAlt(_localctx, 1);
				{
				State = 327; Match(T__21);
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 2);
				{
				State = 328; Match(T__22);
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 329; Match(T__23);
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 4);
				{
				State = 330; Match(T__24);
				}
				break;
			case T__25:
				EnterOuterAlt(_localctx, 5);
				{
				State = 331; Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 6);
				{
				State = 332; Match(T__26);
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 7);
				{
				State = 333; Match(T__27);
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 8);
				{
				State = 334; Match(T__28);
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 9);
				{
				State = 335; Match(T__29);
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 10);
				{
				State = 336; Match(T__30);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 11);
				{
				State = 337; Match(T__31);
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 12);
				{
				State = 338; Match(T__32);
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 13);
				{
				State = 339; Match(T__33);
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 14);
				{
				State = 340; Match(T__34);
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 15);
				{
				State = 341; Match(T__35);
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 16);
				{
				State = 342; Match(T__36);
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 17);
				{
				State = 343; Match(T__37);
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 18);
				{
				State = 344; Match(T__38);
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 19);
				{
				State = 345; Match(T__39);
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 20);
				{
				State = 346; Match(T__40);
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 21);
				{
				State = 347; Match(T__41);
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 22);
				{
				State = 348; Match(T__42);
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 23);
				{
				State = 349; Match(IDENT);
				}
				break;
			case BRACKET_L:
				EnterOuterAlt(_localctx, 24);
				{
				State = 350; Match(BRACKET_L);
				State = 351; type();
				State = 352; Match(BRACKET_R);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueContext : ParserRuleContext {
		public ITerminalNode BRACE_L() { return GetToken(FlatbufferParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(FlatbufferParser.BRACE_R, 0); }
		public ObjectValueFieldContext[] objectValueField() {
			return GetRuleContexts<ObjectValueFieldContext>();
		}
		public ObjectValueFieldContext objectValueField(int i) {
			return GetRuleContext<ObjectValueFieldContext>(i);
		}
		public ObjectValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterObjectValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitObjectValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueContext objectValue() {
		ObjectValueContext _localctx = new ObjectValueContext(Context, State);
		EnterRule(_localctx, 52, RULE_objectValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; Match(BRACE_L);
			State = 365;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 357; objectValueField();
				State = 362;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 358; Match(T__10);
					State = 359; objectValueField();
					}
					}
					State = 364;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 367; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectValueFieldContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(FlatbufferParser.IDENT, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ObjectValueFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectValueField; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterObjectValueField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitObjectValueField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObjectValueField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjectValueFieldContext objectValueField() {
		ObjectValueFieldContext _localctx = new ObjectValueFieldContext(Context, State);
		EnterRule(_localctx, 54, RULE_objectValueField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 369; Match(IDENT);
			State = 370; Match(T__14);
			State = 371; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayValueContext : ParserRuleContext {
		public ITerminalNode BRACKET_L() { return GetToken(FlatbufferParser.BRACKET_L, 0); }
		public ITerminalNode BRACKET_R() { return GetToken(FlatbufferParser.BRACKET_R, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ArrayValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterArrayValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitArrayValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayValueContext arrayValue() {
		ArrayValueContext _localctx = new ArrayValueContext(Context, State);
		EnterRule(_localctx, 56, RULE_arrayValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(BRACKET_L);
			State = 382;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BRACE_L) | (1L << BRACKET_L) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING))) != 0)) {
				{
				State = 374; value();
				State = 379;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__10) {
					{
					{
					State = 375; Match(T__10);
					State = 376; value();
					}
					}
					State = 381;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 384; Match(BRACKET_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public SingleValueContext singleValue() {
			return GetRuleContext<SingleValueContext>(0);
		}
		public ObjectValueContext objectValue() {
			return GetRuleContext<ObjectValueContext>(0);
		}
		public ArrayValueContext arrayValue() {
			return GetRuleContext<ArrayValueContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 58, RULE_value);
		try {
			State = 389;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case FLOAT:
			case BOOL:
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 386; singleValue();
				}
				break;
			case BRACE_L:
				EnterOuterAlt(_localctx, 2);
				{
				State = 387; objectValue();
				}
				break;
			case BRACKET_L:
				EnterOuterAlt(_localctx, 3);
				{
				State = 388; arrayValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleValueContext : ParserRuleContext {
		public ScalarValueContext scalarValue() {
			return GetRuleContext<ScalarValueContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(FlatbufferParser.STRING, 0); }
		public SingleValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterSingleValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitSingleValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleValueContext singleValue() {
		SingleValueContext _localctx = new SingleValueContext(Context, State);
		EnterRule(_localctx, 60, RULE_singleValue);
		try {
			State = 393;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
			case FLOAT:
			case BOOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 391; scalarValue();
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 392; Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarValueContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(FlatbufferParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(FlatbufferParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(FlatbufferParser.BOOL, 0); }
		public ScalarValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.EnterScalarValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatbufferListener typedListener = listener as IFlatbufferListener;
			if (typedListener != null) typedListener.ExitScalarValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IFlatbufferVisitor<TResult> typedVisitor = visitor as IFlatbufferVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScalarValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarValueContext scalarValue() {
		ScalarValueContext _localctx = new ScalarValueContext(Context, State);
		EnterRule(_localctx, 62, RULE_scalarValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 395;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ':', '\x190', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'O', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 'R', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'W', '\n', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', ']', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '`', '\v', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\x63', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'h', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', 'm', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 'r', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', 'w', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\a', '\n', '\x7F', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\x82', '\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', 
		'\x91', '\n', '\f', '\f', '\f', '\xE', '\f', '\x94', '\v', '\f', '\x5', 
		'\f', '\x96', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x9F', '\n', 
		'\r', '\x3', '\r', '\x5', '\r', '\xA2', '\n', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x5', '\xF', '\xB1', '\n', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\xB5', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xB8', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', 
		'\xC2', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\xC5', '\n', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xC9', '\n', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xCC', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xD2', '\n', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\a', '\x11', '\xD6', '\n', '\x11', '\f', '\x11', 
		'\xE', '\x11', '\xD9', '\v', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x5', '\x12', '\xE3', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', 
		'\xE6', '\n', '\x12', '\x3', '\x12', '\x5', '\x12', '\xE9', '\n', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\a', '\x13', '\xF0', '\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xF3', 
		'\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x5', '\x14', '\xFF', '\n', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x102', '\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x109', '\n', '\x15', '\x3', 
		'\x15', '\x5', '\x15', '\x10C', '\n', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\a', '\x15', '\x110', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x113', 
		'\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x11B', '\n', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x11E', '\n', '\x16', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x124', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\a', '\x17', '\x128', '\n', '\x17', '\f', '\x17', 
		'\xE', '\x17', '\x12B', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x133', 
		'\n', '\x18', '\x3', '\x18', '\x5', '\x18', '\x136', '\n', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x13C', 
		'\n', '\x19', '\f', '\x19', '\xE', '\x19', '\x13F', '\v', '\x19', '\x5', 
		'\x19', '\x141', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x148', '\n', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x165', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', '\x16B', '\n', 
		'\x1C', '\f', '\x1C', '\xE', '\x1C', '\x16E', '\v', '\x1C', '\x5', '\x1C', 
		'\x170', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\a', '\x1E', '\x17C', '\n', '\x1E', '\f', '\x1E', 
		'\xE', '\x1E', '\x17F', '\v', '\x1E', '\x5', '\x1E', '\x181', '\n', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', 
		'\x5', '\x1F', '\x188', '\n', '\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x18C', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x2', '\x2', 
		'\"', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x2', '\x3', '\x3', '\x2', '\x34', '\x36', '\x2', '\x1C2', '\x2', 'P', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'S', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'X', '\x3', '\x2', '\x2', '\x2', '\b', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'i', '\x3', '\x2', '\x2', '\x2', '\f', 'n', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 's', '\x3', '\x2', '\x2', '\x2', '\x10', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x80', '\x3', '\x2', '\x2', '\x2', '\x14', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xAC', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xCD', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '$', '\xEA', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xF6', '\x3', '\x2', '\x2', '\x2', '(', '\x103', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x116', '\x3', '\x2', '\x2', '\x2', ',', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x137', '\x3', '\x2', '\x2', '\x2', '\x32', '\x144', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x164', '\x3', '\x2', '\x2', '\x2', '\x36', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x173', '\x3', '\x2', '\x2', '\x2', 
		':', '\x177', '\x3', '\x2', '\x2', '\x2', '<', '\x187', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x18B', '\x3', '\x2', '\x2', '\x2', '@', '\x18D', 
		'\x3', '\x2', '\x2', '\x2', '\x42', 'O', '\x5', '\x4', '\x3', '\x2', '\x43', 
		'O', '\x5', '\x6', '\x4', '\x2', '\x44', 'O', '\x5', '\b', '\x5', '\x2', 
		'\x45', 'O', '\x5', '\n', '\x6', '\x2', '\x46', 'O', '\x5', '\f', '\a', 
		'\x2', 'G', 'O', '\x5', '\xE', '\b', '\x2', 'H', 'O', '\x5', '\x1C', '\xF', 
		'\x2', 'I', 'O', '\x5', ' ', '\x11', '\x2', 'J', 'O', '\x5', '(', '\x15', 
		'\x2', 'K', 'O', '\x5', ',', '\x17', '\x2', 'L', 'O', '\x5', '$', '\x13', 
		'\x2', 'M', 'O', '\x5', '\x36', '\x1C', '\x2', 'N', '\x42', '\x3', '\x2', 
		'\x2', '\x2', 'N', '\x43', '\x3', '\x2', '\x2', '\x2', 'N', '\x44', '\x3', 
		'\x2', '\x2', '\x2', 'N', '\x45', '\x3', '\x2', '\x2', '\x2', 'N', '\x46', 
		'\x3', '\x2', '\x2', '\x2', 'N', 'G', '\x3', '\x2', '\x2', '\x2', 'N', 
		'H', '\x3', '\x2', '\x2', '\x2', 'N', 'I', '\x3', '\x2', '\x2', '\x2', 
		'N', 'J', '\x3', '\x2', '\x2', '\x2', 'N', 'K', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 
		'O', 'R', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', '\x3', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x3', '\x2', 
		'\x2', 'T', 'V', '\a', '\x37', '\x2', '\x2', 'U', 'W', '\a', '\x4', '\x2', 
		'\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'W', '\x5', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x5', 
		'\x2', '\x2', 'Y', '^', '\a', '\x38', '\x2', '\x2', 'Z', '[', '\a', '\x6', 
		'\x2', '\x2', '[', ']', '\a', '\x38', '\x2', '\x2', '\\', 'Z', '\x3', 
		'\x2', '\x2', '\x2', ']', '`', '\x3', '\x2', '\x2', '\x2', '^', '\\', 
		'\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', '\x2', '\x2', '\x2', '_', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x63', '\a', '\x4', '\x2', '\x2', '\x62', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', '\a', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\a', '\x2', '\x2', 
		'\x65', 'g', '\a', '\x37', '\x2', '\x2', '\x66', 'h', '\a', '\x4', '\x2', 
		'\x2', 'g', '\x66', '\x3', '\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'h', '\t', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\b', 
		'\x2', '\x2', 'j', 'l', '\a', '\x38', '\x2', '\x2', 'k', 'm', '\a', '\x4', 
		'\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'm', '\v', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\a', '\t', 
		'\x2', '\x2', 'o', 'q', '\a', '\x37', '\x2', '\x2', 'p', 'r', '\a', '\x4', 
		'\x2', '\x2', 'q', 'p', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'r', '\r', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', '\n', 
		'\x2', '\x2', 't', 'v', '\a', '\x37', '\x2', '\x2', 'u', 'w', '\a', '\x4', 
		'\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\x3', '\x2', 
		'\x2', '\x2', 'w', '\xF', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', 
		'\x37', '\x2', '\x2', 'y', '\x11', '\x3', '\x2', '\x2', '\x2', 'z', '\x7F', 
		'\x5', '\x14', '\v', '\x2', '{', '\x7F', '\x5', '\x16', '\f', '\x2', '|', 
		'\x7F', '\x5', '\x18', '\r', '\x2', '}', '\x7F', '\x5', '\x1A', '\xE', 
		'\x2', '~', 'z', '\x3', '\x2', '\x2', '\x2', '~', '{', '\x3', '\x2', '\x2', 
		'\x2', '~', '|', '\x3', '\x2', '\x2', '\x2', '~', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x82', '\x3', '\x2', '\x2', '\x2', '\x80', '~', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\a', '\x30', '\x2', '\x2', '\x84', '\x85', '\a', 
		'\v', '\x2', '\x2', '\x85', '\x86', '\a', '\x32', '\x2', '\x2', '\x86', 
		'\x87', '\x5', '\x10', '\t', '\x2', '\x87', '\x88', '\a', '\x33', '\x2', 
		'\x2', '\x88', '\x89', '\a', '\x31', '\x2', '\x2', '\x89', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\x30', '\x2', '\x2', '\x8B', 
		'\x8C', '\a', '\f', '\x2', '\x2', '\x8C', '\x95', '\a', '\x32', '\x2', 
		'\x2', '\x8D', '\x92', '\a', '\x38', '\x2', '\x2', '\x8E', '\x8F', '\a', 
		'\r', '\x2', '\x2', '\x8F', '\x91', '\a', '\x38', '\x2', '\x2', '\x90', 
		'\x8E', '\x3', '\x2', '\x2', '\x2', '\x91', '\x94', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x90', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x96', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x92', '\x3', '\x2', '\x2', '\x2', '\x95', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x95', '\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\x33', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\x31', '\x2', '\x2', '\x99', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x9B', '\a', '\x30', '\x2', '\x2', '\x9B', '\xA1', '\a', 
		'\xE', '\x2', '\x2', '\x9C', '\x9E', '\a', '\x32', '\x2', '\x2', '\x9D', 
		'\x9F', '\a', '\x36', '\x2', '\x2', '\x9E', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA2', '\a', '\x33', '\x2', '\x2', '\xA1', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', 
		'\x31', '\x2', '\x2', '\xA4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA6', '\a', '\x30', '\x2', '\x2', '\xA6', '\xA7', '\a', '\xF', '\x2', 
		'\x2', '\xA7', '\xA8', '\a', '\x32', '\x2', '\x2', '\xA8', '\xA9', '\x5', 
		'\x10', '\t', '\x2', '\xA9', '\xAA', '\a', '\x33', '\x2', '\x2', '\xAA', 
		'\xAB', '\a', '\x31', '\x2', '\x2', '\xAB', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xAC', '\xAD', '\x5', '\x12', '\n', '\x2', '\xAD', '\xAE', '\a', 
		'\x10', '\x2', '\x2', '\xAE', '\xB0', '\a', '\x38', '\x2', '\x2', '\xAF', 
		'\xB1', '\x5', '\x30', '\x19', '\x2', '\xB0', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB2', '\xB6', '\a', '.', '\x2', '\x2', '\xB3', 
		'\xB5', '\x5', '\x1E', '\x10', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', 
		'\x2', '\x2', '\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\a', '/', '\x2', '\x2', '\xBA', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\x12', '\n', '\x2', '\xBC', 
		'\xBD', '\a', '\x38', '\x2', '\x2', '\xBD', '\xBE', '\a', '\x11', '\x2', 
		'\x2', '\xBE', '\xC1', '\x5', '\x34', '\x1B', '\x2', '\xBF', '\xC0', '\a', 
		'\x12', '\x2', '\x2', '\xC0', '\xC2', '\x5', '@', '!', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC5', '\x5', 
		'\x30', '\x19', '\x2', '\xC4', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC6', '\xC7', '\a', '\x13', '\x2', '\x2', '\xC7', '\xC9', '\a', 
		'\x38', '\x2', '\x2', '\xC8', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCC', '\a', '\x4', '\x2', '\x2', '\xCB', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', '\x5', '\x12', '\n', 
		'\x2', '\xCE', '\xCF', '\a', '\x14', '\x2', '\x2', '\xCF', '\xD1', '\a', 
		'\x38', '\x2', '\x2', '\xD0', '\xD2', '\x5', '\x30', '\x19', '\x2', '\xD1', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', 
		'\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD7', '\a', 
		'.', '\x2', '\x2', '\xD4', '\xD6', '\x5', '\"', '\x12', '\x2', '\xD5', 
		'\xD4', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', 
		'\x2', '\x2', '\x2', '\xD8', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD9', 
		'\xD7', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xDB', '\a', '/', '\x2', 
		'\x2', '\xDB', '!', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x5', 
		'\x12', '\n', '\x2', '\xDD', '\xDE', '\a', '\x38', '\x2', '\x2', '\xDE', 
		'\xDF', '\a', '\x11', '\x2', '\x2', '\xDF', '\xE2', '\x5', '\x34', '\x1B', 
		'\x2', '\xE0', '\xE1', '\a', '\x12', '\x2', '\x2', '\xE1', '\xE3', '\x5', 
		'@', '!', '\x2', '\xE2', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\xE6', '\x5', '\x30', '\x19', '\x2', '\xE5', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE5', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE8', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE9', '\a', '\x4', '\x2', '\x2', 
		'\xE8', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xE9', '#', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', 
		'\x5', '\x12', '\n', '\x2', '\xEB', '\xEC', '\a', '\x15', '\x2', '\x2', 
		'\xEC', '\xED', '\a', '\x38', '\x2', '\x2', '\xED', '\xF1', '\a', '.', 
		'\x2', '\x2', '\xEE', '\xF0', '\x5', '&', '\x14', '\x2', '\xEF', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF3', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\a', '/', '\x2', '\x2', '\xF5', 
		'%', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\x5', '\x12', '\n', 
		'\x2', '\xF7', '\xF8', '\a', '\x38', '\x2', '\x2', '\xF8', '\xF9', '\a', 
		'\x32', '\x2', '\x2', '\xF9', '\xFA', '\a', '\x38', '\x2', '\x2', '\xFA', 
		'\xFB', '\a', '\x33', '\x2', '\x2', '\xFB', '\xFC', '\a', '\x11', '\x2', 
		'\x2', '\xFC', '\xFE', '\a', '\x38', '\x2', '\x2', '\xFD', '\xFF', '\x5', 
		'\x30', '\x19', '\x2', '\xFE', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFE', 
		'\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x100', '\x102', '\a', '\x4', '\x2', '\x2', '\x101', '\x100', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\'', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x5', '\x12', 
		'\n', '\x2', '\x104', '\x105', '\a', '\x16', '\x2', '\x2', '\x105', '\x108', 
		'\a', '\x38', '\x2', '\x2', '\x106', '\x107', '\a', '\x11', '\x2', '\x2', 
		'\x107', '\x109', '\x5', '\x34', '\x1B', '\x2', '\x108', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x109', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x10B', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10C', '\x5', '\x30', 
		'\x19', '\x2', '\x10B', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10D', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x111', '\a', '.', '\x2', '\x2', '\x10E', '\x110', '\x5', 
		'*', '\x16', '\x2', '\x10F', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\a', '/', '\x2', '\x2', '\x115', ')', '\x3', '\x2', 
		'\x2', '\x2', '\x116', '\x117', '\x5', '\x12', '\n', '\x2', '\x117', '\x11A', 
		'\a', '\x38', '\x2', '\x2', '\x118', '\x119', '\a', '\x12', '\x2', '\x2', 
		'\x119', '\x11B', '\a', '\x34', '\x2', '\x2', '\x11A', '\x118', '\x3', 
		'\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x11B', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11E', '\a', '\r', '\x2', 
		'\x2', '\x11D', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11D', '\x11E', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x11F', '\x120', '\x5', '\x12', '\n', '\x2', '\x120', '\x121', '\a', 
		'\x17', '\x2', '\x2', '\x121', '\x123', '\a', '\x38', '\x2', '\x2', '\x122', 
		'\x124', '\x5', '\x30', '\x19', '\x2', '\x123', '\x122', '\x3', '\x2', 
		'\x2', '\x2', '\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x125', '\x129', '\a', '.', '\x2', '\x2', 
		'\x126', '\x128', '\x5', '.', '\x18', '\x2', '\x127', '\x126', '\x3', 
		'\x2', '\x2', '\x2', '\x128', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x129', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x12C', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', '\a', '/', '\x2', '\x2', 
		'\x12D', '-', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\x5', '\x12', 
		'\n', '\x2', '\x12F', '\x132', '\a', '\x38', '\x2', '\x2', '\x130', '\x131', 
		'\a', '\x12', '\x2', '\x2', '\x131', '\x133', '\a', '\x34', '\x2', '\x2', 
		'\x132', '\x130', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x133', '\x135', '\x3', '\x2', '\x2', '\x2', '\x134', 
		'\x136', '\a', '\r', '\x2', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x135', '\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x140', '\a', '\x32', '\x2', '\x2', '\x138', 
		'\x13D', '\x5', '\x32', '\x1A', '\x2', '\x139', '\x13A', '\a', '\r', '\x2', 
		'\x2', '\x13A', '\x13C', '\x5', '\x32', '\x1A', '\x2', '\x13B', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x13F', '\x3', '\x2', '\x2', '\x2', 
		'\x13D', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x13E', '\x141', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x13D', '\x3', '\x2', '\x2', '\x2', '\x140', '\x138', '\x3', '\x2', '\x2', 
		'\x2', '\x140', '\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x143', '\a', '\x33', '\x2', '\x2', 
		'\x143', '\x31', '\x3', '\x2', '\x2', '\x2', '\x144', '\x147', '\a', '\x38', 
		'\x2', '\x2', '\x145', '\x146', '\a', '\x11', '\x2', '\x2', '\x146', '\x148', 
		'\x5', '>', ' ', '\x2', '\x147', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x147', '\x148', '\x3', '\x2', '\x2', '\x2', '\x148', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x149', '\x165', '\a', '\x18', '\x2', '\x2', '\x14A', 
		'\x165', '\a', '\x19', '\x2', '\x2', '\x14B', '\x165', '\a', '\x1A', '\x2', 
		'\x2', '\x14C', '\x165', '\a', '\x1B', '\x2', '\x2', '\x14D', '\x165', 
		'\a', '\x1C', '\x2', '\x2', '\x14E', '\x165', '\a', '\x1D', '\x2', '\x2', 
		'\x14F', '\x165', '\a', '\x1E', '\x2', '\x2', '\x150', '\x165', '\a', 
		'\x1F', '\x2', '\x2', '\x151', '\x165', '\a', ' ', '\x2', '\x2', '\x152', 
		'\x165', '\a', '!', '\x2', '\x2', '\x153', '\x165', '\a', '\"', '\x2', 
		'\x2', '\x154', '\x165', '\a', '#', '\x2', '\x2', '\x155', '\x165', '\a', 
		'$', '\x2', '\x2', '\x156', '\x165', '\a', '%', '\x2', '\x2', '\x157', 
		'\x165', '\a', '&', '\x2', '\x2', '\x158', '\x165', '\a', '\'', '\x2', 
		'\x2', '\x159', '\x165', '\a', '(', '\x2', '\x2', '\x15A', '\x165', '\a', 
		')', '\x2', '\x2', '\x15B', '\x165', '\a', '*', '\x2', '\x2', '\x15C', 
		'\x165', '\a', '+', '\x2', '\x2', '\x15D', '\x165', '\a', ',', '\x2', 
		'\x2', '\x15E', '\x165', '\a', '-', '\x2', '\x2', '\x15F', '\x165', '\a', 
		'\x38', '\x2', '\x2', '\x160', '\x161', '\a', '\x30', '\x2', '\x2', '\x161', 
		'\x162', '\x5', '\x34', '\x1B', '\x2', '\x162', '\x163', '\a', '\x31', 
		'\x2', '\x2', '\x163', '\x165', '\x3', '\x2', '\x2', '\x2', '\x164', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x164', '\x14C', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x14D', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x164', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x150', '\x3', '\x2', '\x2', '\x2', '\x164', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x153', '\x3', '\x2', '\x2', '\x2', '\x164', '\x154', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x155', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x156', '\x3', '\x2', '\x2', '\x2', '\x164', '\x157', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x158', '\x3', '\x2', '\x2', '\x2', '\x164', '\x159', 
		'\x3', '\x2', '\x2', '\x2', '\x164', '\x15A', '\x3', '\x2', '\x2', '\x2', 
		'\x164', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x164', '\x15C', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x164', 
		'\x15E', '\x3', '\x2', '\x2', '\x2', '\x164', '\x15F', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x160', '\x3', '\x2', '\x2', '\x2', '\x165', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x16F', '\a', '.', '\x2', '\x2', 
		'\x167', '\x16C', '\x5', '\x38', '\x1D', '\x2', '\x168', '\x169', '\a', 
		'\r', '\x2', '\x2', '\x169', '\x16B', '\x5', '\x38', '\x1D', '\x2', '\x16A', 
		'\x168', '\x3', '\x2', '\x2', '\x2', '\x16B', '\x16E', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', 
		'\x3', '\x2', '\x2', '\x2', '\x16D', '\x170', '\x3', '\x2', '\x2', '\x2', 
		'\x16E', '\x16C', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x16F', '\x170', '\x3', '\x2', '\x2', '\x2', '\x170', 
		'\x171', '\x3', '\x2', '\x2', '\x2', '\x171', '\x172', '\a', '/', '\x2', 
		'\x2', '\x172', '\x37', '\x3', '\x2', '\x2', '\x2', '\x173', '\x174', 
		'\a', '\x38', '\x2', '\x2', '\x174', '\x175', '\a', '\x11', '\x2', '\x2', 
		'\x175', '\x176', '\x5', '<', '\x1F', '\x2', '\x176', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x177', '\x180', '\a', '\x30', '\x2', '\x2', '\x178', '\x17D', 
		'\x5', '<', '\x1F', '\x2', '\x179', '\x17A', '\a', '\r', '\x2', '\x2', 
		'\x17A', '\x17C', '\x5', '<', '\x1F', '\x2', '\x17B', '\x179', '\x3', 
		'\x2', '\x2', '\x2', '\x17C', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', '\x3', '\x2', '\x2', 
		'\x2', '\x17E', '\x181', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x17D', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x178', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x181', '\x3', '\x2', '\x2', '\x2', '\x181', '\x182', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x183', '\a', '\x31', '\x2', '\x2', '\x183', 
		';', '\x3', '\x2', '\x2', '\x2', '\x184', '\x188', '\x5', '>', ' ', '\x2', 
		'\x185', '\x188', '\x5', '\x36', '\x1C', '\x2', '\x186', '\x188', '\x5', 
		':', '\x1E', '\x2', '\x187', '\x184', '\x3', '\x2', '\x2', '\x2', '\x187', 
		'\x185', '\x3', '\x2', '\x2', '\x2', '\x187', '\x186', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '=', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18C', '\x5', 
		'@', '!', '\x2', '\x18A', '\x18C', '\a', '\x37', '\x2', '\x2', '\x18B', 
		'\x189', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18A', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '?', '\x3', '\x2', '\x2', '\x2', '\x18D', '\x18E', '\t', 
		'\x2', '\x2', '\x2', '\x18E', '\x41', '\x3', '\x2', '\x2', '\x2', '\x32', 
		'N', 'P', 'V', '^', '\x62', 'g', 'l', 'q', 'v', '~', '\x80', '\x92', '\x95', 
		'\x9E', '\xA1', '\xB0', '\xB6', '\xC1', '\xC4', '\xC8', '\xCB', '\xD1', 
		'\xD7', '\xE2', '\xE5', '\xE8', '\xF1', '\xFE', '\x101', '\x108', '\x10B', 
		'\x111', '\x11A', '\x11D', '\x123', '\x129', '\x132', '\x135', '\x13D', 
		'\x140', '\x147', '\x164', '\x16C', '\x16F', '\x17D', '\x180', '\x187', 
		'\x18B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
