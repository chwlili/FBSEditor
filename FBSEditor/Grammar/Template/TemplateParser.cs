//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TemplateParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class TemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, CLOSE=3, INTEGER=4, FLOAT=5, BOOL=6, STRING=7, BRACE_L=8, 
		BRACE_R=9, INCREMENT=10, DECREMENT=11, MUL=12, DIV=13, MOD=14, ADD=15, 
		SUB=16, PARENTHESES_L=17, PARENTHESES_R=18, DOT=19, COMMA=20, NOTEQUAL=21, 
		LOGIC_NOT=22, BIT_INVERT=23, SHIFTL=24, SHIFTR=25, LESS=26, LESSEQUAL=27, 
		GREATER=28, GREATEREQUAL=29, EQUAL=30, LOGIC_AND=31, LOGIC_OR=32, BIT_AND=33, 
		BIT_OR=34, BIT_XOR=35, COLON=36, SEMICOLON=37, VAR=38, IF=39, SWITCH=40, 
		CASE=41, WHILE=42, DO=43, FOR=44, FOREACH=45, IN=46, BREACK=47, CONTINUE=48, 
		IDENT=49, COMMENT=50, WS=51;
	public const int
		RULE_document = 0, RULE_code = 1, RULE_var = 2, RULE_if = 3, RULE_switch = 4, 
		RULE_while = 5, RULE_dowhile = 6, RULE_for = 7, RULE_foreach = 8, RULE_expr = 9, 
		RULE_exprCall = 10, RULE_exprProp = 11, RULE_exprValue = 12;
	public static readonly string[] ruleNames = {
		"document", "code", "var", "if", "switch", "while", "dowhile", "for", 
		"foreach", "expr", "exprCall", "exprProp", "exprValue"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, "'{'", "'}'", "'++'", 
		"'--'", "'*'", "'/'", "'%'", "'+'", "'-'", "'('", "')'", "'.'", "','", 
		"'!='", "'!'", "'~'", "'<<'", "'>>'", "'<'", "'<='", "'>'", "'>='", "'=='", 
		"'&&'", "'||'", "'&'", "'|'", "'^'", "':'", "';'", "'var'", "'if'", "'switch'", 
		"'case'", "'while'", "'do'", "'for'", "'foreach'", "'in'", "'break'", 
		"'continue'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "CLOSE", "INTEGER", "FLOAT", "BOOL", "STRING", "BRACE_L", 
		"BRACE_R", "INCREMENT", "DECREMENT", "MUL", "DIV", "MOD", "ADD", "SUB", 
		"PARENTHESES_L", "PARENTHESES_R", "DOT", "COMMA", "NOTEQUAL", "LOGIC_NOT", 
		"BIT_INVERT", "SHIFTL", "SHIFTR", "LESS", "LESSEQUAL", "GREATER", "GREATEREQUAL", 
		"EQUAL", "LOGIC_AND", "LOGIC_OR", "BIT_AND", "BIT_OR", "BIT_XOR", "COLON", 
		"SEMICOLON", "VAR", "IF", "SWITCH", "CASE", "WHILE", "DO", "FOR", "FOREACH", 
		"IN", "BREACK", "CONTINUE", "IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREACK) | (1L << CONTINUE) | (1L << IDENT))) != 0)) {
				{
				State = 28;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 26; Match(TEXT);
					}
					break;
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case INCREMENT:
				case DECREMENT:
				case SUB:
				case PARENTHESES_L:
				case LOGIC_NOT:
				case BIT_INVERT:
				case VAR:
				case IF:
				case SWITCH:
				case WHILE:
				case DO:
				case FOR:
				case FOREACH:
				case BREACK:
				case CONTINUE:
				case IDENT:
					{
					State = 27; code();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public DowhileContext dowhile() {
			return GetRuleContext<DowhileContext>(0);
		}
		public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		public ForeachContext @foreach() {
			return GetRuleContext<ForeachContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 2, RULE_code);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 33; var();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 34; @if();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 35; @switch();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 36; @while();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 5);
				{
				State = 37; dowhile();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 38; @for();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 7);
				{
				State = 39; @foreach();
				}
				break;
			case INTEGER:
			case FLOAT:
			case BOOL:
			case STRING:
			case INCREMENT:
			case DECREMENT:
			case SUB:
			case PARENTHESES_L:
			case LOGIC_NOT:
			case BIT_INVERT:
			case BREACK:
			case CONTINUE:
			case IDENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 40; expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public IToken keyword;
		public IToken key;
		public ITerminalNode VAR() { return GetToken(TemplateParser.VAR, 0); }
		public ITerminalNode IDENT() { return GetToken(TemplateParser.IDENT, 0); }
		public ITerminalNode EQUAL() { return GetToken(TemplateParser.EQUAL, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TemplateParser.SEMICOLON, 0); }
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 4, RULE_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43; _localctx.keyword = Match(VAR);
			State = 44; _localctx.key = Match(IDENT);
			State = 47;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 45; Match(EQUAL);
				State = 46; expr(0);
				}
			}

			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 49; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public IToken keyword;
		public ExprContext condition;
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode IF() { return GetToken(TemplateParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 6, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; _localctx.keyword = Match(IF);
			State = 53; Match(PARENTHESES_L);
			State = 54; _localctx.condition = expr(0);
			State = 55; Match(PARENTHESES_R);
			State = 56; Match(BRACE_L);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREACK) | (1L << CONTINUE) | (1L << IDENT))) != 0)) {
				{
				State = 59;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case INCREMENT:
				case DECREMENT:
				case SUB:
				case PARENTHESES_L:
				case LOGIC_NOT:
				case BIT_INVERT:
				case VAR:
				case IF:
				case SWITCH:
				case WHILE:
				case DO:
				case FOR:
				case FOREACH:
				case BREACK:
				case CONTINUE:
				case IDENT:
					{
					State = 57; code();
					}
					break;
				case TEXT:
					{
					State = 58; Match(TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		public IToken keywordA;
		public ExprContext condition;
		public IToken _CASE;
		public IList<IToken> _keywordB = new List<IToken>();
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode SWITCH() { return GetToken(TemplateParser.SWITCH, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(TemplateParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TemplateParser.COLON, i);
		}
		public ITerminalNode[] CASE() { return GetTokens(TemplateParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(TemplateParser.CASE, i);
		}
		public ITerminalNode[] BREACK() { return GetTokens(TemplateParser.BREACK); }
		public ITerminalNode BREACK(int i) {
			return GetToken(TemplateParser.BREACK, i);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 8, RULE_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; _localctx.keywordA = Match(SWITCH);
			State = 67; Match(PARENTHESES_L);
			State = 68; _localctx.condition = expr(0);
			State = 69; Match(PARENTHESES_R);
			State = 70; Match(BRACE_L);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE) {
				{
				{
				State = 71; _localctx._CASE = Match(CASE);
				_localctx._keywordB.Add(_localctx._CASE);
				State = 72; expr(0);
				State = 73; Match(COLON);
				State = 74; expr(0);
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BREACK) {
					{
					State = 75; Match(BREACK);
					}
				}

				}
				}
				State = 82;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 83; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public IToken keyword;
		public ExprContext condition;
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode WHILE() { return GetToken(TemplateParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 10, RULE_while);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; _localctx.keyword = Match(WHILE);
			State = 86; Match(PARENTHESES_L);
			State = 87; _localctx.condition = expr(0);
			State = 88; Match(PARENTHESES_R);
			State = 89; Match(BRACE_L);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREACK) | (1L << CONTINUE) | (1L << IDENT))) != 0)) {
				{
				State = 92;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case INCREMENT:
				case DECREMENT:
				case SUB:
				case PARENTHESES_L:
				case LOGIC_NOT:
				case BIT_INVERT:
				case VAR:
				case IF:
				case SWITCH:
				case WHILE:
				case DO:
				case FOR:
				case FOREACH:
				case BREACK:
				case CONTINUE:
				case IDENT:
					{
					State = 90; code();
					}
					break;
				case TEXT:
					{
					State = 91; Match(TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 97; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DowhileContext : ParserRuleContext {
		public IToken keywordA;
		public IToken keywordB;
		public ExprContext condition;
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode DO() { return GetToken(TemplateParser.DO, 0); }
		public ITerminalNode WHILE() { return GetToken(TemplateParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public DowhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dowhile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterDowhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitDowhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDowhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DowhileContext dowhile() {
		DowhileContext _localctx = new DowhileContext(Context, State);
		EnterRule(_localctx, 12, RULE_dowhile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; _localctx.keywordA = Match(DO);
			State = 100; Match(BRACE_L);
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREACK) | (1L << CONTINUE) | (1L << IDENT))) != 0)) {
				{
				State = 103;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case INCREMENT:
				case DECREMENT:
				case SUB:
				case PARENTHESES_L:
				case LOGIC_NOT:
				case BIT_INVERT:
				case VAR:
				case IF:
				case SWITCH:
				case WHILE:
				case DO:
				case FOR:
				case FOREACH:
				case BREACK:
				case CONTINUE:
				case IDENT:
					{
					State = 101; code();
					}
					break;
				case TEXT:
					{
					State = 102; Match(TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 108; Match(BRACE_R);
			State = 109; _localctx.keywordB = Match(WHILE);
			State = 110; Match(PARENTHESES_L);
			State = 111; _localctx.condition = expr(0);
			State = 112; Match(PARENTHESES_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		public IToken keyword;
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(TemplateParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(TemplateParser.SEMICOLON, i);
		}
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode FOR() { return GetToken(TemplateParser.FOR, 0); }
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 14, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; _localctx.keyword = Match(FOR);
			State = 115; Match(PARENTHESES_L);
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREACK) | (1L << CONTINUE) | (1L << IDENT))) != 0)) {
				{
				State = 116; code();
				}
			}

			State = 119; Match(SEMICOLON);
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREACK) | (1L << CONTINUE) | (1L << IDENT))) != 0)) {
				{
				State = 120; code();
				}
			}

			State = 123; Match(SEMICOLON);
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREACK) | (1L << CONTINUE) | (1L << IDENT))) != 0)) {
				{
				State = 124; code();
				}
			}

			State = 127; Match(PARENTHESES_R);
			State = 128; Match(BRACE_L);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREACK) | (1L << CONTINUE) | (1L << IDENT))) != 0)) {
				{
				State = 131;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case INCREMENT:
				case DECREMENT:
				case SUB:
				case PARENTHESES_L:
				case LOGIC_NOT:
				case BIT_INVERT:
				case VAR:
				case IF:
				case SWITCH:
				case WHILE:
				case DO:
				case FOR:
				case FOREACH:
				case BREACK:
				case CONTINUE:
				case IDENT:
					{
					State = 129; code();
					}
					break;
				case TEXT:
					{
					State = 130; Match(TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 136; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		public IToken keywordA;
		public IToken keywordB;
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode FOREACH() { return GetToken(TemplateParser.FOREACH, 0); }
		public ITerminalNode IN() { return GetToken(TemplateParser.IN, 0); }
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterForeach(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitForeach(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(Context, State);
		EnterRule(_localctx, 16, RULE_foreach);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; _localctx.keywordA = Match(FOREACH);
			State = 139; Match(PARENTHESES_L);
			State = 140; code();
			State = 141; _localctx.keywordB = Match(IN);
			State = 142; code();
			State = 143; Match(PARENTHESES_R);
			State = 144; Match(BRACE_L);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREACK) | (1L << CONTINUE) | (1L << IDENT))) != 0)) {
				{
				State = 147;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case INCREMENT:
				case DECREMENT:
				case SUB:
				case PARENTHESES_L:
				case LOGIC_NOT:
				case BIT_INVERT:
				case VAR:
				case IF:
				case SWITCH:
				case WHILE:
				case DO:
				case FOR:
				case FOREACH:
				case BREACK:
				case CONTINUE:
				case IDENT:
					{
					State = 145; code();
					}
					break;
				case TEXT:
					{
					State = 146; Match(TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 152; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext r;
		public ExprContext l;
		public ExprCallContext call;
		public ExprPropContext prop;
		public IToken op;
		public IToken t;
		public ExprValueContext v;
		public ITerminalNode BREACK() { return GetToken(TemplateParser.BREACK, 0); }
		public ITerminalNode CONTINUE() { return GetToken(TemplateParser.CONTINUE, 0); }
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprCallContext exprCall() {
			return GetRuleContext<ExprCallContext>(0);
		}
		public ExprPropContext exprProp() {
			return GetRuleContext<ExprPropContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(TemplateParser.SUB, 0); }
		public ITerminalNode IDENT() { return GetToken(TemplateParser.IDENT, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TemplateParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(TemplateParser.DECREMENT, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(TemplateParser.LOGIC_NOT, 0); }
		public ITerminalNode BIT_INVERT() { return GetToken(TemplateParser.BIT_INVERT, 0); }
		public ExprValueContext exprValue() {
			return GetRuleContext<ExprValueContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(TemplateParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(TemplateParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(TemplateParser.MOD, 0); }
		public ITerminalNode ADD() { return GetToken(TemplateParser.ADD, 0); }
		public ITerminalNode SHIFTL() { return GetToken(TemplateParser.SHIFTL, 0); }
		public ITerminalNode SHIFTR() { return GetToken(TemplateParser.SHIFTR, 0); }
		public ITerminalNode LESS() { return GetToken(TemplateParser.LESS, 0); }
		public ITerminalNode LESSEQUAL() { return GetToken(TemplateParser.LESSEQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TemplateParser.GREATER, 0); }
		public ITerminalNode GREATEREQUAL() { return GetToken(TemplateParser.GREATEREQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TemplateParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(TemplateParser.NOTEQUAL, 0); }
		public ITerminalNode BIT_AND() { return GetToken(TemplateParser.BIT_AND, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(TemplateParser.BIT_XOR, 0); }
		public ITerminalNode BIT_OR() { return GetToken(TemplateParser.BIT_OR, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(TemplateParser.LOGIC_AND, 0); }
		public ITerminalNode LOGIC_OR() { return GetToken(TemplateParser.LOGIC_OR, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 155; Match(BREACK);
				}
				break;
			case 2:
				{
				State = 156; Match(CONTINUE);
				}
				break;
			case 3:
				{
				State = 157; Match(PARENTHESES_L);
				State = 158; _localctx.r = expr(0);
				State = 159; Match(PARENTHESES_R);
				}
				break;
			case 4:
				{
				State = 161; _localctx.call = exprCall();
				}
				break;
			case 5:
				{
				State = 162; _localctx.prop = exprProp();
				}
				break;
			case 6:
				{
				State = 163; _localctx.op = Match(SUB);
				State = 164; _localctx.r = expr(27);
				}
				break;
			case 7:
				{
				State = 165; Match(PARENTHESES_L);
				State = 166; _localctx.t = Match(IDENT);
				State = 167; Match(PARENTHESES_R);
				State = 168; _localctx.r = expr(26);
				}
				break;
			case 8:
				{
				State = 169; _localctx.op = Match(INCREMENT);
				State = 170; _localctx.r = expr(25);
				}
				break;
			case 9:
				{
				State = 171; _localctx.op = Match(DECREMENT);
				State = 172; _localctx.r = expr(23);
				}
				break;
			case 10:
				{
				State = 173; _localctx.op = Match(LOGIC_NOT);
				State = 174; _localctx.r = expr(21);
				}
				break;
			case 11:
				{
				State = 175; _localctx.op = Match(BIT_INVERT);
				State = 176; _localctx.r = expr(20);
				}
				break;
			case 12:
				{
				State = 177; _localctx.v = exprValue();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 240;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 238;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 180;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 181; _localctx.op = Match(MUL);
						State = 182; _localctx.r = expr(20);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 183;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 184; _localctx.op = Match(DIV);
						State = 185; _localctx.r = expr(19);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 186;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 187; _localctx.op = Match(MOD);
						State = 188; _localctx.r = expr(18);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 189;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 190; _localctx.op = Match(ADD);
						State = 191; _localctx.r = expr(17);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 192;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 193; _localctx.op = Match(SUB);
						State = 194; _localctx.r = expr(16);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 195;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 196; _localctx.op = Match(SHIFTL);
						State = 197; _localctx.r = expr(15);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 198;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 199; _localctx.op = Match(SHIFTR);
						State = 200; _localctx.r = expr(14);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 201;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 202; _localctx.op = Match(LESS);
						State = 203; _localctx.r = expr(13);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 204;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 205; _localctx.op = Match(LESSEQUAL);
						State = 206; _localctx.r = expr(12);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 207;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 208; _localctx.op = Match(GREATER);
						State = 209; _localctx.r = expr(11);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 210;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 211; _localctx.op = Match(GREATEREQUAL);
						State = 212; _localctx.r = expr(10);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 213;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 214; _localctx.op = Match(EQUAL);
						State = 215; _localctx.r = expr(9);
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 216;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 217; _localctx.op = Match(NOTEQUAL);
						State = 218; _localctx.r = expr(8);
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 219;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 220; _localctx.op = Match(BIT_AND);
						State = 221; _localctx.r = expr(7);
						}
						break;
					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 222;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 223; _localctx.op = Match(BIT_XOR);
						State = 224; _localctx.r = expr(6);
						}
						break;
					case 16:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 225;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 226; _localctx.op = Match(BIT_OR);
						State = 227; _localctx.r = expr(5);
						}
						break;
					case 17:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 228;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 229; _localctx.op = Match(LOGIC_AND);
						State = 230; _localctx.r = expr(4);
						}
						break;
					case 18:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 231;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 232; _localctx.op = Match(LOGIC_OR);
						State = 233; _localctx.r = expr(3);
						}
						break;
					case 19:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.r = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 234;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 235; _localctx.op = Match(INCREMENT);
						}
						break;
					case 20:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.r = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 236;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 237; _localctx.op = Match(DECREMENT);
						}
						break;
					}
					} 
				}
				State = 242;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,22,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprCallContext : ParserRuleContext {
		public IToken _IDENT;
		public IList<IToken> _names = new List<IToken>();
		public IToken op;
		public ExprContext _expr;
		public IList<ExprContext> _args = new List<ExprContext>();
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(TemplateParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(TemplateParser.IDENT, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TemplateParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TemplateParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TemplateParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TemplateParser.COMMA, i);
		}
		public ExprCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExprCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExprCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprCallContext exprCall() {
		ExprCallContext _localctx = new ExprCallContext(Context, State);
		EnterRule(_localctx, 20, RULE_exprCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; _localctx._IDENT = Match(IDENT);
			_localctx._names.Add(_localctx._IDENT);
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 244; _localctx.op = Match(DOT);
				State = 245; _localctx._IDENT = Match(IDENT);
				_localctx._names.Add(_localctx._IDENT);
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 251; Match(PARENTHESES_L);
			{
			State = 252; _localctx._expr = expr(0);
			_localctx._args.Add(_localctx._expr);
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 253; Match(COMMA);
				State = 254; _localctx._expr = expr(0);
				_localctx._args.Add(_localctx._expr);
				}
				}
				State = 259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 260; Match(PARENTHESES_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprPropContext : ParserRuleContext {
		public IToken _IDENT;
		public IList<IToken> _names = new List<IToken>();
		public IToken op;
		public ITerminalNode[] IDENT() { return GetTokens(TemplateParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(TemplateParser.IDENT, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TemplateParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TemplateParser.DOT, i);
		}
		public ExprPropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprProp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExprProp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExprProp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprProp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprPropContext exprProp() {
		ExprPropContext _localctx = new ExprPropContext(Context, State);
		EnterRule(_localctx, 22, RULE_exprProp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 262; _localctx._IDENT = Match(IDENT);
			_localctx._names.Add(_localctx._IDENT);
			State = 267;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 263; _localctx.op = Match(DOT);
					State = 264; _localctx._IDENT = Match(IDENT);
					_localctx._names.Add(_localctx._IDENT);
					}
					} 
				}
				State = 269;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprValueContext : ParserRuleContext {
		public IToken integerValue;
		public IToken floatValue;
		public IToken boolValue;
		public IToken stringValue;
		public ITerminalNode INTEGER() { return GetToken(TemplateParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(TemplateParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(TemplateParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(TemplateParser.STRING, 0); }
		public ExprValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExprValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExprValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprValueContext exprValue() {
		ExprValueContext _localctx = new ExprValueContext(Context, State);
		EnterRule(_localctx, 24, RULE_exprValue);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 270; _localctx.integerValue = Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 271; _localctx.floatValue = Match(FLOAT);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 272; _localctx.boolValue = Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 273; _localctx.stringValue = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 19);
		case 1: return Precpred(Context, 18);
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 5);
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 24);
		case 19: return Precpred(Context, 22);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x35', '\x117', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x1F', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\"', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x5', '\x3', ',', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', '\x32', '\n', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\x35', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'>', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x41', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'O', '\n', '\x6', '\a', '\x6', 'Q', 
		'\n', '\x6', '\f', '\x6', '\xE', '\x6', 'T', '\v', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '_', '\n', '\a', '\f', '\a', 
		'\xE', '\a', '\x62', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'j', '\n', '\b', '\f', 
		'\b', '\xE', '\b', 'm', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', 'x', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'|', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x80', '\n', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\x86', '\n', '\t', '\f', '\t', '\xE', '\t', '\x89', '\v', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', 
		'\n', '\x96', '\n', '\n', '\f', '\n', '\xE', '\n', '\x99', '\v', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\xB5', 
		'\n', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\a', '\v', '\xF1', 
		'\n', '\v', '\f', '\v', '\xE', '\v', '\xF4', '\v', '\v', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', '\xF9', '\n', '\f', '\f', '\f', 
		'\xE', '\f', '\xFC', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x102', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x105', '\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\a', '\r', '\x10C', '\n', '\r', '\f', '\r', '\xE', '\r', 
		'\x10F', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', '\x115', '\n', '\xE', '\x3', '\xE', '\x2', '\x3', 
		'\x14', '\xF', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x2', '\x2', '\x2', '\x148', '\x2', ' ', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '+', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'-', '\x3', '\x2', '\x2', '\x2', '\b', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x44', '\x3', '\x2', '\x2', '\x2', '\f', 'W', '\x3', '\x2', '\x2', 
		'\x2', '\xE', '\x65', '\x3', '\x2', '\x2', '\x2', '\x10', 't', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\xB4', '\x3', '\x2', '\x2', '\x2', '\x16', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x108', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x114', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x1F', '\a', '\x4', '\x2', '\x2', '\x1D', 
		'\x1F', '\x5', '\x4', '\x3', '\x2', '\x1E', '\x1C', '\x3', '\x2', '\x2', 
		'\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', '\"', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\x3', '\x2', '\x2', '\x2', '!', '\x3', '\x3', '\x2', '\x2', '\x2', '\"', 
		' ', '\x3', '\x2', '\x2', '\x2', '#', ',', '\x5', '\x6', '\x4', '\x2', 
		'$', ',', '\x5', '\b', '\x5', '\x2', '%', ',', '\x5', '\n', '\x6', '\x2', 
		'&', ',', '\x5', '\f', '\a', '\x2', '\'', ',', '\x5', '\xE', '\b', '\x2', 
		'(', ',', '\x5', '\x10', '\t', '\x2', ')', ',', '\x5', '\x12', '\n', '\x2', 
		'*', ',', '\x5', '\x14', '\v', '\x2', '+', '#', '\x3', '\x2', '\x2', '\x2', 
		'+', '$', '\x3', '\x2', '\x2', '\x2', '+', '%', '\x3', '\x2', '\x2', '\x2', 
		'+', '&', '\x3', '\x2', '\x2', '\x2', '+', '\'', '\x3', '\x2', '\x2', 
		'\x2', '+', '(', '\x3', '\x2', '\x2', '\x2', '+', ')', '\x3', '\x2', '\x2', 
		'\x2', '+', '*', '\x3', '\x2', '\x2', '\x2', ',', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '-', '.', '\a', '(', '\x2', '\x2', '.', '\x31', '\a', '\x33', 
		'\x2', '\x2', '/', '\x30', '\a', ' ', '\x2', '\x2', '\x30', '\x32', '\x5', 
		'\x14', '\v', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x35', '\a', '\'', '\x2', '\x2', '\x34', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\a', ')', '\x2', '\x2', 
		'\x37', '\x38', '\a', '\x13', '\x2', '\x2', '\x38', '\x39', '\x5', '\x14', 
		'\v', '\x2', '\x39', ':', '\a', '\x14', '\x2', '\x2', ':', '?', '\a', 
		'\n', '\x2', '\x2', ';', '>', '\x5', '\x4', '\x3', '\x2', '<', '>', '\a', 
		'\x4', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', '=', '<', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x41', '\x3', '\x2', '\x2', '\x2', '?', '=', 
		'\x3', '\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x42', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\v', '\x2', '\x2', '\x43', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x44', '\x45', '\a', '*', '\x2', '\x2', '\x45', 
		'\x46', '\a', '\x13', '\x2', '\x2', '\x46', 'G', '\x5', '\x14', '\v', 
		'\x2', 'G', 'H', '\a', '\x14', '\x2', '\x2', 'H', 'R', '\a', '\n', '\x2', 
		'\x2', 'I', 'J', '\a', '+', '\x2', '\x2', 'J', 'K', '\x5', '\x14', '\v', 
		'\x2', 'K', 'L', '\a', '&', '\x2', '\x2', 'L', 'N', '\x5', '\x14', '\v', 
		'\x2', 'M', 'O', '\a', '\x31', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'I', '\x3', '\x2', '\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'U', '\x3', '\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\a', '\v', '\x2', '\x2', 'V', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'W', 'X', '\a', ',', '\x2', '\x2', 'X', 'Y', '\a', '\x13', '\x2', 
		'\x2', 'Y', 'Z', '\x5', '\x14', '\v', '\x2', 'Z', '[', '\a', '\x14', '\x2', 
		'\x2', '[', '`', '\a', '\n', '\x2', '\x2', '\\', '_', '\x5', '\x4', '\x3', 
		'\x2', ']', '_', '\a', '\x4', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', 
		'\x2', '^', ']', '\x3', '\x2', '\x2', '\x2', '_', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '`', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x61', '\x63', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'`', '\x3', '\x2', '\x2', '\x2', '\x63', '\x64', '\a', '\v', '\x2', '\x2', 
		'\x64', '\r', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\a', '-', '\x2', 
		'\x2', '\x66', 'k', '\a', '\n', '\x2', '\x2', 'g', 'j', '\x5', '\x4', 
		'\x3', '\x2', 'h', 'j', '\a', '\x4', '\x2', '\x2', 'i', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'm', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'i', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'n', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'o', '\a', '\v', '\x2', '\x2', 'o', 'p', '\a', ',', 
		'\x2', '\x2', 'p', 'q', '\a', '\x13', '\x2', '\x2', 'q', 'r', '\x5', '\x14', 
		'\v', '\x2', 'r', 's', '\a', '\x14', '\x2', '\x2', 's', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 't', 'u', '\a', '.', '\x2', '\x2', 'u', 'w', '\a', 
		'\x13', '\x2', '\x2', 'v', 'x', '\x5', '\x4', '\x3', '\x2', 'w', 'v', 
		'\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', '\x2', 'x', 
		'y', '\x3', '\x2', '\x2', '\x2', 'y', '{', '\a', '\'', '\x2', '\x2', 'z', 
		'|', '\x5', '\x4', '\x3', '\x2', '{', 'z', '\x3', '\x2', '\x2', '\x2', 
		'{', '|', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', 
		'}', '\x7F', '\a', '\'', '\x2', '\x2', '~', '\x80', '\x5', '\x4', '\x3', 
		'\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\a', '\x14', '\x2', '\x2', '\x82', '\x87', '\a', '\n', '\x2', 
		'\x2', '\x83', '\x86', '\x5', '\x4', '\x3', '\x2', '\x84', '\x86', '\a', 
		'\x4', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x86', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8B', '\a', '\v', '\x2', 
		'\x2', '\x8B', '\x11', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', 
		'/', '\x2', '\x2', '\x8D', '\x8E', '\a', '\x13', '\x2', '\x2', '\x8E', 
		'\x8F', '\x5', '\x4', '\x3', '\x2', '\x8F', '\x90', '\a', '\x30', '\x2', 
		'\x2', '\x90', '\x91', '\x5', '\x4', '\x3', '\x2', '\x91', '\x92', '\a', 
		'\x14', '\x2', '\x2', '\x92', '\x97', '\a', '\n', '\x2', '\x2', '\x93', 
		'\x96', '\x5', '\x4', '\x3', '\x2', '\x94', '\x96', '\a', '\x4', '\x2', 
		'\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x99', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', '\v', '\x2', '\x2', '\x9B', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\b', '\v', '\x1', 
		'\x2', '\x9D', '\xB5', '\a', '\x31', '\x2', '\x2', '\x9E', '\xB5', '\a', 
		'\x32', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x13', '\x2', '\x2', '\xA0', 
		'\xA1', '\x5', '\x14', '\v', '\x2', '\xA1', '\xA2', '\a', '\x14', '\x2', 
		'\x2', '\xA2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xB5', '\x5', 
		'\x16', '\f', '\x2', '\xA4', '\xB5', '\x5', '\x18', '\r', '\x2', '\xA5', 
		'\xA6', '\a', '\x12', '\x2', '\x2', '\xA6', '\xB5', '\x5', '\x14', '\v', 
		'\x1D', '\xA7', '\xA8', '\a', '\x13', '\x2', '\x2', '\xA8', '\xA9', '\a', 
		'\x33', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x14', '\x2', '\x2', '\xAA', 
		'\xB5', '\x5', '\x14', '\v', '\x1C', '\xAB', '\xAC', '\a', '\f', '\x2', 
		'\x2', '\xAC', '\xB5', '\x5', '\x14', '\v', '\x1B', '\xAD', '\xAE', '\a', 
		'\r', '\x2', '\x2', '\xAE', '\xB5', '\x5', '\x14', '\v', '\x19', '\xAF', 
		'\xB0', '\a', '\x18', '\x2', '\x2', '\xB0', '\xB5', '\x5', '\x14', '\v', 
		'\x17', '\xB1', '\xB2', '\a', '\x19', '\x2', '\x2', '\xB2', '\xB5', '\x5', 
		'\x14', '\v', '\x16', '\xB3', '\xB5', '\x5', '\x1A', '\xE', '\x2', '\xB4', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xA3', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xA5', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB3', '\x3', '\x2', '\x2', 
		'\x2', '\xB5', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\f', 
		'\x15', '\x2', '\x2', '\xB7', '\xB8', '\a', '\xE', '\x2', '\x2', '\xB8', 
		'\xF1', '\x5', '\x14', '\v', '\x16', '\xB9', '\xBA', '\f', '\x14', '\x2', 
		'\x2', '\xBA', '\xBB', '\a', '\xF', '\x2', '\x2', '\xBB', '\xF1', '\x5', 
		'\x14', '\v', '\x15', '\xBC', '\xBD', '\f', '\x13', '\x2', '\x2', '\xBD', 
		'\xBE', '\a', '\x10', '\x2', '\x2', '\xBE', '\xF1', '\x5', '\x14', '\v', 
		'\x14', '\xBF', '\xC0', '\f', '\x12', '\x2', '\x2', '\xC0', '\xC1', '\a', 
		'\x11', '\x2', '\x2', '\xC1', '\xF1', '\x5', '\x14', '\v', '\x13', '\xC2', 
		'\xC3', '\f', '\x11', '\x2', '\x2', '\xC3', '\xC4', '\a', '\x12', '\x2', 
		'\x2', '\xC4', '\xF1', '\x5', '\x14', '\v', '\x12', '\xC5', '\xC6', '\f', 
		'\x10', '\x2', '\x2', '\xC6', '\xC7', '\a', '\x1A', '\x2', '\x2', '\xC7', 
		'\xF1', '\x5', '\x14', '\v', '\x11', '\xC8', '\xC9', '\f', '\xF', '\x2', 
		'\x2', '\xC9', '\xCA', '\a', '\x1B', '\x2', '\x2', '\xCA', '\xF1', '\x5', 
		'\x14', '\v', '\x10', '\xCB', '\xCC', '\f', '\xE', '\x2', '\x2', '\xCC', 
		'\xCD', '\a', '\x1C', '\x2', '\x2', '\xCD', '\xF1', '\x5', '\x14', '\v', 
		'\xF', '\xCE', '\xCF', '\f', '\r', '\x2', '\x2', '\xCF', '\xD0', '\a', 
		'\x1D', '\x2', '\x2', '\xD0', '\xF1', '\x5', '\x14', '\v', '\xE', '\xD1', 
		'\xD2', '\f', '\f', '\x2', '\x2', '\xD2', '\xD3', '\a', '\x1E', '\x2', 
		'\x2', '\xD3', '\xF1', '\x5', '\x14', '\v', '\r', '\xD4', '\xD5', '\f', 
		'\v', '\x2', '\x2', '\xD5', '\xD6', '\a', '\x1F', '\x2', '\x2', '\xD6', 
		'\xF1', '\x5', '\x14', '\v', '\f', '\xD7', '\xD8', '\f', '\n', '\x2', 
		'\x2', '\xD8', '\xD9', '\a', ' ', '\x2', '\x2', '\xD9', '\xF1', '\x5', 
		'\x14', '\v', '\v', '\xDA', '\xDB', '\f', '\t', '\x2', '\x2', '\xDB', 
		'\xDC', '\a', '\x17', '\x2', '\x2', '\xDC', '\xF1', '\x5', '\x14', '\v', 
		'\n', '\xDD', '\xDE', '\f', '\b', '\x2', '\x2', '\xDE', '\xDF', '\a', 
		'#', '\x2', '\x2', '\xDF', '\xF1', '\x5', '\x14', '\v', '\t', '\xE0', 
		'\xE1', '\f', '\a', '\x2', '\x2', '\xE1', '\xE2', '\a', '%', '\x2', '\x2', 
		'\xE2', '\xF1', '\x5', '\x14', '\v', '\b', '\xE3', '\xE4', '\f', '\x6', 
		'\x2', '\x2', '\xE4', '\xE5', '\a', '$', '\x2', '\x2', '\xE5', '\xF1', 
		'\x5', '\x14', '\v', '\a', '\xE6', '\xE7', '\f', '\x5', '\x2', '\x2', 
		'\xE7', '\xE8', '\a', '!', '\x2', '\x2', '\xE8', '\xF1', '\x5', '\x14', 
		'\v', '\x6', '\xE9', '\xEA', '\f', '\x4', '\x2', '\x2', '\xEA', '\xEB', 
		'\a', '\"', '\x2', '\x2', '\xEB', '\xF1', '\x5', '\x14', '\v', '\x5', 
		'\xEC', '\xED', '\f', '\x1A', '\x2', '\x2', '\xED', '\xF1', '\a', '\f', 
		'\x2', '\x2', '\xEE', '\xEF', '\f', '\x18', '\x2', '\x2', '\xEF', '\xF1', 
		'\a', '\r', '\x2', '\x2', '\xF0', '\xB6', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xBC', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xC2', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xD7', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xDA', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xDD', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xE0', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xE3', '\x3', '\x2', '\x2', '\x2', 
		'\xF0', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xE9', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEE', 
		'\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', '\x2', '\x2', '\x2', 
		'\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\xF3', '\x15', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xF5', '\xFA', '\a', '\x33', '\x2', '\x2', 
		'\xF6', '\xF7', '\a', '\x15', '\x2', '\x2', '\xF7', '\xF9', '\a', '\x33', 
		'\x2', '\x2', '\xF8', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFC', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFD', '\xFE', 
		'\a', '\x13', '\x2', '\x2', '\xFE', '\x103', '\x5', '\x14', '\v', '\x2', 
		'\xFF', '\x100', '\a', '\x16', '\x2', '\x2', '\x100', '\x102', '\x5', 
		'\x14', '\v', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x105', '\x3', '\x2', '\x2', '\x2', '\x103', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x105', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x106', '\x107', '\a', '\x14', '\x2', '\x2', '\x107', '\x17', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x10D', '\a', '\x33', '\x2', '\x2', '\x109', 
		'\x10A', '\a', '\x15', '\x2', '\x2', '\x10A', '\x10C', '\a', '\x33', '\x2', 
		'\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10F', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x10D', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x115', '\a', '\x6', '\x2', '\x2', '\x111', '\x115', '\a', '\a', '\x2', 
		'\x2', '\x112', '\x115', '\a', '\b', '\x2', '\x2', '\x113', '\x115', '\a', 
		'\t', '\x2', '\x2', '\x114', '\x110', '\x3', '\x2', '\x2', '\x2', '\x114', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x114', '\x112', '\x3', '\x2', '\x2', 
		'\x2', '\x114', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', ' ', '+', '\x31', '\x34', 
		'=', '?', 'N', 'R', '^', '`', 'i', 'k', 'w', '{', '\x7F', '\x85', '\x87', 
		'\x95', '\x97', '\xB4', '\xF0', '\xF2', '\xFA', '\x103', '\x10D', '\x114',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
