//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TemplateLexer.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class TemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, CLOSE=3, INTEGER=4, FLOAT=5, BOOL=6, STRING=7, IDENT=8, 
		COMMENT=9, MUL=10, DIV=11, ADD=12, SUB=13, BRACEL=14, BRACER=15, IF=16, 
		THEN=17, END=18, DOT=19, WS=20;
	public const int
		CODE_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "CODE_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPEN", "TEXT", "CLOSE", "INTEGER", "FLOAT", "BOOL", "STRING", "IDENT", 
		"COMMENT", "MUL", "DIV", "ADD", "SUB", "BRACEL", "BRACER", "IF", "THEN", 
		"END", "DOT", "WS"
	};


	protected bool IsBeginTag()
	{
		return (InputStream.LA(1)=='<' && InputStream.LA(2)=='%');
	}


	public TemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'<%'", null, "'%>'", null, null, null, null, null, null, "'*'", 
		"'/'", "'+'", "'-'", "'('", "')'", "'if'", "'then'", "'end'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "CLOSE", "INTEGER", "FLOAT", "BOOL", "STRING", "IDENT", 
		"COMMENT", "MUL", "DIV", "ADD", "SUB", "BRACEL", "BRACER", "IF", "THEN", 
		"END", "DOT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1 : return TEXT_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool TEXT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return !IsBeginTag();
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x16', '\xAF', '\b', '\x1', '\b', '\x1', '\x4', '\x2', 
		'\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', 
		'\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', 
		'\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', 
		'\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', 
		'\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', 
		'\x10', '\x4', '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', 
		'\x13', '\t', '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', 
		'\x15', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '\x34', '\n', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\x35', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x6', '\x5', '>', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', '?', '\x3', '\x6', '\x6', '\x6', '\x43', 
		'\n', '\x6', '\r', '\x6', '\xE', '\x6', '\x44', '\x3', '\x6', '\x3', '\x6', 
		'\x6', '\x6', 'I', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'J', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', 'O', '\n', '\x6', '\x3', '\x6', '\x6', 
		'\x6', 'R', '\n', '\x6', '\r', '\x6', '\xE', '\x6', 'S', '\x5', '\x6', 
		'V', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x61', '\n', '\a', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x65', 
		'\n', '\b', '\f', '\b', '\xE', '\b', 'h', '\v', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\a', '\t', 'n', '\n', '\t', '\f', '\t', 
		'\xE', '\t', 'q', '\v', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', 'w', '\n', '\n', '\f', '\n', '\xE', '\n', 'z', '\v', 
		'\n', '\x3', '\n', '\x5', '\n', '}', '\n', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x84', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\x87', '\v', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\x8B', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x15', '\x6', '\x15', '\xAA', '\n', '\x15', '\r', '\x15', '\xE', '\x15', 
		'\xAB', '\x3', '\x15', '\x3', '\x15', '\x4', '\x66', '\x85', '\x2', '\x16', 
		'\x4', '\x3', '\x6', '\x4', '\b', '\x5', '\n', '\x6', '\f', '\a', '\xE', 
		'\b', '\x10', '\t', '\x12', '\n', '\x14', '\v', '\x16', '\f', '\x18', 
		'\r', '\x1A', '\xE', '\x1C', '\xF', '\x1E', '\x10', ' ', '\x11', '\"', 
		'\x12', '$', '\x13', '&', '\x14', '(', '\x15', '*', '\x16', '\x4', '\x2', 
		'\x3', '\t', '\x3', '\x2', '\x32', ';', '\x4', '\x2', 'G', 'G', 'g', 'g', 
		'\x4', '\x2', '-', '-', '/', '/', '\x5', '\x2', '\x43', '\\', '\x61', 
		'\x61', '\x63', '|', '\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', 
		'\x61', '\x63', '|', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x5', '\x2', 
		'\v', '\f', '\xF', '\xF', '\"', '\"', '\x2', '\xBC', '\x2', '\x4', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x6', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\b', '\x3', '\x2', '\x2', '\x2', '\x3', '\n', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\f', '\x3', '\x2', '\x2', '\x2', '\x3', '\xE', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x10', '\x3', '\x2', '\x2', '\x2', '\x3', '\x12', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x14', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x3', '\x18', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x1E', '\x3', '\x2', '\x2', '\x2', '\x3', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x3', '\"', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '$', '\x3', '\x2', '\x2', '\x2', '\x3', '&', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '(', '\x3', '\x2', '\x2', '\x2', '\x3', '*', '\x3', '\x2', 
		'\x2', '\x2', '\x4', ',', '\x3', '\x2', '\x2', '\x2', '\x6', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x37', '\x3', '\x2', '\x2', '\x2', '\n', '=', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '`', '\x3', '\x2', '\x2', '\x2', '\x10', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x12', 'k', '\x3', '\x2', '\x2', '\x2', '\x14', '\x8A', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x8E', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x90', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x92', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x94', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x96', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\x98', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '$', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xA2', '\x3', '\x2', '\x2', '\x2', '(', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xA9', '\x3', '\x2', '\x2', '\x2', ',', '-', '\a', 
		'>', '\x2', '\x2', '-', '.', '\a', '\'', '\x2', '\x2', '.', '/', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\b', '\x2', '\x2', '\x2', '\x30', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x6', '\x3', '\x2', '\x2', 
		'\x32', '\x34', '\v', '\x2', '\x2', '\x2', '\x33', '\x31', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\x3', '\x2', '\x2', '\x2', 
		'\x36', '\a', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\'', 
		'\x2', '\x2', '\x38', '\x39', '\a', '@', '\x2', '\x2', '\x39', ':', '\x3', 
		'\x2', '\x2', '\x2', ':', ';', '\b', '\x4', '\x3', '\x2', ';', '\t', '\x3', 
		'\x2', '\x2', '\x2', '<', '>', '\t', '\x2', '\x2', '\x2', '=', '<', '\x3', 
		'\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', '?', '=', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x43', '\t', '\x2', '\x2', '\x2', 
		'\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'\x46', 'H', '\a', '\x30', '\x2', '\x2', 'G', 'I', '\t', '\x2', '\x2', 
		'\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 'I', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'U', '\x3', '\x2', '\x2', '\x2', 'L', 'N', '\t', '\x3', '\x2', 
		'\x2', 'M', 'O', '\t', '\x4', '\x2', '\x2', 'N', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 'O', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'R', '\t', '\x2', '\x2', '\x2', 'Q', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'L', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'V', '\r', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', 'v', '\x2', 
		'\x2', 'X', 'Y', '\a', 't', '\x2', '\x2', 'Y', 'Z', '\a', 'w', '\x2', 
		'\x2', 'Z', '\x61', '\a', 'g', '\x2', '\x2', '[', '\\', '\a', 'h', '\x2', 
		'\x2', '\\', ']', '\a', '\x63', '\x2', '\x2', ']', '^', '\a', 'n', '\x2', 
		'\x2', '^', '_', '\a', 'u', '\x2', '\x2', '_', '\x61', '\a', 'g', '\x2', 
		'\x2', '`', 'W', '\x3', '\x2', '\x2', '\x2', '`', '[', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\xF', '\x3', '\x2', '\x2', '\x2', '\x62', '\x66', '\a', 
		'$', '\x2', '\x2', '\x63', '\x65', '\v', '\x2', '\x2', '\x2', '\x64', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'i', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '$', '\x2', '\x2', 'j', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'k', 'o', '\t', '\x5', '\x2', '\x2', 'l', 
		'n', '\t', '\x6', '\x2', '\x2', 'm', 'l', '\x3', '\x2', '\x2', '\x2', 
		'n', 'q', '\x3', '\x2', '\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', '\x31', '\x2', 
		'\x2', 's', 't', '\a', '\x31', '\x2', '\x2', 't', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'u', 'w', '\n', '\a', '\x2', '\x2', 'v', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'z', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\x3', '\x2', '\x2', '\x2', 'y', '|', '\x3', '\x2', '\x2', 
		'\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', '{', '}', '\a', '\xF', '\x2', 
		'\x2', '|', '{', '\x3', '\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', 
		'\x2', '}', '~', '\x3', '\x2', '\x2', '\x2', '~', '\x8B', '\a', '\f', 
		'\x2', '\x2', '\x7F', '\x80', '\a', '\x31', '\x2', '\x2', '\x80', '\x81', 
		'\a', ',', '\x2', '\x2', '\x81', '\x85', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x84', '\v', '\x2', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x87', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x88', '\x3', '\x2', '\x2', '\x2', '\x87', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x88', '\x89', '\a', ',', '\x2', '\x2', '\x89', '\x8B', '\a', 
		'\x31', '\x2', '\x2', '\x8A', 'r', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\b', '\n', '\x4', '\x2', '\x8D', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x8E', '\x8F', '\a', ',', '\x2', '\x2', '\x8F', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x90', '\x91', '\a', '\x31', '\x2', 
		'\x2', '\x91', '\x19', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\a', 
		'-', '\x2', '\x2', '\x93', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x95', '\a', '/', '\x2', '\x2', '\x95', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x97', '\a', '*', '\x2', '\x2', '\x97', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x98', '\x99', '\a', '+', '\x2', '\x2', '\x99', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\a', 'k', '\x2', '\x2', 
		'\x9B', '\x9C', '\a', 'h', '\x2', '\x2', '\x9C', '#', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x9E', '\a', 'v', '\x2', '\x2', '\x9E', '\x9F', '\a', 
		'j', '\x2', '\x2', '\x9F', '\xA0', '\a', 'g', '\x2', '\x2', '\xA0', '\xA1', 
		'\a', 'p', '\x2', '\x2', '\xA1', '%', '\x3', '\x2', '\x2', '\x2', '\xA2', 
		'\xA3', '\a', 'g', '\x2', '\x2', '\xA3', '\xA4', '\a', 'p', '\x2', '\x2', 
		'\xA4', '\xA5', '\a', '\x66', '\x2', '\x2', '\xA5', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA7', '\a', '\x30', '\x2', '\x2', '\xA7', ')', 
		'\x3', '\x2', '\x2', '\x2', '\xA8', '\xAA', '\t', '\b', '\x2', '\x2', 
		'\xA9', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', 
		'\x2', '\x2', '\xAB', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'\xAD', '\xAE', '\b', '\x15', '\x5', '\x2', '\xAE', '+', '\x3', '\x2', 
		'\x2', '\x2', '\x13', '\x2', '\x3', '\x35', '?', '\x44', 'J', 'N', 'S', 
		'U', '`', '\x66', 'o', 'x', '|', '\x85', '\x8A', '\xAB', '\x6', '\x4', 
		'\x3', '\x2', '\x4', '\x2', '\x2', '\x2', '\x3', '\x2', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
