//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TemplateParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class TemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, CLOSE=3, INTEGER=4, FLOAT=5, BOOL=6, SET_DIV=7, SET_MUL=8, 
		SET_MOD=9, SET_ADD=10, SET_SUB=11, SET_SHIFTL=12, SET_SHIFTR=13, SET_BIT_AND=14, 
		SET_BIT_XOR=15, SET_BIT_OR=16, STRING=17, BRACE_L=18, BRACE_R=19, INCREMENT=20, 
		DECREMENT=21, MUL=22, DIV=23, MOD=24, ADD=25, SUB=26, PARENTHESES_L=27, 
		PARENTHESES_R=28, DOT=29, COMMA=30, NOTEQUAL=31, LOGIC_NOT=32, BIT_INVERT=33, 
		SHIFTL=34, SHIFTR=35, LESS=36, LESSEQUAL=37, GREATER=38, GREATEREQUAL=39, 
		EQUAL=40, LOGIC_AND=41, LOGIC_OR=42, BIT_AND=43, BIT_OR=44, BIT_XOR=45, 
		SET=46, COLON=47, SEMICOLON=48, VAR=49, IF=50, SWITCH=51, CASE=52, WHILE=53, 
		DO=54, FOR=55, FOREACH=56, IN=57, BREAK=58, CONTINUE=59, RETURN=60, IDENT=61, 
		COMMENT=62, WS=63;
	public const int
		RULE_document = 0, RULE_code = 1, RULE_text = 2, RULE_break = 3, RULE_continue = 4, 
		RULE_return = 5, RULE_var = 6, RULE_if = 7, RULE_switch = 8, RULE_while = 9, 
		RULE_dowhile = 10, RULE_for = 11, RULE_foreach = 12, RULE_expr = 13, RULE_exprCall = 14, 
		RULE_exprProp = 15, RULE_exprValue = 16;
	public static readonly string[] ruleNames = {
		"document", "code", "text", "break", "continue", "return", "var", "if", 
		"switch", "while", "dowhile", "for", "foreach", "expr", "exprCall", "exprProp", 
		"exprValue"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, "'/='", "'*='", "'%='", "'+='", 
		"'-='", "'<<='", "'>>='", "'&='", "'^='", "'|='", null, "'{'", "'}'", 
		"'++'", "'--'", "'*'", "'/'", "'%'", "'+'", "'-'", "'('", "')'", "'.'", 
		"','", "'!='", "'!'", "'~'", "'<<'", "'>>'", "'<'", "'<='", "'>'", "'>='", 
		"'=='", "'&&'", "'||'", "'&'", "'|'", "'^'", "'='", "':'", "';'", "'var'", 
		"'if'", "'switch'", "'case'", "'while'", "'do'", "'for'", "'foreach'", 
		"'in'", "'break'", "'continue'", "'return'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "CLOSE", "INTEGER", "FLOAT", "BOOL", "SET_DIV", 
		"SET_MUL", "SET_MOD", "SET_ADD", "SET_SUB", "SET_SHIFTL", "SET_SHIFTR", 
		"SET_BIT_AND", "SET_BIT_XOR", "SET_BIT_OR", "STRING", "BRACE_L", "BRACE_R", 
		"INCREMENT", "DECREMENT", "MUL", "DIV", "MOD", "ADD", "SUB", "PARENTHESES_L", 
		"PARENTHESES_R", "DOT", "COMMA", "NOTEQUAL", "LOGIC_NOT", "BIT_INVERT", 
		"SHIFTL", "SHIFTR", "LESS", "LESSEQUAL", "GREATER", "GREATEREQUAL", "EQUAL", 
		"LOGIC_AND", "LOGIC_OR", "BIT_AND", "BIT_OR", "BIT_XOR", "SET", "COLON", 
		"SEMICOLON", "VAR", "IF", "SWITCH", "CASE", "WHILE", "DO", "FOR", "FOREACH", 
		"IN", "BREAK", "CONTINUE", "RETURN", "IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << IDENT))) != 0)) {
				{
				{
				State = 34; code();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeContext : ParserRuleContext {
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(TemplateParser.SEMICOLON, 0); }
		public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		public SwitchContext @switch() {
			return GetRuleContext<SwitchContext>(0);
		}
		public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		public DowhileContext dowhile() {
			return GetRuleContext<DowhileContext>(0);
		}
		public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		public ForeachContext @foreach() {
			return GetRuleContext<ForeachContext>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public BreakContext @break() {
			return GetRuleContext<BreakContext>(0);
		}
		public ContinueContext @continue() {
			return GetRuleContext<ContinueContext>(0);
		}
		public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public CodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitCode(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCode(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CodeContext code() {
		CodeContext _localctx = new CodeContext(Context, State);
		EnterRule(_localctx, 2, RULE_code);
		int _la;
		try {
			State = 58;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40; var();
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 41; Match(SEMICOLON);
					}
				}

				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44; @if();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45; @switch();
				}
				break;
			case WHILE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 46; @while();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 5);
				{
				State = 47; dowhile();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 6);
				{
				State = 48; @for();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 7);
				{
				State = 49; @foreach();
				}
				break;
			case INTEGER:
			case FLOAT:
			case BOOL:
			case STRING:
			case INCREMENT:
			case DECREMENT:
			case SUB:
			case PARENTHESES_L:
			case LOGIC_NOT:
			case BIT_INVERT:
			case IDENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 50; expr(0);
				State = 52;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEMICOLON) {
					{
					State = 51; Match(SEMICOLON);
					}
				}

				}
				break;
			case TEXT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 54; text();
				}
				break;
			case BREAK:
				EnterOuterAlt(_localctx, 10);
				{
				State = 55; @break();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 56; @continue();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 12);
				{
				State = 57; @return();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(TemplateParser.TEXT, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 4, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60; Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(TemplateParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TemplateParser.SEMICOLON, 0); }
		public BreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterBreak(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitBreak(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakContext @break() {
		BreakContext _localctx = new BreakContext(Context, State);
		EnterRule(_localctx, 6, RULE_break);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62; Match(BREAK);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 63; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(TemplateParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TemplateParser.SEMICOLON, 0); }
		public ContinueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterContinue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitContinue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueContext @continue() {
		ContinueContext _localctx = new ContinueContext(Context, State);
		EnterRule(_localctx, 8, RULE_continue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(CONTINUE);
			State = 68;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 67; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(TemplateParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(TemplateParser.SEMICOLON, 0); }
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 10, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(RETURN);
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 71; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarContext : ParserRuleContext {
		public IToken keyword;
		public IToken key;
		public ExprContext value;
		public ITerminalNode VAR() { return GetToken(TemplateParser.VAR, 0); }
		public ITerminalNode IDENT() { return GetToken(TemplateParser.IDENT, 0); }
		public ITerminalNode SET() { return GetToken(TemplateParser.SET, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VarContext var() {
		VarContext _localctx = new VarContext(Context, State);
		EnterRule(_localctx, 12, RULE_var);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; _localctx.keyword = Match(VAR);
			State = 75; _localctx.key = Match(IDENT);
			State = 78;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET) {
				{
				State = 76; Match(SET);
				State = 77; _localctx.value = expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public IToken keyword;
		public ExprContext condition;
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode IF() { return GetToken(TemplateParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 14, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; _localctx.keyword = Match(IF);
			State = 81; Match(PARENTHESES_L);
			State = 82; _localctx.condition = expr(0);
			State = 83; Match(PARENTHESES_R);
			State = 84; Match(BRACE_L);
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << IDENT))) != 0)) {
				{
				{
				State = 85; code();
				}
				}
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 91; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchContext : ParserRuleContext {
		public IToken keywordA;
		public ExprContext condition;
		public IToken _CASE;
		public IList<IToken> _keywordB = new List<IToken>();
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode SWITCH() { return GetToken(TemplateParser.SWITCH, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] COLON() { return GetTokens(TemplateParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(TemplateParser.COLON, i);
		}
		public ITerminalNode[] CASE() { return GetTokens(TemplateParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(TemplateParser.CASE, i);
		}
		public ITerminalNode[] BREAK() { return GetTokens(TemplateParser.BREAK); }
		public ITerminalNode BREAK(int i) {
			return GetToken(TemplateParser.BREAK, i);
		}
		public SwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterSwitch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitSwitch(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchContext @switch() {
		SwitchContext _localctx = new SwitchContext(Context, State);
		EnterRule(_localctx, 16, RULE_switch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 93; _localctx.keywordA = Match(SWITCH);
			State = 94; Match(PARENTHESES_L);
			State = 95; _localctx.condition = expr(0);
			State = 96; Match(PARENTHESES_R);
			State = 97; Match(BRACE_L);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CASE) {
				{
				{
				State = 98; _localctx._CASE = Match(CASE);
				_localctx._keywordB.Add(_localctx._CASE);
				State = 99; expr(0);
				State = 100; Match(COLON);
				State = 101; expr(0);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BREAK) {
					{
					State = 102; Match(BREAK);
					}
				}

				}
				}
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 110; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		public IToken keyword;
		public ExprContext condition;
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode WHILE() { return GetToken(TemplateParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 18, RULE_while);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 112; _localctx.keyword = Match(WHILE);
			State = 113; Match(PARENTHESES_L);
			State = 114; _localctx.condition = expr(0);
			State = 115; Match(PARENTHESES_R);
			State = 116; Match(BRACE_L);
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << IDENT))) != 0)) {
				{
				{
				State = 117; code();
				}
				}
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 123; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DowhileContext : ParserRuleContext {
		public IToken keywordA;
		public IToken keywordB;
		public ExprContext condition;
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode DO() { return GetToken(TemplateParser.DO, 0); }
		public ITerminalNode WHILE() { return GetToken(TemplateParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public DowhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dowhile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterDowhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitDowhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDowhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DowhileContext dowhile() {
		DowhileContext _localctx = new DowhileContext(Context, State);
		EnterRule(_localctx, 20, RULE_dowhile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; _localctx.keywordA = Match(DO);
			State = 126; Match(BRACE_L);
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << IDENT))) != 0)) {
				{
				{
				State = 127; code();
				}
				}
				State = 132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 133; Match(BRACE_R);
			State = 134; _localctx.keywordB = Match(WHILE);
			State = 135; Match(PARENTHESES_L);
			State = 136; _localctx.condition = expr(0);
			State = 137; Match(PARENTHESES_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		public IToken keyword;
		public VarContext expr0;
		public ExprContext expr1;
		public ExprContext expr2;
		public ExprContext expr3;
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(TemplateParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(TemplateParser.SEMICOLON, i);
		}
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode FOR() { return GetToken(TemplateParser.FOR, 0); }
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public VarContext var() {
			return GetRuleContext<VarContext>(0);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 22, RULE_for);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 139; _localctx.keyword = Match(FOR);
			State = 140; Match(PARENTHESES_L);
			State = 143;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case VAR:
				{
				State = 141; _localctx.expr0 = var();
				}
				break;
			case INTEGER:
			case FLOAT:
			case BOOL:
			case STRING:
			case INCREMENT:
			case DECREMENT:
			case SUB:
			case PARENTHESES_L:
			case LOGIC_NOT:
			case BIT_INVERT:
			case IDENT:
				{
				State = 142; _localctx.expr1 = expr(0);
				}
				break;
			case SEMICOLON:
				break;
			default:
				break;
			}
			State = 145; Match(SEMICOLON);
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << IDENT))) != 0)) {
				{
				State = 146; _localctx.expr2 = expr(0);
				}
			}

			State = 149; Match(SEMICOLON);
			State = 151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << IDENT))) != 0)) {
				{
				State = 150; _localctx.expr3 = expr(0);
				}
			}

			State = 153; Match(PARENTHESES_R);
			State = 154; Match(BRACE_L);
			State = 158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << IDENT))) != 0)) {
				{
				{
				State = 155; code();
				}
				}
				State = 160;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 161; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForeachContext : ParserRuleContext {
		public IToken keywordA;
		public IToken keywordB;
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public CodeContext[] code() {
			return GetRuleContexts<CodeContext>();
		}
		public CodeContext code(int i) {
			return GetRuleContext<CodeContext>(i);
		}
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode BRACE_L() { return GetToken(TemplateParser.BRACE_L, 0); }
		public ITerminalNode BRACE_R() { return GetToken(TemplateParser.BRACE_R, 0); }
		public ITerminalNode FOREACH() { return GetToken(TemplateParser.FOREACH, 0); }
		public ITerminalNode IN() { return GetToken(TemplateParser.IN, 0); }
		public ForeachContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterForeach(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitForeach(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForeachContext @foreach() {
		ForeachContext _localctx = new ForeachContext(Context, State);
		EnterRule(_localctx, 24, RULE_foreach);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; _localctx.keywordA = Match(FOREACH);
			State = 164; Match(PARENTHESES_L);
			State = 165; code();
			State = 166; _localctx.keywordB = Match(IN);
			State = 167; code();
			State = 168; Match(PARENTHESES_R);
			State = 169; Match(BRACE_L);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << PARENTHESES_L) | (1L << LOGIC_NOT) | (1L << BIT_INVERT) | (1L << VAR) | (1L << IF) | (1L << SWITCH) | (1L << WHILE) | (1L << DO) | (1L << FOR) | (1L << FOREACH) | (1L << BREAK) | (1L << CONTINUE) | (1L << RETURN) | (1L << IDENT))) != 0)) {
				{
				{
				State = 170; code();
				}
				}
				State = 175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 176; Match(BRACE_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext l;
		public IToken op;
		public ExprContext r;
		public ExprCallContext call;
		public ExprPropContext prop;
		public ExprPropContext varName;
		public ExprValueContext v;
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprCallContext exprCall() {
			return GetRuleContext<ExprCallContext>(0);
		}
		public ExprPropContext exprProp() {
			return GetRuleContext<ExprPropContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(TemplateParser.SUB, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TemplateParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(TemplateParser.DECREMENT, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(TemplateParser.LOGIC_NOT, 0); }
		public ITerminalNode BIT_INVERT() { return GetToken(TemplateParser.BIT_INVERT, 0); }
		public ExprValueContext exprValue() {
			return GetRuleContext<ExprValueContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(TemplateParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(TemplateParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(TemplateParser.MOD, 0); }
		public ITerminalNode ADD() { return GetToken(TemplateParser.ADD, 0); }
		public ITerminalNode SHIFTL() { return GetToken(TemplateParser.SHIFTL, 0); }
		public ITerminalNode SHIFTR() { return GetToken(TemplateParser.SHIFTR, 0); }
		public ITerminalNode LESS() { return GetToken(TemplateParser.LESS, 0); }
		public ITerminalNode LESSEQUAL() { return GetToken(TemplateParser.LESSEQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TemplateParser.GREATER, 0); }
		public ITerminalNode GREATEREQUAL() { return GetToken(TemplateParser.GREATEREQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TemplateParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(TemplateParser.NOTEQUAL, 0); }
		public ITerminalNode BIT_AND() { return GetToken(TemplateParser.BIT_AND, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(TemplateParser.BIT_XOR, 0); }
		public ITerminalNode BIT_OR() { return GetToken(TemplateParser.BIT_OR, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(TemplateParser.LOGIC_AND, 0); }
		public ITerminalNode LOGIC_OR() { return GetToken(TemplateParser.LOGIC_OR, 0); }
		public ITerminalNode SET() { return GetToken(TemplateParser.SET, 0); }
		public ITerminalNode SET_DIV() { return GetToken(TemplateParser.SET_DIV, 0); }
		public ITerminalNode SET_MUL() { return GetToken(TemplateParser.SET_MUL, 0); }
		public ITerminalNode SET_MOD() { return GetToken(TemplateParser.SET_MOD, 0); }
		public ITerminalNode SET_ADD() { return GetToken(TemplateParser.SET_ADD, 0); }
		public ITerminalNode SET_SUB() { return GetToken(TemplateParser.SET_SUB, 0); }
		public ITerminalNode SET_SHIFTL() { return GetToken(TemplateParser.SET_SHIFTL, 0); }
		public ITerminalNode SET_SHIFTR() { return GetToken(TemplateParser.SET_SHIFTR, 0); }
		public ITerminalNode SET_BIT_AND() { return GetToken(TemplateParser.SET_BIT_AND, 0); }
		public ITerminalNode SET_BIT_XOR() { return GetToken(TemplateParser.SET_BIT_XOR, 0); }
		public ITerminalNode SET_BIT_OR() { return GetToken(TemplateParser.SET_BIT_OR, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 179; _localctx.op = Match(PARENTHESES_L);
				State = 180; _localctx.r = expr(0);
				State = 181; Match(PARENTHESES_R);
				}
				break;
			case 2:
				{
				State = 183; _localctx.call = exprCall();
				}
				break;
			case 3:
				{
				State = 184; _localctx.prop = exprProp();
				}
				break;
			case 4:
				{
				State = 185; _localctx.op = Match(SUB);
				State = 186; _localctx.r = expr(27);
				}
				break;
			case 5:
				{
				State = 187; _localctx.op = Match(INCREMENT);
				State = 188; _localctx.varName = exprProp();
				}
				break;
			case 6:
				{
				State = 189; _localctx.varName = exprProp();
				State = 190; _localctx.op = Match(INCREMENT);
				}
				break;
			case 7:
				{
				State = 192; _localctx.op = Match(DECREMENT);
				State = 193; _localctx.varName = exprProp();
				}
				break;
			case 8:
				{
				State = 194; _localctx.varName = exprProp();
				State = 195; _localctx.op = Match(DECREMENT);
				}
				break;
			case 9:
				{
				State = 197; _localctx.op = Match(LOGIC_NOT);
				State = 198; _localctx.r = expr(22);
				}
				break;
			case 10:
				{
				State = 199; _localctx.op = Match(BIT_INVERT);
				State = 200; _localctx.r = expr(21);
				}
				break;
			case 11:
				{
				State = 201; _localctx.v = exprValue();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 263;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 261;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 204;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 205; _localctx.op = Match(MUL);
						State = 206; _localctx.r = expr(21);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 207;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 208; _localctx.op = Match(DIV);
						State = 209; _localctx.r = expr(20);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 210;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 211; _localctx.op = Match(MOD);
						State = 212; _localctx.r = expr(19);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 213;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 214; _localctx.op = Match(ADD);
						State = 215; _localctx.r = expr(18);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 216;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 217; _localctx.op = Match(SUB);
						State = 218; _localctx.r = expr(17);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 219;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 220; _localctx.op = Match(SHIFTL);
						State = 221; _localctx.r = expr(16);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 222;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 223; _localctx.op = Match(SHIFTR);
						State = 224; _localctx.r = expr(15);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 225;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 226; _localctx.op = Match(LESS);
						State = 227; _localctx.r = expr(14);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 228;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 229; _localctx.op = Match(LESSEQUAL);
						State = 230; _localctx.r = expr(13);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 231;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 232; _localctx.op = Match(GREATER);
						State = 233; _localctx.r = expr(12);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 234;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 235; _localctx.op = Match(GREATEREQUAL);
						State = 236; _localctx.r = expr(11);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 237;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 238; _localctx.op = Match(EQUAL);
						State = 239; _localctx.r = expr(10);
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 240;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 241; _localctx.op = Match(NOTEQUAL);
						State = 242; _localctx.r = expr(9);
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 243;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 244; _localctx.op = Match(BIT_AND);
						State = 245; _localctx.r = expr(8);
						}
						break;
					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 246;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 247; _localctx.op = Match(BIT_XOR);
						State = 248; _localctx.r = expr(7);
						}
						break;
					case 16:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 249;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 250; _localctx.op = Match(BIT_OR);
						State = 251; _localctx.r = expr(6);
						}
						break;
					case 17:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 252;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 253; _localctx.op = Match(LOGIC_AND);
						State = 254; _localctx.r = expr(5);
						}
						break;
					case 18:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 255;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 256; _localctx.op = Match(LOGIC_OR);
						State = 257; _localctx.r = expr(4);
						}
						break;
					case 19:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 258;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 259;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SET_DIV) | (1L << SET_MUL) | (1L << SET_MOD) | (1L << SET_ADD) | (1L << SET_SUB) | (1L << SET_SHIFTL) | (1L << SET_SHIFTR) | (1L << SET_BIT_AND) | (1L << SET_BIT_XOR) | (1L << SET_BIT_OR) | (1L << SET))) != 0)) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 260; _localctx.r = expr(3);
						}
						break;
					}
					} 
				}
				State = 265;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprCallContext : ParserRuleContext {
		public IToken _IDENT;
		public IList<IToken> _names = new List<IToken>();
		public IToken op;
		public ExprContext _expr;
		public IList<ExprContext> _args = new List<ExprContext>();
		public ITerminalNode PARENTHESES_L() { return GetToken(TemplateParser.PARENTHESES_L, 0); }
		public ITerminalNode PARENTHESES_R() { return GetToken(TemplateParser.PARENTHESES_R, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(TemplateParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(TemplateParser.IDENT, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TemplateParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TemplateParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TemplateParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TemplateParser.COMMA, i);
		}
		public ExprCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExprCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExprCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprCallContext exprCall() {
		ExprCallContext _localctx = new ExprCallContext(Context, State);
		EnterRule(_localctx, 28, RULE_exprCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; _localctx._IDENT = Match(IDENT);
			_localctx._names.Add(_localctx._IDENT);
			State = 271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 267; _localctx.op = Match(DOT);
				State = 268; _localctx._IDENT = Match(IDENT);
				_localctx._names.Add(_localctx._IDENT);
				}
				}
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 274; Match(PARENTHESES_L);
			{
			State = 275; _localctx._expr = expr(0);
			_localctx._args.Add(_localctx._expr);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 276; Match(COMMA);
				State = 277; _localctx._expr = expr(0);
				_localctx._args.Add(_localctx._expr);
				}
				}
				State = 282;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 283; Match(PARENTHESES_R);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprPropContext : ParserRuleContext {
		public IToken _IDENT;
		public IList<IToken> _names = new List<IToken>();
		public IToken op;
		public ITerminalNode[] IDENT() { return GetTokens(TemplateParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(TemplateParser.IDENT, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TemplateParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TemplateParser.DOT, i);
		}
		public ExprPropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprProp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExprProp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExprProp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprProp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprPropContext exprProp() {
		ExprPropContext _localctx = new ExprPropContext(Context, State);
		EnterRule(_localctx, 30, RULE_exprProp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285; _localctx._IDENT = Match(IDENT);
			_localctx._names.Add(_localctx._IDENT);
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 286; _localctx.op = Match(DOT);
					State = 287; _localctx._IDENT = Match(IDENT);
					_localctx._names.Add(_localctx._IDENT);
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprValueContext : ParserRuleContext {
		public IToken integerValue;
		public IToken floatValue;
		public IToken boolValue;
		public IToken stringValue;
		public ITerminalNode INTEGER() { return GetToken(TemplateParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(TemplateParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(TemplateParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(TemplateParser.STRING, 0); }
		public ExprValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExprValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExprValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprValueContext exprValue() {
		ExprValueContext _localctx = new ExprValueContext(Context, State);
		EnterRule(_localctx, 32, RULE_exprValue);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293; _localctx.integerValue = Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 294; _localctx.floatValue = Match(FLOAT);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 295; _localctx.boolValue = Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 296; _localctx.stringValue = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 11);
		case 10: return Precpred(Context, 10);
		case 11: return Precpred(Context, 9);
		case 12: return Precpred(Context, 8);
		case 13: return Precpred(Context, 7);
		case 14: return Precpred(Context, 6);
		case 15: return Precpred(Context, 5);
		case 16: return Precpred(Context, 4);
		case 17: return Precpred(Context, 3);
		case 18: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x41', '\x12E', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x3', '\x2', '\a', 
		'\x2', '&', '\n', '\x2', '\f', '\x2', '\xE', '\x2', ')', '\v', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '-', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x37', '\n', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '=', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', 
		'\x5', '\x43', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'G', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'K', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'Q', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\a', '\t', 'Y', '\n', '\t', '\f', '\t', '\xE', '\t', 
		'\\', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 'j', '\n', '\n', '\a', '\n', 
		'l', '\n', '\n', '\f', '\n', '\xE', '\n', 'o', '\v', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\a', '\v', 'y', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'|', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x83', '\n', '\f', '\f', '\f', '\xE', '\f', '\x86', 
		'\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x92', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', 
		'\x96', '\n', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x9A', '\n', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x9F', '\n', 
		'\r', '\f', '\r', '\xE', '\r', '\xA2', '\v', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xAE', '\n', '\xE', 
		'\f', '\xE', '\xE', '\xE', '\xB1', '\v', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\xCD', '\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x108', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\x10B', '\v', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x110', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x113', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\a', '\x10', '\x119', '\n', '\x10', '\f', 
		'\x10', '\xE', '\x10', '\x11C', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x123', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x126', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x12C', '\n', 
		'\x12', '\x3', '\x12', '\x2', '\x3', '\x1C', '\x13', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x1E', ' ', '\"', '\x2', '\x3', '\x4', '\x2', '\t', '\x12', '\x30', 
		'\x30', '\x2', '\x15C', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'<', '\x3', '\x2', '\x2', '\x2', '\x6', '>', '\x3', '\x2', '\x2', '\x2', 
		'\b', '@', '\x3', '\x2', '\x2', '\x2', '\n', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'H', '\x3', '\x2', '\x2', '\x2', '\xE', 'L', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'R', '\x3', '\x2', '\x2', '\x2', '\x12', '_', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'r', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8D', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xA5', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\x10C', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\x11F', '\x3', '\x2', '\x2', '\x2', '\"', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '$', '&', '\x5', '\x4', '\x3', '\x2', '%', '$', '\x3', '\x2', '\x2', 
		'\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', '\'', '%', '\x3', '\x2', 
		'\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', '\x2', '(', '\x3', '\x3', 
		'\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', '*', ',', 
		'\x5', '\xE', '\b', '\x2', '+', '-', '\a', '\x32', '\x2', '\x2', ',', 
		'+', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '=', '\x3', '\x2', '\x2', '\x2', '.', '=', '\x5', '\x10', '\t', '\x2', 
		'/', '=', '\x5', '\x12', '\n', '\x2', '\x30', '=', '\x5', '\x14', '\v', 
		'\x2', '\x31', '=', '\x5', '\x16', '\f', '\x2', '\x32', '=', '\x5', '\x18', 
		'\r', '\x2', '\x33', '=', '\x5', '\x1A', '\xE', '\x2', '\x34', '\x36', 
		'\x5', '\x1C', '\xF', '\x2', '\x35', '\x37', '\a', '\x32', '\x2', '\x2', 
		'\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '=', '\x3', '\x2', '\x2', '\x2', '\x38', '=', '\x5', 
		'\x6', '\x4', '\x2', '\x39', '=', '\x5', '\b', '\x5', '\x2', ':', '=', 
		'\x5', '\n', '\x6', '\x2', ';', '=', '\x5', '\f', '\a', '\x2', '<', '*', 
		'\x3', '\x2', '\x2', '\x2', '<', '.', '\x3', '\x2', '\x2', '\x2', '<', 
		'/', '\x3', '\x2', '\x2', '\x2', '<', '\x30', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x31', '\x3', '\x2', '\x2', '\x2', '<', '\x32', '\x3', '\x2', '\x2', 
		'\x2', '<', '\x33', '\x3', '\x2', '\x2', '\x2', '<', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x38', '\x3', '\x2', '\x2', '\x2', '<', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', ';', '\x3', 
		'\x2', '\x2', '\x2', '=', '\x5', '\x3', '\x2', '\x2', '\x2', '>', '?', 
		'\a', '\x4', '\x2', '\x2', '?', '\a', '\x3', '\x2', '\x2', '\x2', '@', 
		'\x42', '\a', '<', '\x2', '\x2', '\x41', '\x43', '\a', '\x32', '\x2', 
		'\x2', '\x42', '\x41', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\t', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x46', '\a', '=', '\x2', '\x2', '\x45', 'G', '\a', '\x32', '\x2', '\x2', 
		'\x46', '\x45', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\v', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\a', '>', 
		'\x2', '\x2', 'I', 'K', '\a', '\x32', '\x2', '\x2', 'J', 'I', '\x3', '\x2', 
		'\x2', '\x2', 'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\r', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\a', '\x33', '\x2', '\x2', 'M', 'P', '\a', 
		'?', '\x2', '\x2', 'N', 'O', '\a', '\x30', '\x2', '\x2', 'O', 'Q', '\x5', 
		'\x1C', '\xF', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', 
		'\x3', '\x2', '\x2', '\x2', 'Q', '\xF', '\x3', '\x2', '\x2', '\x2', 'R', 
		'S', '\a', '\x34', '\x2', '\x2', 'S', 'T', '\a', '\x1D', '\x2', '\x2', 
		'T', 'U', '\x5', '\x1C', '\xF', '\x2', 'U', 'V', '\a', '\x1E', '\x2', 
		'\x2', 'V', 'Z', '\a', '\x14', '\x2', '\x2', 'W', 'Y', '\x5', '\x4', '\x3', 
		'\x2', 'X', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', 
		'\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\a', '\x15', '\x2', '\x2', '^', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '\x35', '\x2', '\x2', '`', 
		'\x61', '\a', '\x1D', '\x2', '\x2', '\x61', '\x62', '\x5', '\x1C', '\xF', 
		'\x2', '\x62', '\x63', '\a', '\x1E', '\x2', '\x2', '\x63', 'm', '\a', 
		'\x14', '\x2', '\x2', '\x64', '\x65', '\a', '\x36', '\x2', '\x2', '\x65', 
		'\x66', '\x5', '\x1C', '\xF', '\x2', '\x66', 'g', '\a', '\x31', '\x2', 
		'\x2', 'g', 'i', '\x5', '\x1C', '\xF', '\x2', 'h', 'j', '\a', '<', '\x2', 
		'\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'i', 'j', '\x3', '\x2', '\x2', 
		'\x2', 'j', 'l', '\x3', '\x2', '\x2', '\x2', 'k', '\x64', '\x3', '\x2', 
		'\x2', '\x2', 'l', 'o', '\x3', '\x2', '\x2', '\x2', 'm', 'k', '\x3', '\x2', 
		'\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 'n', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\a', '\x15', 
		'\x2', '\x2', 'q', '\x13', '\x3', '\x2', '\x2', '\x2', 'r', 's', '\a', 
		'\x37', '\x2', '\x2', 's', 't', '\a', '\x1D', '\x2', '\x2', 't', 'u', 
		'\x5', '\x1C', '\xF', '\x2', 'u', 'v', '\a', '\x1E', '\x2', '\x2', 'v', 
		'z', '\a', '\x14', '\x2', '\x2', 'w', 'y', '\x5', '\x4', '\x3', '\x2', 
		'x', 'w', '\x3', '\x2', '\x2', '\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 
		'z', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '}', '\x3', '\x2', '\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', 
		'}', '~', '\a', '\x15', '\x2', '\x2', '~', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\a', '\x38', '\x2', '\x2', '\x80', '\x84', '\a', 
		'\x14', '\x2', '\x2', '\x81', '\x83', '\x5', '\x4', '\x3', '\x2', '\x82', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x86', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x87', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x84', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\a', '\x15', '\x2', 
		'\x2', '\x88', '\x89', '\a', '\x37', '\x2', '\x2', '\x89', '\x8A', '\a', 
		'\x1D', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\x1C', '\xF', '\x2', '\x8B', 
		'\x8C', '\a', '\x1E', '\x2', '\x2', '\x8C', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8E', '\a', '\x39', '\x2', '\x2', '\x8E', '\x91', '\a', 
		'\x1D', '\x2', '\x2', '\x8F', '\x92', '\x5', '\xE', '\b', '\x2', '\x90', 
		'\x92', '\x5', '\x1C', '\xF', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x91', '\x90', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x95', '\a', '\x32', '\x2', '\x2', '\x94', '\x96', '\x5', '\x1C', '\xF', 
		'\x2', '\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x95', '\x96', '\x3', 
		'\x2', '\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x99', '\a', '\x32', '\x2', '\x2', '\x98', '\x9A', '\x5', '\x1C', '\xF', 
		'\x2', '\x99', '\x98', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\a', '\x1E', '\x2', '\x2', '\x9C', '\xA0', '\a', '\x14', '\x2', 
		'\x2', '\x9D', '\x9F', '\x5', '\x4', '\x3', '\x2', '\x9E', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\xA2', '\x3', '\x2', '\x2', '\x2', '\xA0', 
		'\x9E', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', '\x15', '\x2', '\x2', '\xA4', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', ':', '\x2', 
		'\x2', '\xA6', '\xA7', '\a', '\x1D', '\x2', '\x2', '\xA7', '\xA8', '\x5', 
		'\x4', '\x3', '\x2', '\xA8', '\xA9', '\a', ';', '\x2', '\x2', '\xA9', 
		'\xAA', '\x5', '\x4', '\x3', '\x2', '\xAA', '\xAB', '\a', '\x1E', '\x2', 
		'\x2', '\xAB', '\xAF', '\a', '\x14', '\x2', '\x2', '\xAC', '\xAE', '\x5', 
		'\x4', '\x3', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAE', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', 
		'\x2', '\xAF', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', '\x3', 
		'\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB3', '\a', '\x15', '\x2', '\x2', '\xB3', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xB4', '\xB5', '\b', '\xF', '\x1', '\x2', '\xB5', '\xB6', '\a', 
		'\x1D', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\x1C', '\xF', '\x2', '\xB7', 
		'\xB8', '\a', '\x1E', '\x2', '\x2', '\xB8', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xCD', '\x5', '\x1E', '\x10', '\x2', '\xBA', '\xCD', '\x5', 
		' ', '\x11', '\x2', '\xBB', '\xBC', '\a', '\x1C', '\x2', '\x2', '\xBC', 
		'\xCD', '\x5', '\x1C', '\xF', '\x1D', '\xBD', '\xBE', '\a', '\x16', '\x2', 
		'\x2', '\xBE', '\xCD', '\x5', ' ', '\x11', '\x2', '\xBF', '\xC0', '\x5', 
		' ', '\x11', '\x2', '\xC0', '\xC1', '\a', '\x16', '\x2', '\x2', '\xC1', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\a', '\x17', '\x2', 
		'\x2', '\xC3', '\xCD', '\x5', ' ', '\x11', '\x2', '\xC4', '\xC5', '\x5', 
		' ', '\x11', '\x2', '\xC5', '\xC6', '\a', '\x17', '\x2', '\x2', '\xC6', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\a', '\"', '\x2', 
		'\x2', '\xC8', '\xCD', '\x5', '\x1C', '\xF', '\x18', '\xC9', '\xCA', '\a', 
		'#', '\x2', '\x2', '\xCA', '\xCD', '\x5', '\x1C', '\xF', '\x17', '\xCB', 
		'\xCD', '\x5', '\"', '\x12', '\x2', '\xCC', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xBA', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xBF', '\x3', '\x2', '\x2', 
		'\x2', '\xCC', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xC7', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '\x109', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\f', 
		'\x16', '\x2', '\x2', '\xCF', '\xD0', '\a', '\x18', '\x2', '\x2', '\xD0', 
		'\x108', '\x5', '\x1C', '\xF', '\x17', '\xD1', '\xD2', '\f', '\x15', '\x2', 
		'\x2', '\xD2', '\xD3', '\a', '\x19', '\x2', '\x2', '\xD3', '\x108', '\x5', 
		'\x1C', '\xF', '\x16', '\xD4', '\xD5', '\f', '\x14', '\x2', '\x2', '\xD5', 
		'\xD6', '\a', '\x1A', '\x2', '\x2', '\xD6', '\x108', '\x5', '\x1C', '\xF', 
		'\x15', '\xD7', '\xD8', '\f', '\x13', '\x2', '\x2', '\xD8', '\xD9', '\a', 
		'\x1B', '\x2', '\x2', '\xD9', '\x108', '\x5', '\x1C', '\xF', '\x14', '\xDA', 
		'\xDB', '\f', '\x12', '\x2', '\x2', '\xDB', '\xDC', '\a', '\x1C', '\x2', 
		'\x2', '\xDC', '\x108', '\x5', '\x1C', '\xF', '\x13', '\xDD', '\xDE', 
		'\f', '\x11', '\x2', '\x2', '\xDE', '\xDF', '\a', '$', '\x2', '\x2', '\xDF', 
		'\x108', '\x5', '\x1C', '\xF', '\x12', '\xE0', '\xE1', '\f', '\x10', '\x2', 
		'\x2', '\xE1', '\xE2', '\a', '%', '\x2', '\x2', '\xE2', '\x108', '\x5', 
		'\x1C', '\xF', '\x11', '\xE3', '\xE4', '\f', '\xF', '\x2', '\x2', '\xE4', 
		'\xE5', '\a', '&', '\x2', '\x2', '\xE5', '\x108', '\x5', '\x1C', '\xF', 
		'\x10', '\xE6', '\xE7', '\f', '\xE', '\x2', '\x2', '\xE7', '\xE8', '\a', 
		'\'', '\x2', '\x2', '\xE8', '\x108', '\x5', '\x1C', '\xF', '\xF', '\xE9', 
		'\xEA', '\f', '\r', '\x2', '\x2', '\xEA', '\xEB', '\a', '(', '\x2', '\x2', 
		'\xEB', '\x108', '\x5', '\x1C', '\xF', '\xE', '\xEC', '\xED', '\f', '\f', 
		'\x2', '\x2', '\xED', '\xEE', '\a', ')', '\x2', '\x2', '\xEE', '\x108', 
		'\x5', '\x1C', '\xF', '\r', '\xEF', '\xF0', '\f', '\v', '\x2', '\x2', 
		'\xF0', '\xF1', '\a', '*', '\x2', '\x2', '\xF1', '\x108', '\x5', '\x1C', 
		'\xF', '\f', '\xF2', '\xF3', '\f', '\n', '\x2', '\x2', '\xF3', '\xF4', 
		'\a', '!', '\x2', '\x2', '\xF4', '\x108', '\x5', '\x1C', '\xF', '\v', 
		'\xF5', '\xF6', '\f', '\t', '\x2', '\x2', '\xF6', '\xF7', '\a', '-', '\x2', 
		'\x2', '\xF7', '\x108', '\x5', '\x1C', '\xF', '\n', '\xF8', '\xF9', '\f', 
		'\b', '\x2', '\x2', '\xF9', '\xFA', '\a', '/', '\x2', '\x2', '\xFA', '\x108', 
		'\x5', '\x1C', '\xF', '\t', '\xFB', '\xFC', '\f', '\a', '\x2', '\x2', 
		'\xFC', '\xFD', '\a', '.', '\x2', '\x2', '\xFD', '\x108', '\x5', '\x1C', 
		'\xF', '\b', '\xFE', '\xFF', '\f', '\x6', '\x2', '\x2', '\xFF', '\x100', 
		'\a', '+', '\x2', '\x2', '\x100', '\x108', '\x5', '\x1C', '\xF', '\a', 
		'\x101', '\x102', '\f', '\x5', '\x2', '\x2', '\x102', '\x103', '\a', ',', 
		'\x2', '\x2', '\x103', '\x108', '\x5', '\x1C', '\xF', '\x6', '\x104', 
		'\x105', '\f', '\x4', '\x2', '\x2', '\x105', '\x106', '\t', '\x2', '\x2', 
		'\x2', '\x106', '\x108', '\x5', '\x1C', '\xF', '\x5', '\x107', '\xCE', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\xD1', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\xD4', '\x3', '\x2', '\x2', '\x2', '\x107', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\x107', '\xDA', '\x3', '\x2', '\x2', '\x2', '\x107', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x107', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\x107', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x107', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\xF2', '\x3', '\x2', '\x2', '\x2', '\x107', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\x107', '\xF8', '\x3', '\x2', '\x2', '\x2', '\x107', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\x107', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x101', '\x3', '\x2', '\x2', '\x2', '\x107', '\x104', '\x3', 
		'\x2', '\x2', '\x2', '\x108', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x109', 
		'\x107', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x10C', '\x111', '\a', '?', '\x2', '\x2', 
		'\x10D', '\x10E', '\a', '\x1F', '\x2', '\x2', '\x10E', '\x110', '\a', 
		'?', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x113', '\x3', '\x2', '\x2', '\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\a', '\x1D', '\x2', '\x2', '\x115', '\x11A', '\x5', 
		'\x1C', '\xF', '\x2', '\x116', '\x117', '\a', ' ', '\x2', '\x2', '\x117', 
		'\x119', '\x5', '\x1C', '\xF', '\x2', '\x118', '\x116', '\x3', '\x2', 
		'\x2', '\x2', '\x119', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x118', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11A', '\x3', 
		'\x2', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x1E', '\x2', '\x2', '\x11E', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x124', '\a', '?', '\x2', 
		'\x2', '\x120', '\x121', '\a', '\x1F', '\x2', '\x2', '\x121', '\x123', 
		'\a', '?', '\x2', '\x2', '\x122', '\x120', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x126', '\x3', '\x2', '\x2', '\x2', '\x124', '\x122', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x125', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'!', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x12C', '\a', '\x6', '\x2', '\x2', '\x128', '\x12C', 
		'\a', '\a', '\x2', '\x2', '\x129', '\x12C', '\a', '\b', '\x2', '\x2', 
		'\x12A', '\x12C', '\a', '\x13', '\x2', '\x2', '\x12B', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x12B', '\x128', '\x3', '\x2', '\x2', '\x2', '\x12B', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '#', '\x3', '\x2', '\x2', '\x2', '\x1B', '\'', ',', '\x36', 
		'<', '\x42', '\x46', 'J', 'P', 'Z', 'i', 'm', 'z', '\x84', '\x91', '\x95', 
		'\x99', '\xA0', '\xAF', '\xCC', '\x107', '\x109', '\x111', '\x11A', '\x124', 
		'\x12B',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
