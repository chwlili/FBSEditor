//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TemplateParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class TemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, CLOSE=3, INTEGER=4, FLOAT=5, BOOL=6, STRING=7, INCREMENT=8, 
		DECREMENT=9, MUL=10, DIV=11, MOD=12, ADD=13, SUB=14, BRACEL=15, BRACER=16, 
		IF=17, THEN=18, END=19, DOT=20, COMMA=21, NOTEQUAL=22, NOT=23, INVERT=24, 
		SHIFTL=25, SHIFTR=26, LESS=27, LESSEQUAL=28, GREATER=29, GREATEREQUAL=30, 
		EQUAL=31, AND2=32, OR2=33, AND=34, OR=35, XOR=36, IDENT=37, COMMENT=38, 
		WS=39;
	public const int
		RULE_document = 0, RULE_if = 1, RULE_expr = 2, RULE_exprCall = 3, RULE_exprProp = 4, 
		RULE_exprValue = 5;
	public static readonly string[] ruleNames = {
		"document", "if", "expr", "exprCall", "exprProp", "exprValue"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<%'", null, "'%>'", null, null, null, null, "'++'", "'--'", "'*'", 
		"'/'", "'%'", "'+'", "'-'", "'('", "')'", "'if'", "'then'", "'end'", "'.'", 
		"','", "'!='", "'!'", "'~'", "'<<'", "'>>'", "'<'", "'<='", "'>'", "'>='", 
		"'=='", "'&&'", "'||'", "'&'", "'|'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "CLOSE", "INTEGER", "FLOAT", "BOOL", "STRING", "INCREMENT", 
		"DECREMENT", "MUL", "DIV", "MOD", "ADD", "SUB", "BRACEL", "BRACER", "IF", 
		"THEN", "END", "DOT", "COMMA", "NOTEQUAL", "NOT", "INVERT", "SHIFTL", 
		"SHIFTR", "LESS", "LESSEQUAL", "GREATER", "GREATEREQUAL", "EQUAL", "AND2", 
		"OR2", "AND", "OR", "XOR", "IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfContext[] @if() {
			return GetRuleContexts<IfContext>();
		}
		public IfContext @if(int i) {
			return GetRuleContext<IfContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 17;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << BRACEL) | (1L << IF) | (1L << NOT) | (1L << INVERT) | (1L << IDENT))) != 0)) {
				{
				State = 15;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 12; Match(TEXT);
					}
					break;
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case INCREMENT:
				case DECREMENT:
				case SUB:
				case BRACEL:
				case NOT:
				case INVERT:
				case IDENT:
					{
					State = 13; expr(0);
					}
					break;
				case IF:
					{
					State = 14; @if();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 19;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public IToken id;
		public IToken l;
		public ExprContext exp;
		public IToken r;
		public ITerminalNode THEN() { return GetToken(TemplateParser.THEN, 0); }
		public ITerminalNode END() { return GetToken(TemplateParser.END, 0); }
		public ITerminalNode IF() { return GetToken(TemplateParser.IF, 0); }
		public ITerminalNode BRACEL() { return GetToken(TemplateParser.BRACEL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode BRACER() { return GetToken(TemplateParser.BRACER, 0); }
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 2, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 20; _localctx.id = Match(IF);
			State = 21; _localctx.l = Match(BRACEL);
			State = 22; _localctx.exp = expr(0);
			State = 23; _localctx.r = Match(BRACER);
			State = 24; Match(THEN);
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << INCREMENT) | (1L << DECREMENT) | (1L << SUB) | (1L << BRACEL) | (1L << NOT) | (1L << INVERT) | (1L << IDENT))) != 0)) {
				{
				State = 27;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case INCREMENT:
				case DECREMENT:
				case SUB:
				case BRACEL:
				case NOT:
				case INVERT:
				case IDENT:
					{
					State = 25; expr(0);
					}
					break;
				case TEXT:
					{
					State = 26; Match(TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 32; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext r;
		public ExprContext l;
		public ExprCallContext call;
		public ExprPropContext prop;
		public IToken op;
		public IToken t;
		public ExprValueContext v;
		public ITerminalNode BRACEL() { return GetToken(TemplateParser.BRACEL, 0); }
		public ITerminalNode BRACER() { return GetToken(TemplateParser.BRACER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ExprCallContext exprCall() {
			return GetRuleContext<ExprCallContext>(0);
		}
		public ExprPropContext exprProp() {
			return GetRuleContext<ExprPropContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(TemplateParser.SUB, 0); }
		public ITerminalNode IDENT() { return GetToken(TemplateParser.IDENT, 0); }
		public ITerminalNode INCREMENT() { return GetToken(TemplateParser.INCREMENT, 0); }
		public ITerminalNode DECREMENT() { return GetToken(TemplateParser.DECREMENT, 0); }
		public ITerminalNode NOT() { return GetToken(TemplateParser.NOT, 0); }
		public ITerminalNode INVERT() { return GetToken(TemplateParser.INVERT, 0); }
		public ExprValueContext exprValue() {
			return GetRuleContext<ExprValueContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(TemplateParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(TemplateParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(TemplateParser.MOD, 0); }
		public ITerminalNode ADD() { return GetToken(TemplateParser.ADD, 0); }
		public ITerminalNode SHIFTL() { return GetToken(TemplateParser.SHIFTL, 0); }
		public ITerminalNode SHIFTR() { return GetToken(TemplateParser.SHIFTR, 0); }
		public ITerminalNode LESS() { return GetToken(TemplateParser.LESS, 0); }
		public ITerminalNode LESSEQUAL() { return GetToken(TemplateParser.LESSEQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(TemplateParser.GREATER, 0); }
		public ITerminalNode GREATEREQUAL() { return GetToken(TemplateParser.GREATEREQUAL, 0); }
		public ITerminalNode EQUAL() { return GetToken(TemplateParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(TemplateParser.NOTEQUAL, 0); }
		public ITerminalNode AND() { return GetToken(TemplateParser.AND, 0); }
		public ITerminalNode XOR() { return GetToken(TemplateParser.XOR, 0); }
		public ITerminalNode OR() { return GetToken(TemplateParser.OR, 0); }
		public ITerminalNode AND2() { return GetToken(TemplateParser.AND2, 0); }
		public ITerminalNode OR2() { return GetToken(TemplateParser.OR2, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 35; Match(BRACEL);
				State = 36; _localctx.r = expr(0);
				State = 37; Match(BRACER);
				}
				break;
			case 2:
				{
				State = 39; _localctx.call = exprCall();
				}
				break;
			case 3:
				{
				State = 40; _localctx.prop = exprProp();
				}
				break;
			case 4:
				{
				State = 41; _localctx.op = Match(SUB);
				State = 42; _localctx.r = expr(27);
				}
				break;
			case 5:
				{
				State = 43; Match(BRACEL);
				State = 44; _localctx.t = Match(IDENT);
				State = 45; Match(BRACER);
				State = 46; _localctx.r = expr(26);
				}
				break;
			case 6:
				{
				State = 47; _localctx.op = Match(INCREMENT);
				State = 48; _localctx.r = expr(25);
				}
				break;
			case 7:
				{
				State = 49; _localctx.op = Match(DECREMENT);
				State = 50; _localctx.r = expr(23);
				}
				break;
			case 8:
				{
				State = 51; _localctx.op = Match(NOT);
				State = 52; _localctx.r = expr(21);
				}
				break;
			case 9:
				{
				State = 53; _localctx.op = Match(INVERT);
				State = 54; _localctx.r = expr(20);
				}
				break;
			case 10:
				{
				State = 55; _localctx.v = exprValue();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 116;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 58;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 59; _localctx.op = Match(MUL);
						State = 60; _localctx.r = expr(20);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 61;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 62; _localctx.op = Match(DIV);
						State = 63; _localctx.r = expr(19);
						}
						break;
					case 3:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 64;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 65; _localctx.op = Match(MOD);
						State = 66; _localctx.r = expr(18);
						}
						break;
					case 4:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 67;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 68; _localctx.op = Match(ADD);
						State = 69; _localctx.r = expr(17);
						}
						break;
					case 5:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 71; _localctx.op = Match(SUB);
						State = 72; _localctx.r = expr(16);
						}
						break;
					case 6:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 73;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 74; _localctx.op = Match(SHIFTL);
						State = 75; _localctx.r = expr(15);
						}
						break;
					case 7:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 76;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 77; _localctx.op = Match(SHIFTR);
						State = 78; _localctx.r = expr(14);
						}
						break;
					case 8:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 79;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 80; _localctx.op = Match(LESS);
						State = 81; _localctx.r = expr(13);
						}
						break;
					case 9:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 82;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 83; _localctx.op = Match(LESSEQUAL);
						State = 84; _localctx.r = expr(12);
						}
						break;
					case 10:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 85;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 86; _localctx.op = Match(GREATER);
						State = 87; _localctx.r = expr(11);
						}
						break;
					case 11:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 88;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 89; _localctx.op = Match(GREATEREQUAL);
						State = 90; _localctx.r = expr(10);
						}
						break;
					case 12:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 91;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 92; _localctx.op = Match(EQUAL);
						State = 93; _localctx.r = expr(9);
						}
						break;
					case 13:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 94;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 95; _localctx.op = Match(NOTEQUAL);
						State = 96; _localctx.r = expr(8);
						}
						break;
					case 14:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 97;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 98; _localctx.op = Match(AND);
						State = 99; _localctx.r = expr(7);
						}
						break;
					case 15:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 100;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 101; _localctx.op = Match(XOR);
						State = 102; _localctx.r = expr(6);
						}
						break;
					case 16:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 103;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 104; _localctx.op = Match(OR);
						State = 105; _localctx.r = expr(5);
						}
						break;
					case 17:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 106;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 107; _localctx.op = Match(AND2);
						State = 108; _localctx.r = expr(4);
						}
						break;
					case 18:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 109;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 110; _localctx.op = Match(OR2);
						State = 111; _localctx.r = expr(3);
						}
						break;
					case 19:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.r = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 112;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 113; _localctx.op = Match(INCREMENT);
						}
						break;
					case 20:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.r = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 114;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 115; _localctx.op = Match(DECREMENT);
						}
						break;
					}
					} 
				}
				State = 120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExprCallContext : ParserRuleContext {
		public IToken _IDENT;
		public IList<IToken> _names = new List<IToken>();
		public IToken op;
		public ExprContext _expr;
		public IList<ExprContext> _args = new List<ExprContext>();
		public ITerminalNode BRACEL() { return GetToken(TemplateParser.BRACEL, 0); }
		public ITerminalNode BRACER() { return GetToken(TemplateParser.BRACER, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(TemplateParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(TemplateParser.IDENT, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TemplateParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TemplateParser.DOT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(TemplateParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(TemplateParser.COMMA, i);
		}
		public ExprCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExprCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExprCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprCallContext exprCall() {
		ExprCallContext _localctx = new ExprCallContext(Context, State);
		EnterRule(_localctx, 6, RULE_exprCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; _localctx._IDENT = Match(IDENT);
			_localctx._names.Add(_localctx._IDENT);
			State = 126;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 122; _localctx.op = Match(DOT);
				State = 123; _localctx._IDENT = Match(IDENT);
				_localctx._names.Add(_localctx._IDENT);
				}
				}
				State = 128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 129; Match(BRACEL);
			{
			State = 130; _localctx._expr = expr(0);
			_localctx._args.Add(_localctx._expr);
			State = 135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 131; Match(COMMA);
				State = 132; _localctx._expr = expr(0);
				_localctx._args.Add(_localctx._expr);
				}
				}
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
			State = 138; Match(BRACER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprPropContext : ParserRuleContext {
		public IToken _IDENT;
		public IList<IToken> _names = new List<IToken>();
		public IToken op;
		public ITerminalNode[] IDENT() { return GetTokens(TemplateParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(TemplateParser.IDENT, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TemplateParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TemplateParser.DOT, i);
		}
		public ExprPropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprProp; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExprProp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExprProp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprProp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprPropContext exprProp() {
		ExprPropContext _localctx = new ExprPropContext(Context, State);
		EnterRule(_localctx, 8, RULE_exprProp);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; _localctx._IDENT = Match(IDENT);
			_localctx._names.Add(_localctx._IDENT);
			State = 145;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 141; _localctx.op = Match(DOT);
					State = 142; _localctx._IDENT = Match(IDENT);
					_localctx._names.Add(_localctx._IDENT);
					}
					} 
				}
				State = 147;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprValueContext : ParserRuleContext {
		public IToken integerValue;
		public IToken floatValue;
		public IToken boolValue;
		public IToken stringValue;
		public ITerminalNode INTEGER() { return GetToken(TemplateParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(TemplateParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(TemplateParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(TemplateParser.STRING, 0); }
		public ExprValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExprValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExprValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExprValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprValueContext exprValue() {
		ExprValueContext _localctx = new ExprValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_exprValue);
		try {
			State = 152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148; _localctx.integerValue = Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; _localctx.floatValue = Match(FLOAT);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 150; _localctx.boolValue = Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 151; _localctx.stringValue = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 19);
		case 1: return Precpred(Context, 18);
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 9);
		case 11: return Precpred(Context, 8);
		case 12: return Precpred(Context, 7);
		case 13: return Precpred(Context, 6);
		case 14: return Precpred(Context, 5);
		case 15: return Precpred(Context, 4);
		case 16: return Precpred(Context, 3);
		case 17: return Precpred(Context, 2);
		case 18: return Precpred(Context, 24);
		case 19: return Precpred(Context, 22);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\x9D', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x12', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x15', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1E', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '!', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', ';', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 'w', '\n', '\x4', 
		'\f', '\x4', '\xE', '\x4', 'z', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\a', '\x5', '\x7F', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\x82', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\a', '\x5', '\x88', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x8B', 
		'\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', '\x92', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '\x95', 
		'\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x9B', '\n', '\a', '\x3', '\a', '\x2', '\x3', '\x6', '\b', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\x2', '\x2', '\x2', '\xBE', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'\x6', ':', '\x3', '\x2', '\x2', '\x2', '\b', '{', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x8E', '\x3', '\x2', '\x2', '\x2', '\f', '\x9A', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x12', '\a', '\x4', '\x2', '\x2', '\xF', 
		'\x12', '\x5', '\x6', '\x4', '\x2', '\x10', '\x12', '\x5', '\x4', '\x3', 
		'\x2', '\x11', '\xE', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x11', '\x10', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x15', '\x3', '\x2', '\x2', '\x2', '\x13', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x14', '\x3', '\x2', '\x2', '\x2', '\x14', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x13', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x17', '\a', '\x13', '\x2', '\x2', '\x17', '\x18', '\a', '\x11', '\x2', 
		'\x2', '\x18', '\x19', '\x5', '\x6', '\x4', '\x2', '\x19', '\x1A', '\a', 
		'\x12', '\x2', '\x2', '\x1A', '\x1F', '\a', '\x14', '\x2', '\x2', '\x1B', 
		'\x1E', '\x5', '\x6', '\x4', '\x2', '\x1C', '\x1E', '\a', '\x4', '\x2', 
		'\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1C', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '!', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\"', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', 
		'\x2', '\x2', '\"', '#', '\a', '\x15', '\x2', '\x2', '#', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '$', '%', '\b', '\x4', '\x1', '\x2', '%', '&', '\a', 
		'\x11', '\x2', '\x2', '&', '\'', '\x5', '\x6', '\x4', '\x2', '\'', '(', 
		'\a', '\x12', '\x2', '\x2', '(', ';', '\x3', '\x2', '\x2', '\x2', ')', 
		';', '\x5', '\b', '\x5', '\x2', '*', ';', '\x5', '\n', '\x6', '\x2', '+', 
		',', '\a', '\x10', '\x2', '\x2', ',', ';', '\x5', '\x6', '\x4', '\x1D', 
		'-', '.', '\a', '\x11', '\x2', '\x2', '.', '/', '\a', '\'', '\x2', '\x2', 
		'/', '\x30', '\a', '\x12', '\x2', '\x2', '\x30', ';', '\x5', '\x6', '\x4', 
		'\x1C', '\x31', '\x32', '\a', '\n', '\x2', '\x2', '\x32', ';', '\x5', 
		'\x6', '\x4', '\x1B', '\x33', '\x34', '\a', '\v', '\x2', '\x2', '\x34', 
		';', '\x5', '\x6', '\x4', '\x19', '\x35', '\x36', '\a', '\x19', '\x2', 
		'\x2', '\x36', ';', '\x5', '\x6', '\x4', '\x17', '\x37', '\x38', '\a', 
		'\x1A', '\x2', '\x2', '\x38', ';', '\x5', '\x6', '\x4', '\x16', '\x39', 
		';', '\x5', '\f', '\a', '\x2', ':', '$', '\x3', '\x2', '\x2', '\x2', ':', 
		')', '\x3', '\x2', '\x2', '\x2', ':', '*', '\x3', '\x2', '\x2', '\x2', 
		':', '+', '\x3', '\x2', '\x2', '\x2', ':', '-', '\x3', '\x2', '\x2', '\x2', 
		':', '\x31', '\x3', '\x2', '\x2', '\x2', ':', '\x33', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x35', '\x3', '\x2', '\x2', '\x2', ':', '\x37', '\x3', '\x2', 
		'\x2', '\x2', ':', '\x39', '\x3', '\x2', '\x2', '\x2', ';', 'x', '\x3', 
		'\x2', '\x2', '\x2', '<', '=', '\f', '\x15', '\x2', '\x2', '=', '>', '\a', 
		'\f', '\x2', '\x2', '>', 'w', '\x5', '\x6', '\x4', '\x16', '?', '@', '\f', 
		'\x14', '\x2', '\x2', '@', '\x41', '\a', '\r', '\x2', '\x2', '\x41', 'w', 
		'\x5', '\x6', '\x4', '\x15', '\x42', '\x43', '\f', '\x13', '\x2', '\x2', 
		'\x43', '\x44', '\a', '\xE', '\x2', '\x2', '\x44', 'w', '\x5', '\x6', 
		'\x4', '\x14', '\x45', '\x46', '\f', '\x12', '\x2', '\x2', '\x46', 'G', 
		'\a', '\xF', '\x2', '\x2', 'G', 'w', '\x5', '\x6', '\x4', '\x13', 'H', 
		'I', '\f', '\x11', '\x2', '\x2', 'I', 'J', '\a', '\x10', '\x2', '\x2', 
		'J', 'w', '\x5', '\x6', '\x4', '\x12', 'K', 'L', '\f', '\x10', '\x2', 
		'\x2', 'L', 'M', '\a', '\x1B', '\x2', '\x2', 'M', 'w', '\x5', '\x6', '\x4', 
		'\x11', 'N', 'O', '\f', '\xF', '\x2', '\x2', 'O', 'P', '\a', '\x1C', '\x2', 
		'\x2', 'P', 'w', '\x5', '\x6', '\x4', '\x10', 'Q', 'R', '\f', '\xE', '\x2', 
		'\x2', 'R', 'S', '\a', '\x1D', '\x2', '\x2', 'S', 'w', '\x5', '\x6', '\x4', 
		'\xF', 'T', 'U', '\f', '\r', '\x2', '\x2', 'U', 'V', '\a', '\x1E', '\x2', 
		'\x2', 'V', 'w', '\x5', '\x6', '\x4', '\xE', 'W', 'X', '\f', '\f', '\x2', 
		'\x2', 'X', 'Y', '\a', '\x1F', '\x2', '\x2', 'Y', 'w', '\x5', '\x6', '\x4', 
		'\r', 'Z', '[', '\f', '\v', '\x2', '\x2', '[', '\\', '\a', ' ', '\x2', 
		'\x2', '\\', 'w', '\x5', '\x6', '\x4', '\f', ']', '^', '\f', '\n', '\x2', 
		'\x2', '^', '_', '\a', '!', '\x2', '\x2', '_', 'w', '\x5', '\x6', '\x4', 
		'\v', '`', '\x61', '\f', '\t', '\x2', '\x2', '\x61', '\x62', '\a', '\x18', 
		'\x2', '\x2', '\x62', 'w', '\x5', '\x6', '\x4', '\n', '\x63', '\x64', 
		'\f', '\b', '\x2', '\x2', '\x64', '\x65', '\a', '$', '\x2', '\x2', '\x65', 
		'w', '\x5', '\x6', '\x4', '\t', '\x66', 'g', '\f', '\a', '\x2', '\x2', 
		'g', 'h', '\a', '&', '\x2', '\x2', 'h', 'w', '\x5', '\x6', '\x4', '\b', 
		'i', 'j', '\f', '\x6', '\x2', '\x2', 'j', 'k', '\a', '%', '\x2', '\x2', 
		'k', 'w', '\x5', '\x6', '\x4', '\a', 'l', 'm', '\f', '\x5', '\x2', '\x2', 
		'm', 'n', '\a', '\"', '\x2', '\x2', 'n', 'w', '\x5', '\x6', '\x4', '\x6', 
		'o', 'p', '\f', '\x4', '\x2', '\x2', 'p', 'q', '\a', '#', '\x2', '\x2', 
		'q', 'w', '\x5', '\x6', '\x4', '\x5', 'r', 's', '\f', '\x1A', '\x2', '\x2', 
		's', 'w', '\a', '\n', '\x2', '\x2', 't', 'u', '\f', '\x18', '\x2', '\x2', 
		'u', 'w', '\a', '\v', '\x2', '\x2', 'v', '<', '\x3', '\x2', '\x2', '\x2', 
		'v', '?', '\x3', '\x2', '\x2', '\x2', 'v', '\x42', '\x3', '\x2', '\x2', 
		'\x2', 'v', '\x45', '\x3', '\x2', '\x2', '\x2', 'v', 'H', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'K', '\x3', '\x2', '\x2', '\x2', 'v', 'N', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'Q', '\x3', '\x2', '\x2', '\x2', 'v', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'W', '\x3', '\x2', '\x2', '\x2', 'v', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'v', ']', '\x3', '\x2', '\x2', '\x2', 'v', '`', '\x3', '\x2', 
		'\x2', '\x2', 'v', '\x63', '\x3', '\x2', '\x2', '\x2', 'v', '\x66', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'i', '\x3', '\x2', '\x2', '\x2', 'v', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'v', 'o', '\x3', '\x2', '\x2', '\x2', 'v', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', '\x2', '\x2', 'w', 'z', '\x3', 
		'\x2', '\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\x3', 
		'\x2', '\x2', '\x2', 'y', '\a', '\x3', '\x2', '\x2', '\x2', 'z', 'x', 
		'\x3', '\x2', '\x2', '\x2', '{', '\x80', '\a', '\'', '\x2', '\x2', '|', 
		'}', '\a', '\x16', '\x2', '\x2', '}', '\x7F', '\a', '\'', '\x2', '\x2', 
		'~', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '~', '\x3', '\x2', '\x2', '\x2', '\x80', '\x81', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\a', '\x11', '\x2', 
		'\x2', '\x84', '\x89', '\x5', '\x6', '\x4', '\x2', '\x85', '\x86', '\a', 
		'\x17', '\x2', '\x2', '\x86', '\x88', '\x5', '\x6', '\x4', '\x2', '\x87', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x87', '\x3', '\x2', '\x2', '\x2', '\x89', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x89', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\x12', '\x2', 
		'\x2', '\x8D', '\t', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x93', '\a', 
		'\'', '\x2', '\x2', '\x8F', '\x90', '\a', '\x16', '\x2', '\x2', '\x90', 
		'\x92', '\a', '\'', '\x2', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x92', '\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\v', '\x3', '\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x96', '\x9B', '\a', '\x6', '\x2', '\x2', '\x97', '\x9B', '\a', 
		'\a', '\x2', '\x2', '\x98', '\x9B', '\a', '\b', '\x2', '\x2', '\x99', 
		'\x9B', '\a', '\t', '\x2', '\x2', '\x9A', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x9A', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x98', '\x3', 
		'\x2', '\x2', '\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\r', '\x11', '\x13', '\x1D', '\x1F', 
		':', 'v', 'x', '\x80', '\x89', '\x93', '\x9A',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
