//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TemplateParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class TemplateParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, CLOSE=3, INTEGER=4, FLOAT=5, BOOL=6, STRING=7, MUL=8, 
		DIV=9, MOD=10, ADD2=11, ADD=12, SUB2=13, SUB=14, BRACEL=15, BRACER=16, 
		IF=17, THEN=18, END=19, DOT=20, IDENT=21, COMMENT=22, WS=23;
	public const int
		RULE_document = 0, RULE_expr = 1, RULE_value = 2, RULE_if = 3;
	public static readonly string[] ruleNames = {
		"document", "expr", "value", "if"
	};

	private static readonly string[] _LiteralNames = {
		null, "'<%'", null, "'%>'", null, null, null, null, "'*'", "'/'", "'%'", 
		"'++'", "'+'", "'--'", "'-'", "'('", "')'", "'if'", "'then'", "'end'", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "CLOSE", "INTEGER", "FLOAT", "BOOL", "STRING", "MUL", 
		"DIV", "MOD", "ADD2", "ADD", "SUB2", "SUB", "BRACEL", "BRACER", "IF", 
		"THEN", "END", "DOT", "IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TemplateParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TemplateParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TemplateParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TemplateParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class DocumentContext : ParserRuleContext {
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfContext[] @if() {
			return GetRuleContexts<IfContext>();
		}
		public IfContext @if(int i) {
			return GetRuleContext<IfContext>(i);
		}
		public DocumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_document; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterDocument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitDocument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDocument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DocumentContext document() {
		DocumentContext _localctx = new DocumentContext(Context, State);
		EnterRule(_localctx, 0, RULE_document);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << ADD2) | (1L << ADD) | (1L << SUB2) | (1L << SUB) | (1L << BRACEL) | (1L << IF) | (1L << IDENT))) != 0)) {
				{
				State = 11;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEXT:
					{
					State = 8; Match(TEXT);
					}
					break;
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case ADD2:
				case ADD:
				case SUB2:
				case SUB:
				case BRACEL:
				case IDENT:
					{
					State = 9; expr(0);
					}
					break;
				case IF:
					{
					State = 10; @if();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 15;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext l;
		public IToken _IDENT;
		public IList<IToken> _props = new List<IToken>();
		public IToken op;
		public ExprContext brace;
		public ExprContext r;
		public ValueContext v;
		public ITerminalNode[] IDENT() { return GetTokens(TemplateParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(TemplateParser.IDENT, i);
		}
		public ITerminalNode[] DOT() { return GetTokens(TemplateParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(TemplateParser.DOT, i);
		}
		public ITerminalNode BRACEL() { return GetToken(TemplateParser.BRACEL, 0); }
		public ITerminalNode BRACER() { return GetToken(TemplateParser.BRACER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD2() { return GetToken(TemplateParser.ADD2, 0); }
		public ITerminalNode SUB2() { return GetToken(TemplateParser.SUB2, 0); }
		public ITerminalNode ADD() { return GetToken(TemplateParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(TemplateParser.SUB, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public ITerminalNode MUL() { return GetToken(TemplateParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(TemplateParser.DIV, 0); }
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				{
				State = 17; _localctx._IDENT = Match(IDENT);
				_localctx._props.Add(_localctx._IDENT);
				State = 22;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 18; _localctx.op = Match(DOT);
						State = 19; _localctx._IDENT = Match(IDENT);
						_localctx._props.Add(_localctx._IDENT);
						}
						} 
					}
					State = 24;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
				}
				}
				break;
			case BRACEL:
				{
				State = 25; Match(BRACEL);
				State = 26; _localctx.brace = expr(0);
				State = 27; Match(BRACER);
				}
				break;
			case ADD2:
			case SUB2:
				{
				State = 29;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADD2 || _la==SUB2) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 30; _localctx.r = expr(3);
				}
				break;
			case ADD:
			case SUB:
				{
				State = 31;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ADD || _la==SUB) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 32; _localctx.r = expr(2);
				}
				break;
			case INTEGER:
			case FLOAT:
			case BOOL:
			case STRING:
				{
				State = 33; _localctx.v = value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 44;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 42;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 36;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 37;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MUL || _la==DIV) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 38; _localctx.r = expr(6);
						}
						break;
					case 2:
						{
						_localctx = new ExprContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 39;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 40;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 41; _localctx.r = expr(5);
						}
						break;
					}
					} 
				}
				State = 46;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public IToken integerValue;
		public IToken floatValue;
		public IToken boolValue;
		public IToken stringValue;
		public ITerminalNode INTEGER() { return GetToken(TemplateParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(TemplateParser.FLOAT, 0); }
		public ITerminalNode BOOL() { return GetToken(TemplateParser.BOOL, 0); }
		public ITerminalNode STRING() { return GetToken(TemplateParser.STRING, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 4, RULE_value);
		try {
			State = 51;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; _localctx.integerValue = Match(INTEGER);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; _localctx.floatValue = Match(FLOAT);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; _localctx.boolValue = Match(BOOL);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 50; _localctx.stringValue = Match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		public IToken id;
		public IToken l;
		public ExprContext exp;
		public IToken r;
		public ITerminalNode THEN() { return GetToken(TemplateParser.THEN, 0); }
		public ITerminalNode END() { return GetToken(TemplateParser.END, 0); }
		public ITerminalNode IF() { return GetToken(TemplateParser.IF, 0); }
		public ITerminalNode BRACEL() { return GetToken(TemplateParser.BRACEL, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode BRACER() { return GetToken(TemplateParser.BRACER, 0); }
		public ITerminalNode[] TEXT() { return GetTokens(TemplateParser.TEXT); }
		public ITerminalNode TEXT(int i) {
			return GetToken(TemplateParser.TEXT, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		public override void EnterRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ITemplateParserListener typedListener = listener as ITemplateParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITemplateParserVisitor<TResult> typedVisitor = visitor as ITemplateParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 6, RULE_if);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; _localctx.id = Match(IF);
			State = 54; _localctx.l = Match(BRACEL);
			State = 55; _localctx.exp = expr(0);
			State = 56; _localctx.r = Match(BRACER);
			State = 57; Match(THEN);
			State = 62;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TEXT) | (1L << INTEGER) | (1L << FLOAT) | (1L << BOOL) | (1L << STRING) | (1L << ADD2) | (1L << ADD) | (1L << SUB2) | (1L << SUB) | (1L << BRACEL) | (1L << IDENT))) != 0)) {
				{
				State = 60;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INTEGER:
				case FLOAT:
				case BOOL:
				case STRING:
				case ADD2:
				case ADD:
				case SUB2:
				case SUB:
				case BRACEL:
				case IDENT:
					{
					State = 58; expr(0);
					}
					break;
				case TEXT:
					{
					State = 59; Match(TEXT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 64;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 65; Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '\x46', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\xE', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x11', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x17', '\n', '\x3', '\f', '\x3', 
		'\xE', '\x3', '\x1A', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '%', '\n', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', 
		'-', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x30', '\v', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x36', 
		'\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '?', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\x42', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x2', '\x3', '\x4', '\x6', '\x2', '\x4', '\x6', '\b', '\x2', 
		'\x5', '\x4', '\x2', '\r', '\r', '\xF', '\xF', '\x4', '\x2', '\xE', '\xE', 
		'\x10', '\x10', '\x3', '\x2', '\n', '\v', '\x2', 'P', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x4', '$', '\x3', '\x2', '\x2', '\x2', '\x6', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\b', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\xE', '\a', '\x4', '\x2', '\x2', '\v', '\xE', '\x5', '\x4', '\x3', 
		'\x2', '\f', '\xE', '\x5', '\b', '\x5', '\x2', '\r', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\r', '\v', '\x3', '\x2', '\x2', '\x2', '\r', '\f', '\x3', 
		'\x2', '\x2', '\x2', '\xE', '\x11', '\x3', '\x2', '\x2', '\x2', '\xF', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xF', '\x10', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x3', '\x3', '\x2', '\x2', '\x2', '\x11', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '\x13', '\b', '\x3', '\x1', '\x2', '\x13', 
		'\x18', '\a', '\x17', '\x2', '\x2', '\x14', '\x15', '\a', '\x16', '\x2', 
		'\x2', '\x15', '\x17', '\a', '\x17', '\x2', '\x2', '\x16', '\x14', '\x3', 
		'\x2', '\x2', '\x2', '\x17', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x16', '\x3', '\x2', '\x2', '\x2', '\x18', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '%', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\a', '\x11', '\x2', '\x2', '\x1C', 
		'\x1D', '\x5', '\x4', '\x3', '\x2', '\x1D', '\x1E', '\a', '\x12', '\x2', 
		'\x2', '\x1E', '%', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\t', '\x2', 
		'\x2', '\x2', ' ', '%', '\x5', '\x4', '\x3', '\x5', '!', '\"', '\t', '\x3', 
		'\x2', '\x2', '\"', '%', '\x5', '\x4', '\x3', '\x4', '#', '%', '\x5', 
		'\x6', '\x4', '\x2', '$', '\x12', '\x3', '\x2', '\x2', '\x2', '$', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x1F', '\x3', '\x2', '\x2', '\x2', '$', 
		'!', '\x3', '\x2', '\x2', '\x2', '$', '#', '\x3', '\x2', '\x2', '\x2', 
		'%', '.', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\f', '\a', '\x2', '\x2', 
		'\'', '(', '\t', '\x4', '\x2', '\x2', '(', '-', '\x5', '\x4', '\x3', '\b', 
		')', '*', '\f', '\x6', '\x2', '\x2', '*', '+', '\t', '\x3', '\x2', '\x2', 
		'+', '-', '\x5', '\x4', '\x3', '\a', ',', '&', '\x3', '\x2', '\x2', '\x2', 
		',', ')', '\x3', '\x2', '\x2', '\x2', '-', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '.', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', 
		'\x2', '/', '\x5', '\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\x36', '\a', '\x6', '\x2', '\x2', '\x32', '\x36', 
		'\a', '\a', '\x2', '\x2', '\x33', '\x36', '\a', '\b', '\x2', '\x2', '\x34', 
		'\x36', '\a', '\t', '\x2', '\x2', '\x35', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x32', '\x3', '\x2', '\x2', '\x2', '\x35', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x13', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\x11', '\x2', '\x2', '\x39', ':', '\x5', 
		'\x4', '\x3', '\x2', ':', ';', '\a', '\x12', '\x2', '\x2', ';', '@', '\a', 
		'\x14', '\x2', '\x2', '<', '?', '\x5', '\x4', '\x3', '\x2', '=', '?', 
		'\a', '\x4', '\x2', '\x2', '>', '<', '\x3', '\x2', '\x2', '\x2', '>', 
		'=', '\x3', '\x2', '\x2', '\x2', '?', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'@', '>', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x43', '\x3', '\x2', '\x2', '\x2', '\x42', '@', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x44', '\a', '\x15', '\x2', '\x2', '\x44', 
		'\t', '\x3', '\x2', '\x2', '\x2', '\v', '\r', '\xF', '\x18', '$', ',', 
		'.', '\x35', '>', '@',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
