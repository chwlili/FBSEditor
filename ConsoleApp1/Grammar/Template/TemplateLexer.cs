//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from TemplateLexer.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class TemplateLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		OPEN=1, TEXT=2, CLOSE=3, INTEGER=4, FLOAT=5, BOOL=6, STRING=7, MUL=8, 
		DIV=9, MOD=10, ADD2=11, ADD=12, SUB2=13, SUB=14, BRACEL=15, BRACER=16, 
		IF=17, THEN=18, END=19, DOT=20, IDENT=21, COMMENT=22, WS=23;
	public const int
		CODE_MODE=1;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "CODE_MODE"
	};

	public static readonly string[] ruleNames = {
		"OPEN", "TEXT", "CLOSE", "INTEGER", "FLOAT", "BOOL", "STRING", "MUL", 
		"DIV", "MOD", "ADD2", "ADD", "SUB2", "SUB", "BRACEL", "BRACER", "IF", 
		"THEN", "END", "DOT", "IDENT", "COMMENT", "WS"
	};


	protected bool IsBeginTag()
	{
		return (InputStream.LA(1)=='<' && InputStream.LA(2)=='%');
	}


	public TemplateLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TemplateLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'<%'", null, "'%>'", null, null, null, null, "'*'", "'/'", "'%'", 
		"'++'", "'+'", "'--'", "'-'", "'('", "')'", "'if'", "'then'", "'end'", 
		"'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OPEN", "TEXT", "CLOSE", "INTEGER", "FLOAT", "BOOL", "STRING", "MUL", 
		"DIV", "MOD", "ADD2", "ADD", "SUB2", "SUB", "BRACEL", "BRACER", "IF", 
		"THEN", "END", "DOT", "IDENT", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "TemplateLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static TemplateLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1 : return TEXT_sempred(_localctx, predIndex);
		}
		return true;
	}
	private bool TEXT_sempred(RuleContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return !IsBeginTag();
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x19', '\xBF', '\b', '\x1', '\b', '\x1', '\x4', '\x2', 
		'\t', '\x2', '\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', 
		'\x5', '\t', '\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', 
		'\x4', '\b', '\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', 
		'\x4', '\v', '\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', 
		'\x4', '\xE', '\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', 
		'\x10', '\x4', '\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', 
		'\x13', '\t', '\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', 
		'\x15', '\x4', '\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', 
		'\x18', '\t', '\x18', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x6', 
		'\x3', ';', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '<', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\x6', '\x5', '\x46', '\n', '\x5', '\r', '\x5', '\xE', '\x5', 
		'G', '\x3', '\x6', '\x6', '\x6', 'K', '\n', '\x6', '\r', '\x6', '\xE', 
		'\x6', 'L', '\x3', '\x6', '\x3', '\x6', '\x6', '\x6', 'Q', '\n', '\x6', 
		'\r', '\x6', '\xE', '\x6', 'R', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'W', '\n', '\x6', '\x3', '\x6', '\x6', '\x6', 'Z', '\n', '\x6', '\r', 
		'\x6', '\xE', '\x6', '[', '\x5', '\x6', '^', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'i', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\a', '\b', 'm', '\n', '\b', '\f', '\b', '\xE', '\b', 'p', 
		'\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x98', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x9B', '\v', '\x16', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xA1', '\n', '\x17', 
		'\f', '\x17', '\xE', '\x17', '\xA4', '\v', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\xA7', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xAE', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\xB1', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\xB5', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x18', '\x6', '\x18', '\xBA', '\n', '\x18', '\r', '\x18', '\xE', '\x18', 
		'\xBB', '\x3', '\x18', '\x3', '\x18', '\x4', 'n', '\xAF', '\x2', '\x19', 
		'\x4', '\x3', '\x6', '\x4', '\b', '\x5', '\n', '\x6', '\f', '\a', '\xE', 
		'\b', '\x10', '\t', '\x12', '\n', '\x14', '\v', '\x16', '\f', '\x18', 
		'\r', '\x1A', '\xE', '\x1C', '\xF', '\x1E', '\x10', ' ', '\x11', '\"', 
		'\x12', '$', '\x13', '&', '\x14', '(', '\x15', '*', '\x16', ',', '\x17', 
		'.', '\x18', '\x30', '\x19', '\x4', '\x2', '\x3', '\t', '\x3', '\x2', 
		'\x32', ';', '\x4', '\x2', 'G', 'G', 'g', 'g', '\x4', '\x2', '-', '-', 
		'/', '/', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', 
		'\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x4', 
		'\x2', '\f', '\f', '\xF', '\xF', '\x5', '\x2', '\v', '\f', '\xF', '\xF', 
		'\"', '\"', '\x2', '\xCC', '\x2', '\x4', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x6', '\x3', '\x2', '\x2', '\x2', '\x3', '\b', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\n', '\x3', '\x2', '\x2', '\x2', '\x3', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\xE', '\x3', '\x2', '\x2', '\x2', '\x3', '\x10', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x12', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x3', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '\x18', '\x3', '\x2', '\x2', '\x2', '\x3', '\x1A', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x3', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\x3', '\"', '\x3', '\x2', '\x2', '\x2', '\x3', '$', '\x3', '\x2', '\x2', 
		'\x2', '\x3', '&', '\x3', '\x2', '\x2', '\x2', '\x3', '(', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '*', '\x3', '\x2', '\x2', '\x2', '\x3', ',', '\x3', 
		'\x2', '\x2', '\x2', '\x3', '.', '\x3', '\x2', '\x2', '\x2', '\x3', '\x30', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\x6', ':', '\x3', '\x2', '\x2', '\x2', '\b', '>', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x45', '\x3', '\x2', '\x2', '\x2', '\f', 'J', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'h', '\x3', '\x2', '\x2', '\x2', '\x10', 'j', '\x3', 
		'\x2', '\x2', '\x2', '\x12', 's', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x16', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x18', 'y', '\x3', '\x2', '\x2', '\x2', '\x1A', '|', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '~', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x81', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x83', '\x3', '\x2', '\x2', '\x2', '\"', '\x85', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x87', '\x3', '\x2', '\x2', '\x2', '&', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '(', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '*', '\x93', '\x3', '\x2', '\x2', '\x2', ',', '\x95', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xB4', '\x3', '\x2', '\x2', '\x2', '\x30', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', '>', '\x2', '\x2', '\x33', 
		'\x34', '\a', '\'', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\b', '\x2', '\x2', '\x2', '\x36', '\x37', '\b', 
		'\x2', '\x3', '\x2', '\x37', '\x5', '\x3', '\x2', '\x2', '\x2', '\x38', 
		'\x39', '\x6', '\x3', '\x2', '\x2', '\x39', ';', '\v', '\x2', '\x2', '\x2', 
		':', '\x38', '\x3', '\x2', '\x2', '\x2', ';', '<', '\x3', '\x2', '\x2', 
		'\x2', '<', ':', '\x3', '\x2', '\x2', '\x2', '<', '=', '\x3', '\x2', '\x2', 
		'\x2', '=', '\a', '\x3', '\x2', '\x2', '\x2', '>', '?', '\a', '\'', '\x2', 
		'\x2', '?', '@', '\a', '@', '\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\b', '\x4', '\x4', '\x2', '\x42', '\x43', '\b', 
		'\x4', '\x3', '\x2', '\x43', '\t', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x46', '\t', '\x2', '\x2', '\x2', '\x45', '\x44', '\x3', '\x2', '\x2', 
		'\x2', '\x46', 'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x45', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'I', 'K', '\t', '\x2', '\x2', '\x2', 'J', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'P', '\a', '\x30', '\x2', '\x2', 'O', 'Q', '\t', 
		'\x2', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', 
		'\x2', '\x2', '\x2', 'S', ']', '\x3', '\x2', '\x2', '\x2', 'T', 'V', '\t', 
		'\x3', '\x2', '\x2', 'U', 'W', '\t', '\x4', '\x2', '\x2', 'V', 'U', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'Y', '\x3', 
		'\x2', '\x2', '\x2', 'X', 'Z', '\t', '\x2', '\x2', '\x2', 'Y', 'X', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', '[', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', '^', 
		'\x3', '\x2', '\x2', '\x2', ']', 'T', '\x3', '\x2', '\x2', '\x2', ']', 
		'^', '\x3', '\x2', '\x2', '\x2', '^', '\r', '\x3', '\x2', '\x2', '\x2', 
		'_', '`', '\a', 'v', '\x2', '\x2', '`', '\x61', '\a', 't', '\x2', '\x2', 
		'\x61', '\x62', '\a', 'w', '\x2', '\x2', '\x62', 'i', '\a', 'g', '\x2', 
		'\x2', '\x63', '\x64', '\a', 'h', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\x63', '\x2', '\x2', '\x65', '\x66', '\a', 'n', '\x2', '\x2', '\x66', 
		'g', '\a', 'u', '\x2', '\x2', 'g', 'i', '\a', 'g', '\x2', '\x2', 'h', 
		'_', '\x3', '\x2', '\x2', '\x2', 'h', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'i', '\xF', '\x3', '\x2', '\x2', '\x2', 'j', 'n', '\a', '$', '\x2', '\x2', 
		'k', 'm', '\v', '\x2', '\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 
		'm', 'p', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', '\x2', '\x2', 
		'n', 'l', '\x3', '\x2', '\x2', '\x2', 'o', 'q', '\x3', '\x2', '\x2', '\x2', 
		'p', 'n', '\x3', '\x2', '\x2', '\x2', 'q', 'r', '\a', '$', '\x2', '\x2', 
		'r', '\x11', '\x3', '\x2', '\x2', '\x2', 's', 't', '\a', ',', '\x2', '\x2', 
		't', '\x13', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\x31', '\x2', 
		'\x2', 'v', '\x15', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\a', '\'', 
		'\x2', '\x2', 'x', '\x17', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\a', 
		'-', '\x2', '\x2', 'z', '{', '\a', '-', '\x2', '\x2', '{', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\a', '-', '\x2', '\x2', '}', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x7F', '\a', '/', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '/', '\x2', '\x2', '\x80', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x81', 
		'\x82', '\a', '/', '\x2', '\x2', '\x82', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x84', '\a', '*', '\x2', '\x2', '\x84', '!', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x86', '\a', '+', '\x2', '\x2', '\x86', '#', '\x3', 
		'\x2', '\x2', '\x2', '\x87', '\x88', '\a', 'k', '\x2', '\x2', '\x88', 
		'\x89', '\a', 'h', '\x2', '\x2', '\x89', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x8B', '\a', 'v', '\x2', '\x2', '\x8B', '\x8C', '\a', 'j', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', 'g', '\x2', '\x2', '\x8D', '\x8E', '\a', 
		'p', '\x2', '\x2', '\x8E', '\'', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\a', 'g', '\x2', '\x2', '\x90', '\x91', '\a', 'p', '\x2', '\x2', '\x91', 
		'\x92', '\a', '\x66', '\x2', '\x2', '\x92', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\a', '\x30', '\x2', '\x2', '\x94', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x99', '\t', '\x5', '\x2', '\x2', '\x96', 
		'\x98', '\t', '\x6', '\x2', '\x2', '\x97', '\x96', '\x3', '\x2', '\x2', 
		'\x2', '\x98', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x99', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '\x31', '\x2', '\x2', '\x9D', '\x9E', '\a', 
		'\x31', '\x2', '\x2', '\x9E', '\xA2', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA1', '\n', '\a', '\x2', '\x2', '\xA0', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA0', '\x3', 
		'\x2', '\x2', '\x2', '\xA2', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA3', 
		'\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA7', '\a', '\xF', '\x2', '\x2', '\xA6', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA6', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA7', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xA8', '\xB5', '\a', '\f', '\x2', 
		'\x2', '\xA9', '\xAA', '\a', '\x31', '\x2', '\x2', '\xAA', '\xAB', '\a', 
		',', '\x2', '\x2', '\xAB', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAE', '\v', '\x2', '\x2', '\x2', '\xAD', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xB0', 
		'\xB2', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xAF', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB3', '\a', ',', '\x2', '\x2', '\xB3', '\xB5', '\a', 
		'\x31', '\x2', '\x2', '\xB4', '\x9C', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\b', '\x17', '\x5', '\x2', '\xB7', '/', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xBA', '\t', '\b', '\x2', '\x2', '\xB9', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBE', '\b', '\x18', '\x3', '\x2', '\xBE', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\x13', '\x2', '\x3', '<', 'G', 'L', 'R', 'V', '[', ']', 'h', 'n', 
		'\x99', '\xA2', '\xA6', '\xAF', '\xB4', '\xBB', '\x6', '\x4', '\x3', '\x2', 
		'\b', '\x2', '\x2', '\x4', '\x2', '\x2', '\x2', '\x3', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
